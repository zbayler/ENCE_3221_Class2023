
AudioJack_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e388  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800e510  0800e510  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e694  0800e694  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e694  0800e694  0001e694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e69c  0800e69c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e69c  0800e69c  0001e69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6a0  0800e6a0  0001e6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00001d18  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  20001da8  20001da8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d515  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c67  00000000  00000000  0003d5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  00042240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  000436a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e05  00000000  00000000  00044900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204e5  00000000  00000000  0006b705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc0c  00000000  00000000  0008bbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001577f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000546c  00000000  00000000  00157848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e4f8 	.word	0x0800e4f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800e4f8 	.word	0x0800e4f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004e2:	f107 020c 	add.w	r2, r7, #12
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2302      	movs	r3, #2
 80004ec:	2194      	movs	r1, #148	; 0x94
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <write_register+0x30>)
 80004f0:	f003 fd4c 	bl	8003f8c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200000ac 	.word	0x200000ac

08000500 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000510:	f107 020c 	add.w	r2, r7, #12
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2301      	movs	r3, #1
 800051a:	2194      	movs	r1, #148	; 0x94
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <read_register+0x3c>)
 800051e:	f003 fd35 	bl	8003f8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	2194      	movs	r1, #148	; 0x94
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <read_register+0x3c>)
 800052e:	f003 fe2b 	bl	8004188 <HAL_I2C_Master_Receive>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000ac 	.word	0x200000ac

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	f107 0c10 	add.w	ip, r7, #16
 800054c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000550:	4b7b      	ldr	r3, [pc, #492]	; (8000740 <CS43_Init+0x200>)
 8000552:	2200      	movs	r2, #0
 8000554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <CS43_Init+0x200>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	69da      	ldr	r2, [r3, #28]
 800055e:	4b78      	ldr	r3, [pc, #480]	; (8000740 <CS43_Init+0x200>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000566:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2110      	movs	r1, #16
 800056c:	4875      	ldr	r0, [pc, #468]	; (8000744 <CS43_Init+0x204>)
 800056e:	f001 ffa5 	bl	80024bc <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000572:	4b75      	ldr	r3, [pc, #468]	; (8000748 <CS43_Init+0x208>)
 8000574:	4618      	mov	r0, r3
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2254      	movs	r2, #84	; 0x54
 800057c:	4619      	mov	r1, r3
 800057e:	f00d fea7 	bl	800e2d0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000582:	2301      	movs	r3, #1
 8000584:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4619      	mov	r1, r3
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff ff9e 	bl	80004cc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	b2db      	uxtb	r3, r3
 800059c:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059e:	797b      	ldrb	r3, [r7, #5]
 80005a0:	f043 030c 	orr.w	r3, r3, #12
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	f043 0303 	orr.w	r3, r3, #3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	3301      	adds	r3, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	2004      	movs	r0, #4
 80005ba:	f7ff ff87 	bl	80004cc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	3301      	adds	r3, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	2005      	movs	r0, #5
 80005ca:	f7ff ff7f 	bl	80004cc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	2006      	movs	r0, #6
 80005d4:	f7ff ff94 	bl	8000500 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d8:	797b      	ldrb	r3, [r7, #5]
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005e2:	797b      	ldrb	r3, [r7, #5]
 80005e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	f023 0310 	bic.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000600:	797b      	ldrb	r3, [r7, #5]
 8000602:	f023 0304 	bic.w	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	b2db      	uxtb	r3, r3
 8000612:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000614:	797b      	ldrb	r3, [r7, #5]
 8000616:	f043 0303 	orr.w	r3, r3, #3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	3301      	adds	r3, #1
 8000622:	4619      	mov	r1, r3
 8000624:	2006      	movs	r0, #6
 8000626:	f7ff ff51 	bl	80004cc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	3301      	adds	r3, #1
 800062e:	4619      	mov	r1, r3
 8000630:	2008      	movs	r0, #8
 8000632:	f7ff ff65 	bl	8000500 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	f023 030f 	bic.w	r3, r3, #15
 800063c:	b2db      	uxtb	r3, r3
 800063e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000640:	797b      	ldrb	r3, [r7, #5]
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	3301      	adds	r3, #1
 800064e:	4619      	mov	r1, r3
 8000650:	2008      	movs	r0, #8
 8000652:	f7ff ff3b 	bl	80004cc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	3301      	adds	r3, #1
 800065a:	4619      	mov	r1, r3
 800065c:	2009      	movs	r0, #9
 800065e:	f7ff ff4f 	bl	8000500 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	f023 030f 	bic.w	r3, r3, #15
 8000668:	b2db      	uxtb	r3, r3
 800066a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800066c:	797b      	ldrb	r3, [r7, #5]
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	2009      	movs	r0, #9
 800067e:	f7ff ff25 	bl	80004cc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	3301      	adds	r3, #1
 8000686:	4619      	mov	r1, r3
 8000688:	200e      	movs	r0, #14
 800068a:	f7ff ff39 	bl	8000500 <read_register>
	if(outputMode == MODE_ANALOG1)
 800068e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000692:	2b01      	cmp	r3, #1
 8000694:	d119      	bne.n	80006ca <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006a0:	797b      	ldrb	r3, [r7, #5]
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	f023 0320 	bic.w	r3, r3, #32
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	f023 0310 	bic.w	r3, r3, #16
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006be:	797b      	ldrb	r3, [r7, #5]
 80006c0:	f023 0308 	bic.w	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	717b      	strb	r3, [r7, #5]
 80006c8:	e005      	b.n	80006d6 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006ca:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006d2:	2302      	movs	r3, #2
 80006d4:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	3301      	adds	r3, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	200e      	movs	r0, #14
 80006de:	f7ff fef5 	bl	80004cc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	200f      	movs	r0, #15
 80006ea:	f7ff ff09 	bl	8000500 <read_register>
	iData[1] = 0x00;
 80006ee:	2300      	movs	r3, #0
 80006f0:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	200f      	movs	r0, #15
 80006fa:	f7ff fee7 	bl	80004cc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	3301      	adds	r3, #1
 8000706:	4619      	mov	r1, r3
 8000708:	2014      	movs	r0, #20
 800070a:	f7ff fedf 	bl	80004cc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2015      	movs	r0, #21
 8000716:	f7ff fed9 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	201a      	movs	r0, #26
 8000722:	f7ff fed3 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	3301      	adds	r3, #1
 800072a:	4619      	mov	r1, r3
 800072c:	201b      	movs	r0, #27
 800072e:	f7ff fecd 	bl	80004cc <write_register>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073c:	b004      	add	sp, #16
 800073e:	4770      	bx	lr
 8000740:	20000158 	.word	0x20000158
 8000744:	40020c00 	.word	0x40020c00
 8000748:	200000ac 	.word	0x200000ac

0800074c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d82b      	bhi.n	80007b4 <CS43_Enable_RightLeft+0x68>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <CS43_Enable_RightLeft+0x18>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	08000775 	.word	0x08000775
 8000768:	08000785 	.word	0x08000785
 800076c:	08000795 	.word	0x08000795
 8000770:	080007a5 	.word	0x080007a5
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000774:	23c0      	movs	r3, #192	; 0xc0
 8000776:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000778:	7b7b      	ldrb	r3, [r7, #13]
 800077a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077e:	b2db      	uxtb	r3, r3
 8000780:	737b      	strb	r3, [r7, #13]
			break;
 8000782:	e018      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078e:	b2db      	uxtb	r3, r3
 8000790:	737b      	strb	r3, [r7, #13]
			break;
 8000792:	e010      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000798:	7b7b      	ldrb	r3, [r7, #13]
 800079a:	f043 0320 	orr.w	r3, r3, #32
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	737b      	strb	r3, [r7, #13]
			break;
 80007a2:	e008      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	737b      	strb	r3, [r7, #13]
			break;
 80007b2:	e000      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b6:	7b7b      	ldrb	r3, [r7, #13]
 80007b8:	f043 030c 	orr.w	r3, r3, #12
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007c0:	7b7b      	ldrb	r3, [r7, #13]
 80007c2:	f043 0303 	orr.w	r3, r3, #3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	3301      	adds	r3, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	2004      	movs	r0, #4
 80007d4:	f7ff fe7a 	bl	80004cc <write_register>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	3319      	adds	r3, #25
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	3301      	adds	r3, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	2020      	movs	r0, #32
 80007fc:	f7ff fe66 	bl	80004cc <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	3301      	adds	r3, #1
 8000806:	4619      	mov	r1, r3
 8000808:	2021      	movs	r0, #33	; 0x21
 800080a:	f7ff fe5f 	bl	80004cc <write_register>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d019      	beq.n	800085a <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	3301      	adds	r3, #1
 8000830:	4619      	mov	r1, r3
 8000832:	2004      	movs	r0, #4
 8000834:	f7ff fe4a 	bl	80004cc <write_register>
    iData[1] = 0x01;
 8000838:	2301      	movs	r3, #1
 800083a:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	3301      	adds	r3, #1
 8000842:	4619      	mov	r1, r3
 8000844:	2022      	movs	r0, #34	; 0x22
 8000846:	f7ff fe41 	bl	80004cc <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	3301      	adds	r3, #1
 8000850:	4619      	mov	r1, r3
 8000852:	2023      	movs	r0, #35	; 0x23
 8000854:	f7ff fe3a 	bl	80004cc <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000858:	e018      	b.n	800088c <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	3301      	adds	r3, #1
 8000864:	4619      	mov	r1, r3
 8000866:	2022      	movs	r0, #34	; 0x22
 8000868:	f7ff fe30 	bl	80004cc <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	3301      	adds	r3, #1
 8000872:	4619      	mov	r1, r3
 8000874:	2023      	movs	r0, #35	; 0x23
 8000876:	f7ff fe29 	bl	80004cc <write_register>
    iData[1] = 0xAF;
 800087a:	23af      	movs	r3, #175	; 0xaf
 800087c:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	3301      	adds	r3, #1
 8000884:	4619      	mov	r1, r3
 8000886:	2004      	movs	r0, #4
 8000888:	f7ff fe20 	bl	80004cc <write_register>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ffbb 	bl	8000816 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a0:	2399      	movs	r3, #153	; 0x99
 80008a2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	3301      	adds	r3, #1
 80008a8:	4619      	mov	r1, r3
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fe0e 	bl	80004cc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	3301      	adds	r3, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	2047      	movs	r0, #71	; 0x47
 80008bc:	f7ff fe06 	bl	80004cc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	3301      	adds	r3, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe1a 	bl	8000500 <read_register>
	iData[1] |= 0x80;
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	3301      	adds	r3, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdf5 	bl	80004cc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	3301      	adds	r3, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f7ff fe09 	bl	8000500 <read_register>
	iData[1] &= ~(0x80);
 80008ee:	797b      	ldrb	r3, [r7, #5]
 80008f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	3301      	adds	r3, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	2032      	movs	r0, #50	; 0x32
 8000900:	f7ff fde4 	bl	80004cc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000904:	2300      	movs	r3, #0
 8000906:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	3301      	adds	r3, #1
 800090c:	4619      	mov	r1, r3
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fddc 	bl	80004cc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000914:	239e      	movs	r3, #158	; 0x9e
 8000916:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	3301      	adds	r3, #1
 800091c:	4619      	mov	r1, r3
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdd4 	bl	80004cc <write_register>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <CS43_Stop>:

void CS43_Stop(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff ff6f 	bl	8000816 <CS43_SetMute>
  iData[1] = 0x04;
 8000938:	2304      	movs	r3, #4
 800093a:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	3301      	adds	r3, #1
 8000940:	4619      	mov	r1, r3
 8000942:	200e      	movs	r0, #14
 8000944:	f7ff fdc2 	bl	80004cc <write_register>
	iData[1] = 0x9F;
 8000948:	239f      	movs	r3, #159	; 0x9f
 800094a:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	3301      	adds	r3, #1
 8000950:	4619      	mov	r1, r3
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff fdba 	bl	80004cc <write_register>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
 800096c:	23ff      	movs	r3, #255	; 0xff
 800096e:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]
 8000974:	e00b      	b.n	800098e <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <audioI2S_pllClockConfig+0x8c>)
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d101      	bne.n	8000988 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000988:	7ffb      	ldrb	r3, [r7, #31]
 800098a:	3301      	adds	r3, #1
 800098c:	77fb      	strb	r3, [r7, #31]
 800098e:	7ffb      	ldrb	r3, [r7, #31]
 8000990:	2b07      	cmp	r3, #7
 8000992:	d9f0      	bls.n	8000976 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4618      	mov	r0, r3
 800099a:	f006 fbe9 	bl	8007170 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099e:	7fbb      	ldrb	r3, [r7, #30]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d111      	bne.n	80009cc <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a8:	2301      	movs	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009ac:	7fbb      	ldrb	r3, [r7, #30]
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <audioI2S_pllClockConfig+0x90>)
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b6:	7fbb      	ldrb	r3, [r7, #30]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <audioI2S_pllClockConfig+0x94>)
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4618      	mov	r0, r3
 80009c6:	f006 faf1 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009ca:	e00b      	b.n	80009e4 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009d0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d4:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4618      	mov	r0, r3
 80009e0:	f006 fae4 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800e580 	.word	0x0800e580
 80009f0:	0800e5a0 	.word	0x0800e5a0
 80009f4:	0800e5c0 	.word	0x0800e5c0

080009f8 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <I2S3_freqUpdate+0x84>)
 8000a06:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a1a:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a44:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4e:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 fd85 	bl	800556c <HAL_I2S_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e000      	b.n	8000a6e <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a6c:	2301      	movs	r3, #1
  }
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000100 	.word	0x20000100
 8000a7c:	40003c00 	.word	0x40003c00

08000a80 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <audioI2S_setHandle+0x1c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000100 	.word	0x20000100

08000aa0 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff59 	bl	8000960 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa2 	bl	80009f8 <I2S3_freqUpdate>
  return true;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000aca:	f7ff fee3 	bl	8000894 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <audioI2S_play+0x38>)
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad8:	d203      	bcs.n	8000ae2 <audioI2S_play+0x22>
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	e001      	b.n	8000ae6 <audioI2S_play+0x26>
 8000ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	f004 fe7f 	bl	80057ec <HAL_I2S_Transmit_DMA>
  return true;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000100 	.word	0x20000100

08000afc <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b00:	f7ff ff14 	bl	800092c <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <audioI2S_pause+0x18>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 ff17 	bl	800593c <HAL_I2S_DMAPause>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000100 	.word	0x20000100

08000b18 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b1c:	f7ff feba 	bl	8000894 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <audioI2S_resume+0x18>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 ff6b 	bl	8005a00 <HAL_I2S_DMAResume>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000100 	.word	0x20000100

08000b34 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b38:	f7ff fef8 	bl	800092c <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <audioI2S_stop+0x18>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 fff1 	bl	8005b28 <HAL_I2S_DMAStop>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000100 	.word	0x20000100

08000b50 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_I2S_TxCpltCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b62:	f000 fd39 	bl	80015d8 <audioI2S_fullTransfer_Callback>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40003c00 	.word	0x40003c00

08000b74 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b86:	f000 fd1b 	bl	80015c0 <audioI2S_halfTransfer_Callback>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40003c00 	.word	0x40003c00

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b095      	sub	sp, #84	; 0x54
 8000b9c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fd51 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 f8c9 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f000 f9ad 	bl	8000f04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000baa:	f000 f98b 	bl	8000ec4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000bae:	f000 f92d 	bl	8000e0c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000bb2:	f000 f959 	bl	8000e68 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000bb6:	f007 fb4b 	bl	8008250 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000bba:	f00c fff7 	bl	800dbac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000bbe:	4c55      	ldr	r4, [pc, #340]	; (8000d14 <main+0x17c>)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9311      	str	r3, [sp, #68]	; 0x44
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	f104 0310 	add.w	r3, r4, #16
 8000bca:	2244      	movs	r2, #68	; 0x44
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f00d fb7f 	bl	800e2d0 <memcpy>
 8000bd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bd6:	f7ff fcb3 	bl	8000540 <CS43_Init>
  CS43_SetVolume(150); //0-255
 8000bda:	2096      	movs	r0, #150	; 0x96
 8000bdc:	f7ff fe00 	bl	80007e0 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT); //do I need to change for speaker?
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff fdb3 	bl	800074c <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000be6:	484c      	ldr	r0, [pc, #304]	; (8000d18 <main+0x180>)
 8000be8:	f7ff ff4a 	bl	8000a80 <audioI2S_setHandle>

  bool isSdCardMounted = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bf4:	f00d f800 	bl	800dbf8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    //test the USB around 22min in vid
    if(Appli_state == APPLICATION_START){
 8000bf8:	4b48      	ldr	r3, [pc, #288]	; (8000d1c <main+0x184>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d106      	bne.n	8000c0e <main+0x76>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); //green
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c06:	4846      	ldr	r0, [pc, #280]	; (8000d20 <main+0x188>)
 8000c08:	f001 fc58 	bl	80024bc <HAL_GPIO_WritePin>
 8000c0c:	e010      	b.n	8000c30 <main+0x98>
    }
    else if(Appli_state == APPLICATION_DISCONNECT){
 8000c0e:	4b43      	ldr	r3, [pc, #268]	; (8000d1c <main+0x184>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d10c      	bne.n	8000c30 <main+0x98>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1c:	4840      	ldr	r0, [pc, #256]	; (8000d20 <main+0x188>)
 8000c1e:	f001 fc4d 	bl	80024bc <HAL_GPIO_WritePin>
		f_mount(NULL, (TCHAR const*)"", 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	493f      	ldr	r1, [pc, #252]	; (8000d24 <main+0x18c>)
 8000c26:	2000      	movs	r0, #0
 8000c28:	f00c f970 	bl	800cf0c <f_mount>
		isSdCardMounted = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	71fb      	strb	r3, [r7, #7]
    }


    if(Appli_state == APPLICATION_READY){
 8000c30:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <main+0x184>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d1dd      	bne.n	8000bf4 <main+0x5c>
    	if(!isSdCardMounted){
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <main+0xba>
    		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	4938      	ldr	r1, [pc, #224]	; (8000d28 <main+0x190>)
 8000c48:	4838      	ldr	r0, [pc, #224]	; (8000d2c <main+0x194>)
 8000c4a:	f00c f95f 	bl	800cf0c <f_mount>
    		isSdCardMounted = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
    	}
    //should include the whole next thing?}

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){ //checking button for start
 8000c52:	2101      	movs	r1, #1
 8000c54:	4836      	ldr	r0, [pc, #216]	; (8000d30 <main+0x198>)
 8000c56:	f001 fc19 	bl	800248c <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0c9      	beq.n	8000bf4 <main+0x5c>
			//printf("b4 press"); need other stuff to actual print to console to use for debugging
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); //playing a file; orange
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	482e      	ldr	r0, [pc, #184]	; (8000d20 <main+0x188>)
 8000c68:	f001 fc28 	bl	80024bc <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c70:	f000 fd5a 	bl	8001728 <HAL_Delay>
			//printf("after delay");
			wavPlayer_fileSelect(WAV_FILE1);
 8000c74:	482f      	ldr	r0, [pc, #188]	; (8000d34 <main+0x19c>)
 8000c76:	f000 fbb1 	bl	80013dc <wavPlayer_fileSelect>
			wavPlayer_play();	//starts
 8000c7a:	f000 fbd9 	bl	8001430 <wavPlayer_play>
			while(!wavPlayer_isFinished()){	//infinite while there's file left
 8000c7e:	e035      	b.n	8000cec <main+0x154>
				wavPlayer_process(); //continuous
 8000c80:	f000 fc08 	bl	8001494 <wavPlayer_process>
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000c84:	2101      	movs	r1, #1
 8000c86:	482a      	ldr	r0, [pc, #168]	; (8000d30 <main+0x198>)
 8000c88:	f001 fc00 	bl	800248c <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d02c      	beq.n	8000cec <main+0x154>
					pauseResumeToggle ^= 1;
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	f083 0301 	eor.w	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	71bb      	strb	r3, [r7, #6]
					if(pauseResumeToggle){ //pause
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00b      	beq.n	8000cc2 <main+0x12a>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //Red LED
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb0:	481b      	ldr	r0, [pc, #108]	; (8000d20 <main+0x188>)
 8000cb2:	f001 fc03 	bl	80024bc <HAL_GPIO_WritePin>
						wavPlayer_pause();
 8000cb6:	f000 fc6b 	bl	8001590 <wavPlayer_pause>
						HAL_Delay(200);
 8000cba:	20c8      	movs	r0, #200	; 0xc8
 8000cbc:	f000 fd34 	bl	8001728 <HAL_Delay>
 8000cc0:	e014      	b.n	8000cec <main+0x154>
					}
					else{	//resume
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	4815      	ldr	r0, [pc, #84]	; (8000d20 <main+0x188>)
 8000cca:	f001 fbf7 	bl	80024bc <HAL_GPIO_WritePin>
						HAL_Delay(1000); //looking for hold
 8000cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd2:	f000 fd29 	bl	8001728 <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){ //still pressed?
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4815      	ldr	r0, [pc, #84]	; (8000d30 <main+0x198>)
 8000cda:	f001 fbd7 	bl	800248c <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <main+0x150>
							wavPlayer_stop(); //completely exit file
 8000ce4:	f000 fc48 	bl	8001578 <wavPlayer_stop>
						}
						//{	//why?
						wavPlayer_resume();
 8000ce8:	f000 fc58 	bl	800159c <wavPlayer_resume>
			while(!wavPlayer_isFinished()){	//infinite while there's file left
 8000cec:	f000 fc5c 	bl	80015a8 <wavPlayer_isFinished>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1c1      	bne.n	8000c80 <main+0xe8>
						//}

					}
				}
			}
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <main+0x188>)
 8000d04:	f001 fbda 	bl	80024bc <HAL_GPIO_WritePin>
			HAL_Delay(1000); //don't accidentally press again
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f000 fd0c 	bl	8001728 <HAL_Delay>
    MX_USB_HOST_Process();
 8000d10:	e770      	b.n	8000bf4 <main+0x5c>
 8000d12:	bf00      	nop
 8000d14:	20000104 	.word	0x20000104
 8000d18:	20000158 	.word	0x20000158
 8000d1c:	20001a90 	.word	0x20001a90
 8000d20:	40020c00 	.word	0x40020c00
 8000d24:	0800e510 	.word	0x0800e510
 8000d28:	20001450 	.word	0x20001450
 8000d2c:	20001454 	.word	0x20001454
 8000d30:	40020000 	.word	0x40020000
 8000d34:	0800e514 	.word	0x0800e514

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	; 0x50
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	2230      	movs	r2, #48	; 0x30
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f00d fad0 	bl	800e2ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <SystemClock_Config+0xcc>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <SystemClock_Config+0xcc>)
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <SystemClock_Config+0xcc>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <SystemClock_Config+0xd0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <SystemClock_Config+0xd0>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <SystemClock_Config+0xd0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da8:	2308      	movs	r3, #8
 8000daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db6:	2307      	movs	r3, #7
 8000db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 fc70 	bl	80066a4 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dca:	f000 f93b 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2105      	movs	r1, #5
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 fed1 	bl	8006b94 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000df8:	f000 f924 	bl	8001044 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3750      	adds	r7, #80	; 0x50
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e12:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <MX_I2C1_Init+0x54>)
 8000e14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e18:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_I2C1_Init+0x58>)
 8000e1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_I2C1_Init+0x50>)
 8000e4a:	f002 ff5b 	bl	8003d04 <HAL_I2C_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e54:	f000 f8f6 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000104 	.word	0x20000104
 8000e60:	40005400 	.word	0x40005400
 8000e64:	000186a0 	.word	0x000186a0

08000e68 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <MX_I2S3_Init+0x58>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e78:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e90:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e94:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_I2S3_Init+0x54>)
 8000eaa:	f004 fb5f 	bl	800556c <HAL_I2S_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000eb4:	f000 f8c6 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000158 	.word	0x20000158
 8000ec0:	40003c00 	.word	0x40003c00

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_DMA_Init+0x3c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2010      	movs	r0, #16
 8000eec:	f000 fd1b 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ef0:	2010      	movs	r0, #16
 8000ef2:	f000 fd34 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a43      	ldr	r2, [pc, #268]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a3c      	ldr	r2, [pc, #240]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a35      	ldr	r2, [pc, #212]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a2e      	ldr	r2, [pc, #184]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a27      	ldr	r2, [pc, #156]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <MX_GPIO_Init+0x12c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4822      	ldr	r0, [pc, #136]	; (8001034 <MX_GPIO_Init+0x130>)
 8000fac:	f001 fa86 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000fb6:	4820      	ldr	r0, [pc, #128]	; (8001038 <MX_GPIO_Init+0x134>)
 8000fb8:	f001 fa80 	bl	80024bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4818      	ldr	r0, [pc, #96]	; (8001034 <MX_GPIO_Init+0x130>)
 8000fd4:	f001 f8be 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fdc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_GPIO_Init+0x138>)
 8000fee:	f001 f8b1 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <MX_GPIO_Init+0x13c>)
 8001006:	f001 f8a5 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800100a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800100e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_GPIO_Init+0x134>)
 8001024:	f001 f896 	bl	8002154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	; 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_MspInit+0x4c>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x4c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x4c>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800108e:	2007      	movs	r0, #7
 8001090:	f000 fc3e 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_I2C_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12c      	bne.n	800111c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80010de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <HAL_I2C_MspInit+0x8c>)
 80010fc:	f001 f82a 	bl	8002154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_I2C_MspInit+0x88>)
 800110a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_I2C_MspInit+0x88>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005400 	.word	0x40005400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_I2S_MspInit+0x164>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f040 8095 	bne.w	800128c <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001162:	2301      	movs	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001166:	f240 130f 	movw	r3, #271	; 0x10f
 800116a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 800116c:	2306      	movs	r3, #6
 800116e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f005 ff19 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001180:	f7ff ff60 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	4b43      	ldr	r3, [pc, #268]	; (8001298 <HAL_I2S_MspInit+0x168>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_I2S_MspInit+0x168>)
 800118e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_I2S_MspInit+0x168>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_I2S_MspInit+0x168>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a3b      	ldr	r2, [pc, #236]	; (8001298 <HAL_I2S_MspInit+0x168>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <HAL_I2S_MspInit+0x168>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_I2S_MspInit+0x168>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_I2S_MspInit+0x168>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_I2S_MspInit+0x168>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011d8:	2310      	movs	r3, #16
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e8:	2306      	movs	r3, #6
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	482a      	ldr	r0, [pc, #168]	; (800129c <HAL_I2S_MspInit+0x16c>)
 80011f4:	f000 ffae 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80011f8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800120a:	2306      	movs	r3, #6
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	4822      	ldr	r0, [pc, #136]	; (80012a0 <HAL_I2S_MspInit+0x170>)
 8001216:	f000 ff9d 	bl	8002154 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <HAL_I2S_MspInit+0x178>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001238:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 800123c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001240:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001248:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 800124c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001250:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 800125a:	2204      	movs	r2, #4
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001260:	2203      	movs	r2, #3
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 800126c:	2200      	movs	r2, #0
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001272:	f000 fb8f 	bl	8001994 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 800127c:	f7ff fee2 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_I2S_MspInit+0x174>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3738      	adds	r7, #56	; 0x38
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003c00 	.word	0x40003c00
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020800 	.word	0x40020800
 80012a4:	200001a0 	.word	0x200001a0
 80012a8:	40026088 	.word	0x40026088

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f9f6 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA1_Stream5_IRQHandler+0x10>)
 8001306:	f000 fcbb 	bl	8001c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001a0 	.word	0x200001a0

08001314 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <OTG_FS_IRQHandler+0x10>)
 800131a:	f001 fb53 	bl	80029c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20001a94 	.word	0x20001a94

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f00c ff80 	bl	800e25c <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20020000 	.word	0x20020000
 8001388:	00002000 	.word	0x00002000
 800138c:	20000200 	.word	0x20000200
 8001390:	20001da8 	.word	0x20001da8

08001394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <wavPlayer_reset+0x1c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <wavPlayer_reset+0x20>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20001438 	.word	0x20001438
 80013d8:	20001440 	.word	0x20001440

080013dc <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 80013e8:	2201      	movs	r2, #1
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <wavPlayer_fileSelect+0x48>)
 80013ee:	f00b fdd3 	bl	800cf98 <f_open>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <wavPlayer_fileSelect+0x20>
  {
    return false;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e00e      	b.n	800141a <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	f107 010c 	add.w	r1, r7, #12
 8001404:	222c      	movs	r2, #44	; 0x2c
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <wavPlayer_fileSelect+0x48>)
 8001408:	f00b ff84 	bl	800d314 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <wavPlayer_fileSelect+0x4c>)
 8001410:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <wavPlayer_fileSelect+0x50>)
 8001416:	6013      	str	r3, [r2, #0]
  return true;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	3738      	adds	r7, #56	; 0x38
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000204 	.word	0x20000204
 8001428:	20000434 	.word	0x20000434
 800142c:	2000143c 	.word	0x2000143c

08001430 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  isFinished = false;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <wavPlayer_play+0x48>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <wavPlayer_play+0x4c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fb2e 	bl	8000aa0 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8001444:	2100      	movs	r1, #0
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <wavPlayer_play+0x50>)
 8001448:	f00c f94b 	bl	800d6e2 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <wavPlayer_play+0x54>)
 800144e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <wavPlayer_play+0x58>)
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <wavPlayer_play+0x50>)
 8001456:	f00b ff5d 	bl	800d314 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <wavPlayer_play+0x5c>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <wavPlayer_play+0x54>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <wavPlayer_play+0x60>)
 8001466:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8001468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <wavPlayer_play+0x58>)
 800146e:	f7ff fb27 	bl	8000ac0 <audioI2S_play>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20001444 	.word	0x20001444
 800147c:	2000143c 	.word	0x2000143c
 8001480:	20000204 	.word	0x20000204
 8001484:	20001440 	.word	0x20001440
 8001488:	20000438 	.word	0x20000438
 800148c:	20000434 	.word	0x20000434
 8001490:	20001438 	.word	0x20001438

08001494 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <wavPlayer_process+0xc8>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d859      	bhi.n	8001556 <wavPlayer_process+0xc2>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <wavPlayer_process+0x14>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	08001555 	.word	0x08001555
 80014ac:	080014b9 	.word	0x080014b9
 80014b0:	080014fb 	.word	0x080014fb
 80014b4:	0800153d 	.word	0x0800153d
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <wavPlayer_process+0xcc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <wavPlayer_process+0xc8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <wavPlayer_process+0xcc>)
 80014c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ca:	4926      	ldr	r1, [pc, #152]	; (8001564 <wavPlayer_process+0xd0>)
 80014cc:	4826      	ldr	r0, [pc, #152]	; (8001568 <wavPlayer_process+0xd4>)
 80014ce:	f00b ff21 	bl	800d314 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <wavPlayer_process+0xd8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014da:	d907      	bls.n	80014ec <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <wavPlayer_process+0xd8>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <wavPlayer_process+0xcc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	4a21      	ldr	r2, [pc, #132]	; (800156c <wavPlayer_process+0xd8>)
 80014e8:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80014ea:	e034      	b.n	8001556 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <wavPlayer_process+0xd8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <wavPlayer_process+0xc8>)
 80014f4:	2203      	movs	r2, #3
 80014f6:	701a      	strb	r2, [r3, #0]
    break;
 80014f8:	e02d      	b.n	8001556 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <wavPlayer_process+0xcc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <wavPlayer_process+0xc8>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <wavPlayer_process+0xcc>)
 8001508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150c:	4918      	ldr	r1, [pc, #96]	; (8001570 <wavPlayer_process+0xdc>)
 800150e:	4816      	ldr	r0, [pc, #88]	; (8001568 <wavPlayer_process+0xd4>)
 8001510:	f00b ff00 	bl	800d314 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <wavPlayer_process+0xd8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800151c:	d907      	bls.n	800152e <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <wavPlayer_process+0xd8>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <wavPlayer_process+0xcc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <wavPlayer_process+0xd8>)
 800152a:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 800152c:	e013      	b.n	8001556 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <wavPlayer_process+0xd8>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <wavPlayer_process+0xc8>)
 8001536:	2203      	movs	r2, #3
 8001538:	701a      	strb	r2, [r3, #0]
    break;
 800153a:	e00c      	b.n	8001556 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <wavPlayer_process+0xd4>)
 800153e:	f00c f8a6 	bl	800d68e <f_close>
    wavPlayer_reset();
 8001542:	f7ff ff39 	bl	80013b8 <wavPlayer_reset>
    isFinished = true;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <wavPlayer_process+0xe0>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <wavPlayer_process+0xc8>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
    break;
 8001552:	e000      	b.n	8001556 <wavPlayer_process+0xc2>
    break;
 8001554:	bf00      	nop
  }
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20001445 	.word	0x20001445
 8001560:	20001440 	.word	0x20001440
 8001564:	20000438 	.word	0x20000438
 8001568:	20000204 	.word	0x20000204
 800156c:	20001438 	.word	0x20001438
 8001570:	20000c38 	.word	0x20000c38
 8001574:	20001444 	.word	0x20001444

08001578 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  audioI2S_stop();
 800157c:	f7ff fada 	bl	8000b34 <audioI2S_stop>
  isFinished = true;
 8001580:	4b02      	ldr	r3, [pc, #8]	; (800158c <wavPlayer_stop+0x14>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20001444 	.word	0x20001444

08001590 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8001594:	f7ff fab2 	bl	8000afc <audioI2S_pause>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  audioI2S_resume();
 80015a0:	f7ff faba 	bl	8000b18 <audioI2S_resume>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return isFinished;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <wavPlayer_isFinished+0x14>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20001444 	.word	0x20001444

080015c0 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <audioI2S_halfTransfer_Callback+0x14>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	20001445 	.word	0x20001445

080015d8 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <audioI2S_fullTransfer_Callback+0x14>)
 80015de:	2202      	movs	r2, #2
 80015e0:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20001445 	.word	0x20001445

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <LoopFillZerobss+0x26>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161a:	f7ff febb 	bl	8001394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f00c fe23 	bl	800e268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff fab9 	bl	8000b98 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001634:	0800e6a4 	.word	0x0800e6a4
  ldr r2, =_sbss
 8001638:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800163c:	20001da8 	.word	0x20001da8

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_Init+0x40>)
 800164e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_Init+0x40>)
 800165a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x40>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f94f 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff fcea 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023c00 	.word	0x40023c00

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f967 	bl	800197a <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f92f 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	20001448 	.word	0x20001448

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20001448 	.word	0x20001448

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff feb6 	bl	8001710 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e099      	b.n	8001ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d0:	e00f      	b.n	80019f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d2:	f7ff fe9d 	bl	8001710 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d908      	bls.n	80019f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e078      	b.n	8001ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e8      	bne.n	80019d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_DMA_Init+0x158>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d107      	bne.n	8001a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4313      	orrs	r3, r2
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f023 0307 	bic.w	r3, r3, #7
 8001a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d117      	bne.n	8001ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fadf 	bl	800205c <DMA_CheckFifoParam>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e016      	b.n	8001ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa96 	bl	8001ff0 <DMA_CalcBaseAndBitshift>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	223f      	movs	r2, #63	; 0x3f
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	f010803f 	.word	0xf010803f

08001af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA_Start_IT+0x26>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e040      	b.n	8001b98 <HAL_DMA_Start_IT+0xa8>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d12f      	bne.n	8001b8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 fa28 	bl	8001f94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0216 	orr.w	r2, r2, #22
 8001b5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0208 	orr.w	r2, r2, #8
 8001b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e005      	b.n	8001b96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b92:	2302      	movs	r3, #2
 8001b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bae:	f7ff fdaf 	bl	8001710 <HAL_GetTick>
 8001bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d008      	beq.n	8001bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e052      	b.n	8001c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0216 	bic.w	r2, r2, #22
 8001be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_DMA_Abort+0x62>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0208 	bic.w	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0201 	bic.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c22:	e013      	b.n	8001c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c24:	f7ff fd74 	bl	8001710 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d90c      	bls.n	8001c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2220      	movs	r2, #32
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e015      	b.n	8001c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e4      	bne.n	8001c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	223f      	movs	r2, #63	; 0x3f
 8001c60:	409a      	lsls	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c8c:	4b8e      	ldr	r3, [pc, #568]	; (8001ec8 <HAL_DMA_IRQHandler+0x248>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a8e      	ldr	r2, [pc, #568]	; (8001ecc <HAL_DMA_IRQHandler+0x24c>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0a9b      	lsrs	r3, r3, #10
 8001c98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2208      	movs	r2, #8
 8001cac:	409a      	lsls	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01a      	beq.n	8001cec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0204 	bic.w	r2, r2, #4
 8001cd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	2208      	movs	r2, #8
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d012      	beq.n	8001d22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2201      	movs	r2, #1
 8001d10:	409a      	lsls	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	f043 0202 	orr.w	r2, r3, #2
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2204      	movs	r2, #4
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	2204      	movs	r2, #4
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d043      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03c      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d018      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d108      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d024      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
 8001dae:	e01f      	b.n	8001df0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01b      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e016      	b.n	8001df0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0208 	bic.w	r2, r2, #8
 8001dde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2220      	movs	r2, #32
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 808f 	beq.w	8001f20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 8087 	beq.w	8001f20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2220      	movs	r2, #32
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d136      	bne.n	8001e98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0216 	bic.w	r2, r2, #22
 8001e38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <HAL_DMA_IRQHandler+0x1da>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0208 	bic.w	r2, r2, #8
 8001e68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	223f      	movs	r2, #63	; 0x3f
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d07e      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
        }
        return;
 8001e96:	e079      	b.n	8001f8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10d      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d031      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	e02c      	b.n	8001f20 <HAL_DMA_IRQHandler+0x2a0>
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e01e      	b.n	8001f20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10f      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0210 	bic.w	r2, r2, #16
 8001efe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d032      	beq.n	8001f8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d022      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2205      	movs	r2, #5
 8001f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d307      	bcc.n	8001f68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f2      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x2cc>
 8001f66:	e000      	b.n	8001f6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
 8001f8a:	e000      	b.n	8001f8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f8c:	bf00      	nop
    }
  }
}
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d108      	bne.n	8001fd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fd2:	e007      	b.n	8001fe4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	60da      	str	r2, [r3, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3b10      	subs	r3, #16
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <DMA_CalcBaseAndBitshift+0x64>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <DMA_CalcBaseAndBitshift+0x68>)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d909      	bls.n	8002032 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	1d1a      	adds	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	659a      	str	r2, [r3, #88]	; 0x58
 8002030:	e007      	b.n	8002042 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	aaaaaaab 	.word	0xaaaaaaab
 8002058:	0800e5f8 	.word	0x0800e5f8

0800205c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d11f      	bne.n	80020b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d856      	bhi.n	800212a <DMA_CheckFifoParam+0xce>
 800207c:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <DMA_CheckFifoParam+0x28>)
 800207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002082:	bf00      	nop
 8002084:	08002095 	.word	0x08002095
 8002088:	080020a7 	.word	0x080020a7
 800208c:	08002095 	.word	0x08002095
 8002090:	0800212b 	.word	0x0800212b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d046      	beq.n	800212e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a4:	e043      	b.n	800212e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ae:	d140      	bne.n	8002132 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b4:	e03d      	b.n	8002132 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020be:	d121      	bne.n	8002104 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d837      	bhi.n	8002136 <DMA_CheckFifoParam+0xda>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <DMA_CheckFifoParam+0x70>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020e3 	.word	0x080020e3
 80020d4:	080020dd 	.word	0x080020dd
 80020d8:	080020f5 	.word	0x080020f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
      break;
 80020e0:	e030      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d025      	beq.n	800213a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f2:	e022      	b.n	800213a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020fc:	d11f      	bne.n	800213e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002102:	e01c      	b.n	800213e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d903      	bls.n	8002112 <DMA_CheckFifoParam+0xb6>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d003      	beq.n	8002118 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002110:	e018      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      break;
 8002116:	e015      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00e      	beq.n	8002142 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      break;
 8002128:	e00b      	b.n	8002142 <DMA_CheckFifoParam+0xe6>
      break;
 800212a:	bf00      	nop
 800212c:	e00a      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e008      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e006      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e004      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
 800213c:	e002      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      break;   
 800213e:	bf00      	nop
 8002140:	e000      	b.n	8002144 <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
    }
  } 
  
  return status; 
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop

08002154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e16b      	b.n	8002448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	f040 815a 	bne.w	8002442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d005      	beq.n	80021a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d130      	bne.n	8002208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0201 	and.w	r2, r3, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b03      	cmp	r3, #3
 8002212:	d017      	beq.n	8002244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d123      	bne.n	8002298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	08da      	lsrs	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80b4 	beq.w	8002442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b60      	ldr	r3, [pc, #384]	; (8002460 <HAL_GPIO_Init+0x30c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a5f      	ldr	r2, [pc, #380]	; (8002460 <HAL_GPIO_Init+0x30c>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b5d      	ldr	r3, [pc, #372]	; (8002460 <HAL_GPIO_Init+0x30c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f6:	4a5b      	ldr	r2, [pc, #364]	; (8002464 <HAL_GPIO_Init+0x310>)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_GPIO_Init+0x314>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d02b      	beq.n	800237a <HAL_GPIO_Init+0x226>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a51      	ldr	r2, [pc, #324]	; (800246c <HAL_GPIO_Init+0x318>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d025      	beq.n	8002376 <HAL_GPIO_Init+0x222>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a50      	ldr	r2, [pc, #320]	; (8002470 <HAL_GPIO_Init+0x31c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01f      	beq.n	8002372 <HAL_GPIO_Init+0x21e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4f      	ldr	r2, [pc, #316]	; (8002474 <HAL_GPIO_Init+0x320>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x21a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4e      	ldr	r2, [pc, #312]	; (8002478 <HAL_GPIO_Init+0x324>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x216>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4d      	ldr	r2, [pc, #308]	; (800247c <HAL_GPIO_Init+0x328>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x212>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <HAL_GPIO_Init+0x32c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x20e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <HAL_GPIO_Init+0x330>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x20a>
 800235a:	2307      	movs	r3, #7
 800235c:	e00e      	b.n	800237c <HAL_GPIO_Init+0x228>
 800235e:	2308      	movs	r3, #8
 8002360:	e00c      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002362:	2306      	movs	r3, #6
 8002364:	e00a      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002366:	2305      	movs	r3, #5
 8002368:	e008      	b.n	800237c <HAL_GPIO_Init+0x228>
 800236a:	2304      	movs	r3, #4
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x228>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x228>
 800237a:	2300      	movs	r3, #0
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4093      	lsls	r3, r2
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800238c:	4935      	ldr	r1, [pc, #212]	; (8002464 <HAL_GPIO_Init+0x310>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239a:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_GPIO_Init+0x334>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023be:	4a32      	ldr	r2, [pc, #200]	; (8002488 <HAL_GPIO_Init+0x334>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c4:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_GPIO_Init+0x334>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e8:	4a27      	ldr	r2, [pc, #156]	; (8002488 <HAL_GPIO_Init+0x334>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <HAL_GPIO_Init+0x334>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_GPIO_Init+0x334>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_GPIO_Init+0x334>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_GPIO_Init+0x334>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f67f ae90 	bls.w	8002170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40013800 	.word	0x40013800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020800 	.word	0x40020800
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40021000 	.word	0x40021000
 800247c:	40021400 	.word	0x40021400
 8002480:	40021800 	.word	0x40021800
 8002484:	40021c00 	.word	0x40021c00
 8002488:	40013c00 	.word	0x40013c00

0800248c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f0:	b08f      	sub	sp, #60	; 0x3c
 80024f2:	af0a      	add	r7, sp, #40	; 0x28
 80024f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e054      	b.n	80025aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f00b fba4 	bl	800dc68 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2203      	movs	r2, #3
 8002524:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f004 ff12 	bl	8007368 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	687e      	ldr	r6, [r7, #4]
 800254c:	466d      	mov	r5, sp
 800254e:	f106 0410 	add.w	r4, r6, #16
 8002552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800255e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002562:	1d33      	adds	r3, r6, #4
 8002564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	f004 fe8c 	bl	8007284 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f004 ff09 	bl	800738a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	687e      	ldr	r6, [r7, #4]
 8002580:	466d      	mov	r5, sp
 8002582:	f106 0410 	add.w	r4, r6, #16
 8002586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002592:	e885 0003 	stmia.w	r5, {r0, r1}
 8002596:	1d33      	adds	r3, r6, #4
 8002598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259a:	6838      	ldr	r0, [r7, #0]
 800259c:	f005 f892 	bl	80076c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80025b2:	b590      	push	{r4, r7, lr}
 80025b4:	b089      	sub	sp, #36	; 0x24
 80025b6:	af04      	add	r7, sp, #16
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	4608      	mov	r0, r1
 80025bc:	4611      	mov	r1, r2
 80025be:	461a      	mov	r2, r3
 80025c0:	4603      	mov	r3, r0
 80025c2:	70fb      	strb	r3, [r7, #3]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70bb      	strb	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_HCD_HC_Init+0x28>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e076      	b.n	80026c8 <HAL_HCD_HC_Init+0x116>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	333d      	adds	r3, #61	; 0x3d
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3338      	adds	r3, #56	; 0x38
 8002602:	787a      	ldrb	r2, [r7, #1]
 8002604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3340      	adds	r3, #64	; 0x40
 8002614:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002616:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3339      	adds	r3, #57	; 0x39
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	333f      	adds	r3, #63	; 0x3f
 8002638:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800263c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	78ba      	ldrb	r2, [r7, #2]
 8002642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002646:	b2d0      	uxtb	r0, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	333a      	adds	r3, #58	; 0x3a
 8002654:	4602      	mov	r2, r0
 8002656:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002658:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da09      	bge.n	8002674 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	333b      	adds	r3, #59	; 0x3b
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e008      	b.n	8002686 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	333b      	adds	r3, #59	; 0x3b
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	333c      	adds	r3, #60	; 0x3c
 8002694:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002698:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	787c      	ldrb	r4, [r7, #1]
 80026a0:	78ba      	ldrb	r2, [r7, #2]
 80026a2:	78f9      	ldrb	r1, [r7, #3]
 80026a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026a6:	9302      	str	r3, [sp, #8]
 80026a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4623      	mov	r3, r4
 80026b6:	f005 f98b 	bl	80079d0 <USB_HC_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}

080026d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_HCD_HC_Halt+0x1e>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e00f      	b.n	800270e <HAL_HCD_HC_Halt+0x3e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f005 fbdb 	bl	8007eba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	70fb      	strb	r3, [r7, #3]
 800272a:	460b      	mov	r3, r1
 800272c:	70bb      	strb	r3, [r7, #2]
 800272e:	4613      	mov	r3, r2
 8002730:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	333b      	adds	r3, #59	; 0x3b
 8002740:	78ba      	ldrb	r2, [r7, #2]
 8002742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	333f      	adds	r3, #63	; 0x3f
 8002752:	787a      	ldrb	r2, [r7, #1]
 8002754:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002756:	7c3b      	ldrb	r3, [r7, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d112      	bne.n	8002782 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	212c      	movs	r1, #44	; 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	3342      	adds	r3, #66	; 0x42
 800276a:	2203      	movs	r2, #3
 800276c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	333d      	adds	r3, #61	; 0x3d
 800277c:	7f3a      	ldrb	r2, [r7, #28]
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e008      	b.n	8002794 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3342      	adds	r3, #66	; 0x42
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b03      	cmp	r3, #3
 8002798:	f200 80c6 	bhi.w	8002928 <HAL_HCD_HC_SubmitRequest+0x210>
 800279c:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a2:	bf00      	nop
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	08002915 	.word	0x08002915
 80027ac:	08002819 	.word	0x08002819
 80027b0:	08002897 	.word	0x08002897
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027b4:	7c3b      	ldrb	r3, [r7, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f040 80b8 	bne.w	800292c <HAL_HCD_HC_SubmitRequest+0x214>
 80027bc:	78bb      	ldrb	r3, [r7, #2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80b4 	bne.w	800292c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80027c4:	8b3b      	ldrh	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3355      	adds	r3, #85	; 0x55
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3355      	adds	r3, #85	; 0x55
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3342      	adds	r3, #66	; 0x42
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002802:	e093      	b.n	800292c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3342      	adds	r3, #66	; 0x42
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
      break;
 8002816:	e089      	b.n	800292c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002818:	78bb      	ldrb	r3, [r7, #2]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11d      	bne.n	800285a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3355      	adds	r3, #85	; 0x55
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3342      	adds	r3, #66	; 0x42
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002844:	e073      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3342      	adds	r3, #66	; 0x42
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      break;
 8002858:	e069      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3354      	adds	r3, #84	; 0x54
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3342      	adds	r3, #66	; 0x42
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
      break;
 8002880:	e055      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3342      	adds	r3, #66	; 0x42
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
      break;
 8002894:	e04b      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002896:	78bb      	ldrb	r3, [r7, #2]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d11d      	bne.n	80028d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3355      	adds	r3, #85	; 0x55
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3342      	adds	r3, #66	; 0x42
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028c2:	e034      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3342      	adds	r3, #66	; 0x42
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
      break;
 80028d6:	e02a      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3354      	adds	r3, #84	; 0x54
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3342      	adds	r3, #66	; 0x42
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
      break;
 80028fe:	e016      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3342      	adds	r3, #66	; 0x42
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
      break;
 8002912:	e00c      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3342      	adds	r3, #66	; 0x42
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
      break;
 8002926:	e002      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800292c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	8b3a      	ldrh	r2, [r7, #24]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	202c      	movs	r0, #44	; 0x2c
 8002948:	fb00 f303 	mul.w	r3, r0, r3
 800294c:	440b      	add	r3, r1
 800294e:	334c      	adds	r3, #76	; 0x4c
 8002950:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3350      	adds	r3, #80	; 0x50
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3339      	adds	r3, #57	; 0x39
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3361      	adds	r3, #97	; 0x61
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	222c      	movs	r2, #44	; 0x2c
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	3338      	adds	r3, #56	; 0x38
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	18d1      	adds	r1, r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	f005 f92e 	bl	8007c14 <USB_HC_StartXfer>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop

080029c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fe2f 	bl	800763e <USB_GetMode>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 80f6 	bne.w	8002bd4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 fe13 	bl	8007618 <USB_ReadInterrupts>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80ec 	beq.w	8002bd2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 fe0a 	bl	8007618 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a0e:	d104      	bne.n	8002a1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f004 fdfa 	bl	8007618 <USB_ReadInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2e:	d104      	bne.n	8002a3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 fdea 	bl	8007618 <USB_ReadInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a4e:	d104      	bne.n	8002a5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fdda 	bl	8007618 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d103      	bne.n	8002a76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2202      	movs	r2, #2
 8002a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fdcc 	bl	8007618 <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8a:	d11c      	bne.n	8002ac6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	f004 fcbb 	bl	8007424 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002aae:	6938      	ldr	r0, [r7, #16]
 8002ab0:	f004 fcec 	bl	800748c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fec2 	bl	8007844 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f00b f94f 	bl	800dd64 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fda4 	bl	8007618 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ada:	d102      	bne.n	8002ae2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f001 f89e 	bl	8003c1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fd96 	bl	8007618 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d106      	bne.n	8002b04 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f00b f918 	bl	800dd2c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2208      	movs	r2, #8
 8002b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 fd85 	bl	8007618 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d101      	bne.n	8002b1c <HAL_HCD_IRQHandler+0x158>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_HCD_IRQHandler+0x15a>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d012      	beq.n	8002b48 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0210 	bic.w	r2, r2, #16
 8002b30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 ffa1 	bl	8003a7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0210 	orr.w	r2, r2, #16
 8002b46:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fd63 	bl	8007618 <USB_ReadInterrupts>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b5c:	d13a      	bne.n	8002bd4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 f998 	bl	8007e98 <USB_HC_ReadInterrupt>
 8002b68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e025      	b.n	8002bbc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d018      	beq.n	8002bb6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9a:	d106      	bne.n	8002baa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8ab 	bl	8002cfe <HCD_HC_IN_IRQHandler>
 8002ba8:	e005      	b.n	8002bb6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fbf9 	bl	80033a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3d4      	bcc.n	8002b70 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	e000      	b.n	8002bd4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002bd2:	bf00      	nop
    }
  }
}
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_HCD_Start+0x16>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e013      	b.n	8002c18 <HAL_HCD_Start+0x3e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 fe84 	bl	800790c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 fb9c 	bl	8007346 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_HCD_Stop+0x16>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e00d      	b.n	8002c52 <HAL_HCD_Stop+0x32>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f005 fa72 	bl	800812c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fe26 	bl	80078b8 <USB_ResetPort>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3360      	adds	r3, #96	; 0x60
 8002c90:	781b      	ldrb	r3, [r3, #0]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3350      	adds	r3, #80	; 0x50
 8002cb8:	681b      	ldr	r3, [r3, #0]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fe6a 	bl	80079ac <USB_GetCurrentFrame>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 fe45 	bl	800797e <USB_GetHostSpeed>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d11a      	bne.n	8002d64 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3361      	adds	r3, #97	; 0x61
 8002d4e:	2206      	movs	r2, #6
 8002d50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f005 f8ac 	bl	8007eba <USB_HC_Halt>
 8002d62:	e0af      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d11b      	bne.n	8002db4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3361      	adds	r3, #97	; 0x61
 8002d9e:	2207      	movs	r2, #7
 8002da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f005 f884 	bl	8007eba <USB_HC_Halt>
 8002db2:	e087      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d109      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2320      	movs	r3, #32
 8002dda:	6093      	str	r3, [r2, #8]
 8002ddc:	e072      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d11a      	bne.n	8002e2a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	461a      	mov	r2, r3
 8002e02:	2308      	movs	r3, #8
 8002e04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3361      	adds	r3, #97	; 0x61
 8002e14:	2205      	movs	r2, #5
 8002e16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 f849 	bl	8007eba <USB_HC_Halt>
 8002e28:	e04c      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d11b      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3361      	adds	r3, #97	; 0x61
 8002e64:	2208      	movs	r2, #8
 8002e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f005 f821 	bl	8007eba <USB_HC_Halt>
 8002e78:	e024      	b.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d119      	bne.n	8002ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3361      	adds	r3, #97	; 0x61
 8002eb0:	2206      	movs	r2, #6
 8002eb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f004 fffb 	bl	8007eba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eda:	d112      	bne.n	8002f02 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 ffe7 	bl	8007eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f00:	e24e      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	f040 80df 	bne.w	80030d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3348      	adds	r3, #72	; 0x48
 8002f30:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0159      	lsls	r1, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f44:	1ad2      	subs	r2, r2, r3
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	202c      	movs	r0, #44	; 0x2c
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	440b      	add	r3, r1
 8002f52:	3350      	adds	r3, #80	; 0x50
 8002f54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3361      	adds	r3, #97	; 0x61
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	2301      	movs	r3, #1
 8002f8a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	333f      	adds	r3, #63	; 0x3f
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	333f      	adds	r3, #63	; 0x3f
 8002fae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d111      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 ff7b 	bl	8007eba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2310      	movs	r3, #16
 8002fd4:	6093      	str	r3, [r2, #8]
 8002fd6:	e03a      	b.n	800304e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	333f      	adds	r3, #63	; 0x3f
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d009      	beq.n	8003000 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	333f      	adds	r3, #63	; 0x3f
 8002ffa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d126      	bne.n	800304e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800301e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3360      	adds	r3, #96	; 0x60
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	b2d9      	uxtb	r1, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	202c      	movs	r0, #44	; 0x2c
 800303c:	fb00 f303 	mul.w	r3, r0, r3
 8003040:	4413      	add	r3, r2
 8003042:	3360      	adds	r3, #96	; 0x60
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f00a fe99 	bl	800dd80 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d12b      	bne.n	80030ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3348      	adds	r3, #72	; 0x48
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	202c      	movs	r0, #44	; 0x2c
 800306c:	fb00 f202 	mul.w	r2, r0, r2
 8003070:	440a      	add	r2, r1
 8003072:	3240      	adds	r2, #64	; 0x40
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	fbb3 f3f2 	udiv	r3, r3, r2
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 818e 	beq.w	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3354      	adds	r3, #84	; 0x54
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	f083 0301 	eor.w	r3, r3, #1
 8003098:	b2d8      	uxtb	r0, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3354      	adds	r3, #84	; 0x54
 80030a8:	4602      	mov	r2, r0
 80030aa:	701a      	strb	r2, [r3, #0]
}
 80030ac:	e178      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3354      	adds	r3, #84	; 0x54
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	f083 0301 	eor.w	r3, r3, #1
 80030c2:	b2d8      	uxtb	r0, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3354      	adds	r3, #84	; 0x54
 80030d2:	4602      	mov	r2, r0
 80030d4:	701a      	strb	r2, [r3, #0]
}
 80030d6:	e163      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 80f6 	bne.w	80032dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3361      	adds	r3, #97	; 0x61
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d109      	bne.n	8003118 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3360      	adds	r3, #96	; 0x60
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e0c9      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3361      	adds	r3, #97	; 0x61
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b05      	cmp	r3, #5
 800312a:	d109      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3360      	adds	r3, #96	; 0x60
 800313a:	2205      	movs	r2, #5
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e0b5      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b06      	cmp	r3, #6
 8003152:	d009      	beq.n	8003168 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3361      	adds	r3, #97	; 0x61
 8003162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003164:	2b08      	cmp	r3, #8
 8003166:	d150      	bne.n	800320a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	335c      	adds	r3, #92	; 0x5c
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	202c      	movs	r0, #44	; 0x2c
 8003180:	fb00 f303 	mul.w	r3, r0, r3
 8003184:	440b      	add	r3, r1
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d912      	bls.n	80031c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	335c      	adds	r3, #92	; 0x5c
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3360      	adds	r3, #96	; 0x60
 80031be:	2204      	movs	r2, #4
 80031c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031c2:	e073      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3360      	adds	r3, #96	; 0x60
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003208:	e050      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3361      	adds	r3, #97	; 0x61
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d122      	bne.n	8003264 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	3360      	adds	r3, #96	; 0x60
 800322c:	2202      	movs	r2, #2
 800322e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003246:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800324e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e023      	b.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3361      	adds	r3, #97	; 0x61
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b07      	cmp	r3, #7
 8003276:	d119      	bne.n	80032ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	335c      	adds	r3, #92	; 0x5c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	202c      	movs	r0, #44	; 0x2c
 8003290:	fb00 f303 	mul.w	r3, r0, r3
 8003294:	440b      	add	r3, r1
 8003296:	335c      	adds	r3, #92	; 0x5c
 8003298:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3360      	adds	r3, #96	; 0x60
 80032a8:	2204      	movs	r2, #4
 80032aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	461a      	mov	r2, r3
 80032ba:	2302      	movs	r3, #2
 80032bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	b2d9      	uxtb	r1, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	202c      	movs	r0, #44	; 0x2c
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f00a fd53 	bl	800dd80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032da:	e061      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d156      	bne.n	80033a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	333f      	adds	r3, #63	; 0x3f
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d111      	bne.n	800332a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fdc9 	bl	8007eba <USB_HC_Halt>
 8003328:	e031      	b.n	800338e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	333f      	adds	r3, #63	; 0x3f
 800334c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800334e:	2b02      	cmp	r3, #2
 8003350:	d11d      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	335c      	adds	r3, #92	; 0x5c
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d110      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3361      	adds	r3, #97	; 0x61
 800337a:	2203      	movs	r2, #3
 800337c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f004 fd96 	bl	8007eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	2310      	movs	r3, #16
 800339e:	6093      	str	r3, [r2, #8]
}
 80033a0:	bf00      	nop
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11a      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2304      	movs	r3, #4
 80033e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3361      	adds	r3, #97	; 0x61
 80033f8:	2206      	movs	r2, #6
 80033fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f004 fd57 	bl	8007eba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800340c:	e331      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b20      	cmp	r3, #32
 8003422:	d12e      	bne.n	8003482 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	2320      	movs	r3, #32
 8003434:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	333d      	adds	r3, #61	; 0x3d
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b01      	cmp	r3, #1
 8003448:	f040 8313 	bne.w	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	333d      	adds	r3, #61	; 0x3d
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	3360      	adds	r3, #96	; 0x60
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	4611      	mov	r1, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fd1d 	bl	8007eba <USB_HC_Halt>
}
 8003480:	e2f7      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d112      	bne.n	80034c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	461a      	mov	r2, r3
 80034a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f004 fcfe 	bl	8007eba <USB_HC_Halt>
}
 80034be:	e2d8      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d140      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d111      	bne.n	8003522 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	333d      	adds	r3, #61	; 0x3d
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	461a      	mov	r2, r3
 800351e:	2340      	movs	r3, #64	; 0x40
 8003520:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	2301      	movs	r3, #1
 8003532:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3361      	adds	r3, #97	; 0x61
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f004 fcb2 	bl	8007eba <USB_HC_Halt>
}
 8003556:	e28c      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d12c      	bne.n	80035c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3361      	adds	r3, #97	; 0x61
 800357c:	2204      	movs	r2, #4
 800357e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	333d      	adds	r3, #61	; 0x3d
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	335c      	adds	r3, #92	; 0x5c
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 fc83 	bl	8007eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	461a      	mov	r2, r3
 80035c2:	2340      	movs	r3, #64	; 0x40
 80035c4:	6093      	str	r3, [r2, #8]
}
 80035c6:	e254      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11a      	bne.n	8003614 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	461a      	mov	r2, r3
 80035ec:	2308      	movs	r3, #8
 80035ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3361      	adds	r3, #97	; 0x61
 80035fe:	2205      	movs	r2, #5
 8003600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f004 fc54 	bl	8007eba <USB_HC_Halt>
}
 8003612:	e22e      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d140      	bne.n	80036ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	335c      	adds	r3, #92	; 0x5c
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3361      	adds	r3, #97	; 0x61
 800364a:	2203      	movs	r2, #3
 800364c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	333d      	adds	r3, #61	; 0x3d
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d112      	bne.n	8003688 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	333c      	adds	r3, #60	; 0x3c
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	333d      	adds	r3, #61	; 0x3d
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fc11 	bl	8007eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a4:	461a      	mov	r2, r3
 80036a6:	2310      	movs	r3, #16
 80036a8:	6093      	str	r3, [r2, #8]
}
 80036aa:	e1e2      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d164      	bne.n	800378c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d111      	bne.n	80036ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3361      	adds	r3, #97	; 0x61
 80036d8:	2206      	movs	r2, #6
 80036da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fbe7 	bl	8007eba <USB_HC_Halt>
 80036ec:	e044      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	335c      	adds	r3, #92	; 0x5c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	202c      	movs	r0, #44	; 0x2c
 8003706:	fb00 f303 	mul.w	r3, r0, r3
 800370a:	440b      	add	r3, r1
 800370c:	335c      	adds	r3, #92	; 0x5c
 800370e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	335c      	adds	r3, #92	; 0x5c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d920      	bls.n	8003766 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	335c      	adds	r3, #92	; 0x5c
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3360      	adds	r3, #96	; 0x60
 8003744:	2204      	movs	r2, #4
 8003746:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	b2d9      	uxtb	r1, r3
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	202c      	movs	r0, #44	; 0x2c
 8003752:	fb00 f303 	mul.w	r3, r0, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	; 0x60
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f00a fb0e 	bl	800dd80 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003764:	e008      	b.n	8003778 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3360      	adds	r3, #96	; 0x60
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	6093      	str	r3, [r2, #8]
}
 800378a:	e172      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d11b      	bne.n	80037dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3361      	adds	r3, #97	; 0x61
 80037b2:	2208      	movs	r2, #8
 80037b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 fb7a 	bl	8007eba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d8:	6093      	str	r3, [r2, #8]
}
 80037da:	e14a      	b.n	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	f040 813f 	bne.w	8003a72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3361      	adds	r3, #97	; 0x61
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d17d      	bne.n	8003904 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3360      	adds	r3, #96	; 0x60
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	333f      	adds	r3, #63	; 0x3f
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d00a      	beq.n	8003844 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	333f      	adds	r3, #63	; 0x3f
 800383c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800383e:	2b03      	cmp	r3, #3
 8003840:	f040 8100 	bne.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d113      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3355      	adds	r3, #85	; 0x55
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	f083 0301 	eor.w	r3, r3, #1
 8003860:	b2d8      	uxtb	r0, r3
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	3355      	adds	r3, #85	; 0x55
 8003870:	4602      	mov	r2, r0
 8003872:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 80e3 	bne.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	334c      	adds	r3, #76	; 0x4c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80d8 	beq.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	334c      	adds	r3, #76	; 0x4c
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	202c      	movs	r0, #44	; 0x2c
 80038aa:	fb00 f202 	mul.w	r2, r0, r2
 80038ae:	440a      	add	r2, r1
 80038b0:	3240      	adds	r2, #64	; 0x40
 80038b2:	8812      	ldrh	r2, [r2, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	3b01      	subs	r3, #1
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	202c      	movs	r0, #44	; 0x2c
 80038be:	fb00 f202 	mul.w	r2, r0, r2
 80038c2:	440a      	add	r2, r1
 80038c4:	3240      	adds	r2, #64	; 0x40
 80038c6:	8812      	ldrh	r2, [r2, #0]
 80038c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80b5 	beq.w	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3355      	adds	r3, #85	; 0x55
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f083 0301 	eor.w	r3, r3, #1
 80038ee:	b2d8      	uxtb	r0, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3355      	adds	r3, #85	; 0x55
 80038fe:	4602      	mov	r2, r0
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e09f      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3361      	adds	r3, #97	; 0x61
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d109      	bne.n	800392c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3360      	adds	r3, #96	; 0x60
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e08b      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3361      	adds	r3, #97	; 0x61
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d109      	bne.n	8003954 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3360      	adds	r3, #96	; 0x60
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e077      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3361      	adds	r3, #97	; 0x61
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d109      	bne.n	800397c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3360      	adds	r3, #96	; 0x60
 8003976:	2205      	movs	r2, #5
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e063      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	3361      	adds	r3, #97	; 0x61
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b06      	cmp	r3, #6
 800398e:	d009      	beq.n	80039a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3361      	adds	r3, #97	; 0x61
 800399e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d14f      	bne.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	335c      	adds	r3, #92	; 0x5c
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	202c      	movs	r0, #44	; 0x2c
 80039bc:	fb00 f303 	mul.w	r3, r0, r3
 80039c0:	440b      	add	r3, r1
 80039c2:	335c      	adds	r3, #92	; 0x5c
 80039c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	335c      	adds	r3, #92	; 0x5c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d912      	bls.n	8003a00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	335c      	adds	r3, #92	; 0x5c
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3360      	adds	r3, #96	; 0x60
 80039fa:	2204      	movs	r2, #4
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e021      	b.n	8003a44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3360      	adds	r3, #96	; 0x60
 8003a0e:	2202      	movs	r2, #2
 8003a10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3e:	461a      	mov	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	2302      	movs	r3, #2
 8003a54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	b2d9      	uxtb	r1, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	202c      	movs	r0, #44	; 0x2c
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	3360      	adds	r3, #96	; 0x60
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f00a f987 	bl	800dd80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a72:	bf00      	nop
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08a      	sub	sp, #40	; 0x28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	0c5b      	lsrs	r3, r3, #17
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d004      	beq.n	8003ac0 <HCD_RXQLVL_IRQHandler+0x46>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	f000 80a9 	beq.w	8003c10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003abe:	e0aa      	b.n	8003c16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80a6 	beq.w	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3344      	adds	r3, #68	; 0x44
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 809b 	beq.w	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3350      	adds	r3, #80	; 0x50
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	441a      	add	r2, r3
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	202c      	movs	r0, #44	; 0x2c
 8003af8:	fb00 f303 	mul.w	r3, r0, r3
 8003afc:	440b      	add	r3, r1
 8003afe:	334c      	adds	r3, #76	; 0x4c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d87a      	bhi.n	8003bfc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	3344      	adds	r3, #68	; 0x44
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f003 fd22 	bl	8007568 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3344      	adds	r3, #68	; 0x44
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	441a      	add	r2, r3
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	202c      	movs	r0, #44	; 0x2c
 8003b3e:	fb00 f303 	mul.w	r3, r0, r3
 8003b42:	440b      	add	r3, r1
 8003b44:	3344      	adds	r3, #68	; 0x44
 8003b46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	3350      	adds	r3, #80	; 0x50
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	202c      	movs	r0, #44	; 0x2c
 8003b62:	fb00 f303 	mul.w	r3, r0, r3
 8003b66:	440b      	add	r3, r1
 8003b68:	3350      	adds	r3, #80	; 0x50
 8003b6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	0cdb      	lsrs	r3, r3, #19
 8003b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3340      	adds	r3, #64	; 0x40
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d13c      	bne.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d039      	beq.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3354      	adds	r3, #84	; 0x54
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2d8      	uxtb	r0, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3354      	adds	r3, #84	; 0x54
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	701a      	strb	r2, [r3, #0]
      break;
 8003bfa:	e00b      	b.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	3360      	adds	r3, #96	; 0x60
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	701a      	strb	r2, [r3, #0]
      break;
 8003c0e:	e001      	b.n	8003c14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c14:	bf00      	nop
  }
}
 8003c16:	bf00      	nop
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d10b      	bne.n	8003c6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d102      	bne.n	8003c66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f00a f871 	bl	800dd48 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d132      	bne.n	8003cde <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d126      	bne.n	8003cd8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d113      	bne.n	8003cba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c9c:	d106      	bne.n	8003cac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 fdcd 	bl	8007844 <USB_InitFSLSPClkSel>
 8003caa:	e011      	b.n	8003cd0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f003 fdc6 	bl	8007844 <USB_InitFSLSPClkSel>
 8003cb8:	e00a      	b.n	8003cd0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d106      	bne.n	8003cd0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f00a f863 	bl	800dd9c <HAL_HCD_PortEnabled_Callback>
 8003cd6:	e002      	b.n	8003cde <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f00a f86d 	bl	800ddb8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d103      	bne.n	8003cf0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f043 0320 	orr.w	r3, r3, #32
 8003cee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e12b      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd f9b8 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	; 0x24
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d68:	f003 f90c 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a81      	ldr	r2, [pc, #516]	; (8003f78 <HAL_I2C_Init+0x274>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d807      	bhi.n	8003d88 <HAL_I2C_Init+0x84>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a80      	ldr	r2, [pc, #512]	; (8003f7c <HAL_I2C_Init+0x278>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bf94      	ite	ls
 8003d80:	2301      	movls	r3, #1
 8003d82:	2300      	movhi	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e006      	b.n	8003d96 <HAL_I2C_Init+0x92>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_I2C_Init+0x27c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf94      	ite	ls
 8003d90:	2301      	movls	r3, #1
 8003d92:	2300      	movhi	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0e7      	b.n	8003f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a78      	ldr	r2, [pc, #480]	; (8003f84 <HAL_I2C_Init+0x280>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0c9b      	lsrs	r3, r3, #18
 8003da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_I2C_Init+0x274>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_I2C_Init+0xd4>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	e009      	b.n	8003dec <HAL_I2C_Init+0xe8>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	4a69      	ldr	r2, [pc, #420]	; (8003f88 <HAL_I2C_Init+0x284>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	3301      	adds	r3, #1
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	495c      	ldr	r1, [pc, #368]	; (8003f78 <HAL_I2C_Init+0x274>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d819      	bhi.n	8003e40 <HAL_I2C_Init+0x13c>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e59      	subs	r1, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e20:	400b      	ands	r3, r1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_I2C_Init+0x138>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e59      	subs	r1, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	e051      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	e04f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d111      	bne.n	8003e6c <HAL_I2C_Init+0x168>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	440b      	add	r3, r1
 8003e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e012      	b.n	8003e92 <HAL_I2C_Init+0x18e>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	0099      	lsls	r1, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x196>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e022      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_I2C_Init+0x1bc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e58      	subs	r0, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	440b      	add	r3, r1
 8003eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ebe:	e00f      	b.n	8003ee0 <HAL_I2C_Init+0x1dc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	0099      	lsls	r1, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	6809      	ldr	r1, [r1, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6911      	ldr	r1, [r2, #16]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68d2      	ldr	r2, [r2, #12]
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	000186a0 	.word	0x000186a0
 8003f7c:	001e847f 	.word	0x001e847f
 8003f80:	003d08ff 	.word	0x003d08ff
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	10624dd3 	.word	0x10624dd3

08003f8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	461a      	mov	r2, r3
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7fd fbb6 	bl	8001710 <HAL_GetTick>
 8003fa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	f040 80e0 	bne.w	8004174 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2319      	movs	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4970      	ldr	r1, [pc, #448]	; (8004180 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f001 f8f6 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e0d3      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_I2C_Master_Transmit+0x50>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0cc      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d007      	beq.n	8004002 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004010:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2221      	movs	r2, #33	; 0x21
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2210      	movs	r2, #16
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	893a      	ldrh	r2, [r7, #8]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a50      	ldr	r2, [pc, #320]	; (8004184 <HAL_I2C_Master_Transmit+0x1f8>)
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004044:	8979      	ldrh	r1, [r7, #10]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fde2 	bl	8004c14 <I2C_MasterRequestWrite>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e08d      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004070:	e066      	b.n	8004140 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6a39      	ldr	r1, [r7, #32]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f001 f970 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b04      	cmp	r3, #4
 8004088:	d107      	bne.n	800409a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d11b      	bne.n	8004114 <HAL_I2C_Master_Transmit+0x188>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6a39      	ldr	r1, [r7, #32]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f001 f960 	bl	80053de <I2C_WaitOnBTFFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b04      	cmp	r3, #4
 800412a:	d107      	bne.n	800413c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e01a      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d194      	bne.n	8004072 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	00100002 	.word	0x00100002
 8004184:	ffff0000 	.word	0xffff0000

08004188 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	461a      	mov	r2, r3
 8004194:	460b      	mov	r3, r1
 8004196:	817b      	strh	r3, [r7, #10]
 8004198:	4613      	mov	r3, r2
 800419a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7fd fab8 	bl	8001710 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	f040 820b 	bne.w	80045c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2319      	movs	r3, #25
 80041b6:	2201      	movs	r2, #1
 80041b8:	497c      	ldr	r1, [pc, #496]	; (80043ac <HAL_I2C_Master_Receive+0x224>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fff8 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
 80041c8:	e1fe      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_I2C_Master_Receive+0x50>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e1f7      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d007      	beq.n	80041fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800420c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2222      	movs	r2, #34	; 0x22
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2210      	movs	r2, #16
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	893a      	ldrh	r2, [r7, #8]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a5c      	ldr	r2, [pc, #368]	; (80043b0 <HAL_I2C_Master_Receive+0x228>)
 800423e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004240:	8979      	ldrh	r1, [r7, #10]
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fd66 	bl	8004d18 <I2C_MasterRequestRead>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e1b8      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d113      	bne.n	8004286 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425e:	2300      	movs	r3, #0
 8004260:	623b      	str	r3, [r7, #32]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	623b      	str	r3, [r7, #32]
 8004272:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e18c      	b.n	80045a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	2b01      	cmp	r3, #1
 800428c:	d11b      	bne.n	80042c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e16c      	b.n	80045a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d11b      	bne.n	8004306 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	e14c      	b.n	80045a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800432c:	e138      	b.n	80045a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	2b03      	cmp	r3, #3
 8004334:	f200 80f1 	bhi.w	800451a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	2b01      	cmp	r3, #1
 800433e:	d123      	bne.n	8004388 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f001 f88b 	bl	8005460 <I2C_WaitOnRXNEFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e139      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004386:	e10b      	b.n	80045a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	2b02      	cmp	r3, #2
 800438e:	d14e      	bne.n	800442e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	2200      	movs	r2, #0
 8004398:	4906      	ldr	r1, [pc, #24]	; (80043b4 <HAL_I2C_Master_Receive+0x22c>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 ff08 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e10e      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
 80043aa:	bf00      	nop
 80043ac:	00100002 	.word	0x00100002
 80043b0:	ffff0000 	.word	0xffff0000
 80043b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800442c:	e0b8      	b.n	80045a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	2200      	movs	r2, #0
 8004436:	4966      	ldr	r1, [pc, #408]	; (80045d0 <HAL_I2C_Master_Receive+0x448>)
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 feb9 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0bf      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	2200      	movs	r2, #0
 8004492:	494f      	ldr	r1, [pc, #316]	; (80045d0 <HAL_I2C_Master_Receive+0x448>)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fe8b 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e091      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004518:	e042      	b.n	80045a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 ff9e 	bl	8005460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e04c      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b04      	cmp	r3, #4
 800456c:	d118      	bne.n	80045a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f47f aec2 	bne.w	800432e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e000      	b.n	80045c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3728      	adds	r7, #40	; 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	00010004 	.word	0x00010004

080045d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	817b      	strh	r3, [r7, #10]
 80045e6:	460b      	mov	r3, r1
 80045e8:	813b      	strh	r3, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ee:	f7fd f88f 	bl	8001710 <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	f040 80d9 	bne.w	80047b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2319      	movs	r3, #25
 8004608:	2201      	movs	r2, #1
 800460a:	496d      	ldr	r1, [pc, #436]	; (80047c0 <HAL_I2C_Mem_Write+0x1ec>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fdcf 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
 800461a:	e0cc      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_I2C_Mem_Write+0x56>
 8004626:	2302      	movs	r3, #2
 8004628:	e0c5      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d007      	beq.n	8004650 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2221      	movs	r2, #33	; 0x21
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a3a      	ldr	r2, [r7, #32]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_I2C_Mem_Write+0x1f0>)
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004692:	88f8      	ldrh	r0, [r7, #6]
 8004694:	893a      	ldrh	r2, [r7, #8]
 8004696:	8979      	ldrh	r1, [r7, #10]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4603      	mov	r3, r0
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fc06 	bl	8004eb4 <I2C_RequestMemoryWrite>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d052      	beq.n	8004754 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e081      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fe50 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d107      	bne.n	80046da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e06b      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <HAL_I2C_Mem_Write+0x180>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d017      	beq.n	8004754 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1aa      	bne.n	80046b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fe3c 	bl	80053de <I2C_WaitOnBTFFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	2b04      	cmp	r3, #4
 8004772:	d107      	bne.n	8004784 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e016      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e000      	b.n	80047b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
  }
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	00100002 	.word	0x00100002
 80047c4:	ffff0000 	.word	0xffff0000

080047c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	817b      	strh	r3, [r7, #10]
 80047da:	460b      	mov	r3, r1
 80047dc:	813b      	strh	r3, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047e2:	f7fc ff95 	bl	8001710 <HAL_GetTick>
 80047e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	f040 8208 	bne.w	8004c06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	2319      	movs	r3, #25
 80047fc:	2201      	movs	r2, #1
 80047fe:	497b      	ldr	r1, [pc, #492]	; (80049ec <HAL_I2C_Mem_Read+0x224>)
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fcd5 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
 800480e:	e1fb      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_I2C_Mem_Read+0x56>
 800481a:	2302      	movs	r3, #2
 800481c:	e1f4      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b01      	cmp	r3, #1
 8004832:	d007      	beq.n	8004844 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2222      	movs	r2, #34	; 0x22
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2240      	movs	r2, #64	; 0x40
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a5b      	ldr	r2, [pc, #364]	; (80049f0 <HAL_I2C_Mem_Read+0x228>)
 8004884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004886:	88f8      	ldrh	r0, [r7, #6]
 8004888:	893a      	ldrh	r2, [r7, #8]
 800488a:	8979      	ldrh	r1, [r7, #10]
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4603      	mov	r3, r0
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fba2 	bl	8004fe0 <I2C_RequestMemoryRead>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e1b0      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d113      	bne.n	80048d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e184      	b.n	8004be0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d11b      	bne.n	8004916 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e164      	b.n	8004be0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	2b02      	cmp	r3, #2
 800491c:	d11b      	bne.n	8004956 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	e144      	b.n	8004be0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800496c:	e138      	b.n	8004be0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004972:	2b03      	cmp	r3, #3
 8004974:	f200 80f1 	bhi.w	8004b5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	2b01      	cmp	r3, #1
 800497e:	d123      	bne.n	80049c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fd6b 	bl	8005460 <I2C_WaitOnRXNEFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e139      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049c6:	e10b      	b.n	8004be0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d14e      	bne.n	8004a6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2200      	movs	r2, #0
 80049d8:	4906      	ldr	r1, [pc, #24]	; (80049f4 <HAL_I2C_Mem_Read+0x22c>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fbe8 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e10e      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
 80049ea:	bf00      	nop
 80049ec:	00100002 	.word	0x00100002
 80049f0:	ffff0000 	.word	0xffff0000
 80049f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a6c:	e0b8      	b.n	8004be0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2200      	movs	r2, #0
 8004a76:	4966      	ldr	r1, [pc, #408]	; (8004c10 <HAL_I2C_Mem_Read+0x448>)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fb99 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0bf      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	494f      	ldr	r1, [pc, #316]	; (8004c10 <HAL_I2C_Mem_Read+0x448>)
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fb6b 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e091      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b58:	e042      	b.n	8004be0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fc7e 	bl	8005460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e04c      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d118      	bne.n	8004be0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f47f aec2 	bne.w	800496e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3728      	adds	r7, #40	; 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	00010004 	.word	0x00010004

08004c14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	460b      	mov	r3, r1
 8004c22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d006      	beq.n	8004c3e <I2C_MasterRequestWrite+0x2a>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d003      	beq.n	8004c3e <I2C_MasterRequestWrite+0x2a>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c3c:	d108      	bne.n	8004c50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e00b      	b.n	8004c68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	2b12      	cmp	r3, #18
 8004c56:	d107      	bne.n	8004c68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fa9b 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8e:	d103      	bne.n	8004c98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e035      	b.n	8004d08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca4:	d108      	bne.n	8004cb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cb4:	611a      	str	r2, [r3, #16]
 8004cb6:	e01b      	b.n	8004cf0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cb8:	897b      	ldrh	r3, [r7, #10]
 8004cba:	11db      	asrs	r3, r3, #7
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0306 	and.w	r3, r3, #6
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f063 030f 	orn	r3, r3, #15
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	490e      	ldr	r1, [pc, #56]	; (8004d10 <I2C_MasterRequestWrite+0xfc>)
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fac1 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e010      	b.n	8004d08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4907      	ldr	r1, [pc, #28]	; (8004d14 <I2C_MasterRequestWrite+0x100>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fab1 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	00010008 	.word	0x00010008
 8004d14:	00010002 	.word	0x00010002

08004d18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	460b      	mov	r3, r1
 8004d26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d006      	beq.n	8004d52 <I2C_MasterRequestRead+0x3a>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d003      	beq.n	8004d52 <I2C_MasterRequestRead+0x3a>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d50:	d108      	bne.n	8004d64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e00b      	b.n	8004d7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	2b11      	cmp	r3, #17
 8004d6a:	d107      	bne.n	8004d7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fa11 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00d      	beq.n	8004db0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	d103      	bne.n	8004dac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e079      	b.n	8004ea4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db8:	d108      	bne.n	8004dcc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dba:	897b      	ldrh	r3, [r7, #10]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	611a      	str	r2, [r3, #16]
 8004dca:	e05f      	b.n	8004e8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dcc:	897b      	ldrh	r3, [r7, #10]
 8004dce:	11db      	asrs	r3, r3, #7
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0306 	and.w	r3, r3, #6
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f063 030f 	orn	r3, r3, #15
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	4930      	ldr	r1, [pc, #192]	; (8004eac <I2C_MasterRequestRead+0x194>)
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fa37 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e054      	b.n	8004ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dfa:	897b      	ldrh	r3, [r7, #10]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4929      	ldr	r1, [pc, #164]	; (8004eb0 <I2C_MasterRequestRead+0x198>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fa27 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e044      	b.n	8004ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f9af 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d103      	bne.n	8004e70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e017      	b.n	8004ea4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	11db      	asrs	r3, r3, #7
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f003 0306 	and.w	r3, r3, #6
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f063 030e 	orn	r3, r3, #14
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4907      	ldr	r1, [pc, #28]	; (8004eb0 <I2C_MasterRequestRead+0x198>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f9e3 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010008 	.word	0x00010008
 8004eb0:	00010002 	.word	0x00010002

08004eb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	817b      	strh	r3, [r7, #10]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	813b      	strh	r3, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004edc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f960 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f04:	d103      	bne.n	8004f0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e05f      	b.n	8004fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f12:	897b      	ldrh	r3, [r7, #10]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	6a3a      	ldr	r2, [r7, #32]
 8004f26:	492d      	ldr	r1, [pc, #180]	; (8004fdc <I2C_RequestMemoryWrite+0x128>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f998 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e04c      	b.n	8004fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f50:	6a39      	ldr	r1, [r7, #32]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fa02 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00d      	beq.n	8004f7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d107      	bne.n	8004f76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e02b      	b.n	8004fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f80:	893b      	ldrh	r3, [r7, #8]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	611a      	str	r2, [r3, #16]
 8004f8a:	e021      	b.n	8004fd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f8c:	893b      	ldrh	r3, [r7, #8]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9c:	6a39      	ldr	r1, [r7, #32]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f9dc 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d107      	bne.n	8004fc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e005      	b.n	8004fd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc6:	893b      	ldrh	r3, [r7, #8]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	00010002 	.word	0x00010002

08004fe0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	817b      	strh	r3, [r7, #10]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	813b      	strh	r3, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005008:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2200      	movs	r2, #0
 8005022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f8c2 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005040:	d103      	bne.n	800504a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0aa      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800505c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	6a3a      	ldr	r2, [r7, #32]
 8005062:	4952      	ldr	r1, [pc, #328]	; (80051ac <I2C_RequestMemoryRead+0x1cc>)
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8fa 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e097      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	6a39      	ldr	r1, [r7, #32]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f964 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d107      	bne.n	80050b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e076      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050bc:	893b      	ldrh	r3, [r7, #8]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]
 80050c6:	e021      	b.n	800510c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c8:	893b      	ldrh	r3, [r7, #8]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d8:	6a39      	ldr	r1, [r7, #32]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f93e 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d107      	bne.n	80050fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e050      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005102:	893b      	ldrh	r3, [r7, #8]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510e:	6a39      	ldr	r1, [r7, #32]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f923 	bl	800535c <I2C_WaitOnTXEFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	2b04      	cmp	r3, #4
 8005122:	d107      	bne.n	8005134 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005132:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e035      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005146:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	2200      	movs	r2, #0
 8005150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f82b 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516e:	d103      	bne.n	8005178 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e013      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800517c:	897b      	ldrh	r3, [r7, #10]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	b2da      	uxtb	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	4906      	ldr	r1, [pc, #24]	; (80051ac <I2C_RequestMemoryRead+0x1cc>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f863 	bl	800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	00010002 	.word	0x00010002

080051b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c0:	e025      	b.n	800520e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d021      	beq.n	800520e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fc faa1 	bl	8001710 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e023      	b.n	8005256 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10d      	bne.n	8005234 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	43da      	mvns	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	e00c      	b.n	800524e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	43da      	mvns	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d0b6      	beq.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800526c:	e051      	b.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527c:	d123      	bne.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005296:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0204 	orr.w	r2, r3, #4
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e046      	b.n	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d021      	beq.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ce:	f7fc fa1f 	bl	8001710 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d116      	bne.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e020      	b.n	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10c      	bne.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	43da      	mvns	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e00b      	b.n	800534e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	43da      	mvns	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d18d      	bne.n	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005368:	e02d      	b.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f8ce 	bl	800550c <I2C_IsAcknowledgeFailed>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e02d      	b.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d021      	beq.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fc f9c5 	bl	8001710 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d116      	bne.n	80053c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e007      	b.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d0:	2b80      	cmp	r3, #128	; 0x80
 80053d2:	d1ca      	bne.n	800536a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053ea:	e02d      	b.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f88d 	bl	800550c <I2C_IsAcknowledgeFailed>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e02d      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d021      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005404:	f7fc f984 	bl	8001710 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d116      	bne.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d1ca      	bne.n	80053ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800546c:	e042      	b.n	80054f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d119      	bne.n	80054b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0210 	mvn.w	r2, #16
 8005484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e029      	b.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b0:	f7fc f92e 	bl	8001710 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d302      	bcc.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d116      	bne.n	80054f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e007      	b.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d1b5      	bne.n	800546e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005522:	d11b      	bne.n	800555c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800552c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f043 0204 	orr.w	r2, r3, #4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e128      	b.n	80057d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a90      	ldr	r2, [pc, #576]	; (80057d8 <HAL_I2S_Init+0x26c>)
 8005596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fb fdc9 	bl	8001130 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055b4:	f023 030f 	bic.w	r3, r3, #15
 80055b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2202      	movs	r2, #2
 80055c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d060      	beq.n	800568c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80055d2:	2310      	movs	r3, #16
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	e001      	b.n	80055dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80055d8:	2320      	movs	r3, #32
 80055da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d802      	bhi.n	80055ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80055ea:	2001      	movs	r0, #1
 80055ec:	f001 fdec 	bl	80071c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80055f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fa:	d125      	bne.n	8005648 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d010      	beq.n	8005626 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	fbb2 f2f3 	udiv	r2, r2, r3
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	461a      	mov	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	3305      	adds	r3, #5
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e01f      	b.n	8005666 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	3305      	adds	r3, #5
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e00e      	b.n	8005666 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	3305      	adds	r3, #5
 8005664:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4a5c      	ldr	r2, [pc, #368]	; (80057dc <HAL_I2S_Init+0x270>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	08db      	lsrs	r3, r3, #3
 8005670:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	e003      	b.n	8005694 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800568c:	2302      	movs	r3, #2
 800568e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d902      	bls.n	80056a0 <HAL_I2S_Init+0x134>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2bff      	cmp	r3, #255	; 0xff
 800569e:	d907      	bls.n	80056b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	f043 0210 	orr.w	r2, r3, #16
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e08f      	b.n	80057d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	ea42 0103 	orr.w	r1, r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056ce:	f023 030f 	bic.w	r3, r3, #15
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6851      	ldr	r1, [r2, #4]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6892      	ldr	r2, [r2, #8]
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68d2      	ldr	r2, [r2, #12]
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6992      	ldr	r2, [r2, #24]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d161      	bne.n	80057c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a38      	ldr	r2, [pc, #224]	; (80057e0 <HAL_I2S_Init+0x274>)
 8005700:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a37      	ldr	r2, [pc, #220]	; (80057e4 <HAL_I2S_Init+0x278>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d101      	bne.n	8005710 <HAL_I2S_Init+0x1a4>
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <HAL_I2S_Init+0x27c>)
 800570e:	e001      	b.n	8005714 <HAL_I2S_Init+0x1a8>
 8005710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	4932      	ldr	r1, [pc, #200]	; (80057e4 <HAL_I2S_Init+0x278>)
 800571c:	428a      	cmp	r2, r1
 800571e:	d101      	bne.n	8005724 <HAL_I2S_Init+0x1b8>
 8005720:	4a31      	ldr	r2, [pc, #196]	; (80057e8 <HAL_I2S_Init+0x27c>)
 8005722:	e001      	b.n	8005728 <HAL_I2S_Init+0x1bc>
 8005724:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005728:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800572c:	f023 030f 	bic.w	r3, r3, #15
 8005730:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <HAL_I2S_Init+0x278>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_I2S_Init+0x1d4>
 800573c:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <HAL_I2S_Init+0x27c>)
 800573e:	e001      	b.n	8005744 <HAL_I2S_Init+0x1d8>
 8005740:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005744:	2202      	movs	r2, #2
 8005746:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <HAL_I2S_Init+0x278>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_I2S_Init+0x1ea>
 8005752:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_I2S_Init+0x27c>)
 8005754:	e001      	b.n	800575a <HAL_I2S_Init+0x1ee>
 8005756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005766:	d003      	beq.n	8005770 <HAL_I2S_Init+0x204>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	e001      	b.n	800577c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005786:	4313      	orrs	r3, r2
 8005788:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005790:	4313      	orrs	r3, r2
 8005792:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800579a:	4313      	orrs	r3, r2
 800579c:	b29a      	uxth	r2, r3
 800579e:	897b      	ldrh	r3, [r7, #10]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a0d      	ldr	r2, [pc, #52]	; (80057e4 <HAL_I2S_Init+0x278>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <HAL_I2S_Init+0x24c>
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <HAL_I2S_Init+0x27c>)
 80057b6:	e001      	b.n	80057bc <HAL_I2S_Init+0x250>
 80057b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057bc:	897a      	ldrh	r2, [r7, #10]
 80057be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3720      	adds	r7, #32
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	08006069 	.word	0x08006069
 80057dc:	cccccccd 	.word	0xcccccccd
 80057e0:	080061f1 	.word	0x080061f1
 80057e4:	40003800 	.word	0x40003800
 80057e8:	40003400 	.word	0x40003400

080057ec <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_I2S_Transmit_DMA+0x1a>
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e08e      	b.n	8005928 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_I2S_Transmit_DMA+0x2e>
 8005816:	2302      	movs	r3, #2
 8005818:	e086      	b.n	8005928 <HAL_I2S_Transmit_DMA+0x13c>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b01      	cmp	r3, #1
 800582c:	d005      	beq.n	800583a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
 8005838:	e076      	b.n	8005928 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2203      	movs	r2, #3
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b03      	cmp	r3, #3
 800585e:	d002      	beq.n	8005866 <HAL_I2S_Transmit_DMA+0x7a>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b05      	cmp	r3, #5
 8005864:	d10a      	bne.n	800587c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	855a      	strh	r2, [r3, #42]	; 0x2a
 800587a:	e005      	b.n	8005888 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	4a28      	ldr	r2, [pc, #160]	; (8005930 <HAL_I2S_Transmit_DMA+0x144>)
 800588e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	4a27      	ldr	r2, [pc, #156]	; (8005934 <HAL_I2S_Transmit_DMA+0x148>)
 8005896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	4a26      	ldr	r2, [pc, #152]	; (8005938 <HAL_I2S_Transmit_DMA+0x14c>)
 800589e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058a8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058b0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80058b8:	f7fc f91a 	bl	8001af0 <HAL_DMA_Start_IT>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00f      	beq.n	80058e2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	f043 0208 	orr.w	r2, r3, #8
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e022      	b.n	8005928 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d107      	bne.n	8005900 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058fe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0202 	orr.w	r2, r2, #2
 800591c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	08005f47 	.word	0x08005f47
 8005934:	08005f05 	.word	0x08005f05
 8005938:	08005f63 	.word	0x08005f63

0800593c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_I2S_DMAPause+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e04a      	b.n	80059ea <HAL_I2S_DMAPause+0xae>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b03      	cmp	r3, #3
 8005966:	d108      	bne.n	800597a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0202 	bic.w	r2, r2, #2
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	e032      	b.n	80059e0 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b04      	cmp	r3, #4
 8005984:	d108      	bne.n	8005998 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	e023      	b.n	80059e0 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b05      	cmp	r3, #5
 80059a2:	d11d      	bne.n	80059e0 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0203 	bic.w	r2, r2, #3
 80059b2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a0f      	ldr	r2, [pc, #60]	; (80059f8 <HAL_I2S_DMAPause+0xbc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_I2S_DMAPause+0x86>
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <HAL_I2S_DMAPause+0xc0>)
 80059c0:	e001      	b.n	80059c6 <HAL_I2S_DMAPause+0x8a>
 80059c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	490a      	ldr	r1, [pc, #40]	; (80059f8 <HAL_I2S_DMAPause+0xbc>)
 80059ce:	428b      	cmp	r3, r1
 80059d0:	d101      	bne.n	80059d6 <HAL_I2S_DMAPause+0x9a>
 80059d2:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <HAL_I2S_DMAPause+0xc0>)
 80059d4:	e001      	b.n	80059da <HAL_I2S_DMAPause+0x9e>
 80059d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059da:	f022 0203 	bic.w	r2, r2, #3
 80059de:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40003800 	.word	0x40003800
 80059fc:	40003400 	.word	0x40003400

08005a00 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_I2S_DMAResume+0x18>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e07d      	b.n	8005b14 <HAL_I2S_DMAResume+0x114>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d108      	bne.n	8005a3e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0202 	orr.w	r2, r2, #2
 8005a3a:	605a      	str	r2, [r3, #4]
 8005a3c:	e056      	b.n	8005aec <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d108      	bne.n	8005a5c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	e047      	b.n	8005aec <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d141      	bne.n	8005aec <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0203 	orr.w	r2, r2, #3
 8005a76:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a28      	ldr	r2, [pc, #160]	; (8005b20 <HAL_I2S_DMAResume+0x120>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <HAL_I2S_DMAResume+0x86>
 8005a82:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <HAL_I2S_DMAResume+0x124>)
 8005a84:	e001      	b.n	8005a8a <HAL_I2S_DMAResume+0x8a>
 8005a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4923      	ldr	r1, [pc, #140]	; (8005b20 <HAL_I2S_DMAResume+0x120>)
 8005a92:	428b      	cmp	r3, r1
 8005a94:	d101      	bne.n	8005a9a <HAL_I2S_DMAResume+0x9a>
 8005a96:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <HAL_I2S_DMAResume+0x124>)
 8005a98:	e001      	b.n	8005a9e <HAL_I2S_DMAResume+0x9e>
 8005a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a9e:	f042 0203 	orr.w	r2, r2, #3
 8005aa2:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1d      	ldr	r2, [pc, #116]	; (8005b20 <HAL_I2S_DMAResume+0x120>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2S_DMAResume+0xb2>
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_I2S_DMAResume+0x124>)
 8005ab0:	e001      	b.n	8005ab6 <HAL_I2S_DMAResume+0xb6>
 8005ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d115      	bne.n	8005aec <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <HAL_I2S_DMAResume+0x120>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <HAL_I2S_DMAResume+0xce>
 8005aca:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <HAL_I2S_DMAResume+0x124>)
 8005acc:	e001      	b.n	8005ad2 <HAL_I2S_DMAResume+0xd2>
 8005ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4911      	ldr	r1, [pc, #68]	; (8005b20 <HAL_I2S_DMAResume+0x120>)
 8005ada:	428b      	cmp	r3, r1
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2S_DMAResume+0xe2>
 8005ade:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <HAL_I2S_DMAResume+0x124>)
 8005ae0:	e001      	b.n	8005ae6 <HAL_I2S_DMAResume+0xe6>
 8005ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aea:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b08:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40003800 	.word	0x40003800
 8005b24:	40003400 	.word	0x40003400

08005b28 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3c:	d004      	beq.n	8005b48 <HAL_I2S_DMAStop+0x20>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 80d1 	bne.w	8005cea <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00f      	beq.n	8005b70 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fc f823 	bl	8001ba0 <HAL_DMA_Abort>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	f043 0208 	orr.w	r2, r3, #8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005b70:	2364      	movs	r3, #100	; 0x64
 8005b72:	2201      	movs	r2, #1
 8005b74:	2102      	movs	r1, #2
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb00 	bl	800617c <I2S_WaitFlagStateUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005b9a:	2364      	movs	r3, #100	; 0x64
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2180      	movs	r1, #128	; 0x80
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 faeb 	bl	800617c <I2S_WaitFlagStateUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0202 	bic.w	r2, r2, #2
 8005bf0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	f040 8165 	bne.w	8005eca <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fb ffc7 	bl	8001ba0 <HAL_DMA_Abort>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	f043 0208 	orr.w	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a8a      	ldr	r2, [pc, #552]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <HAL_I2S_DMAStop+0x10e>
 8005c32:	4b8a      	ldr	r3, [pc, #552]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005c34:	e001      	b.n	8005c3a <HAL_I2S_DMAStop+0x112>
 8005c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4985      	ldr	r1, [pc, #532]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005c42:	428b      	cmp	r3, r1
 8005c44:	d101      	bne.n	8005c4a <HAL_I2S_DMAStop+0x122>
 8005c46:	4b85      	ldr	r3, [pc, #532]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005c48:	e001      	b.n	8005c4e <HAL_I2S_DMAStop+0x126>
 8005c4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c52:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a7e      	ldr	r2, [pc, #504]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d101      	bne.n	8005c66 <HAL_I2S_DMAStop+0x13e>
 8005c62:	4b7e      	ldr	r3, [pc, #504]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005c64:	e001      	b.n	8005c6a <HAL_I2S_DMAStop+0x142>
 8005c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a79      	ldr	r2, [pc, #484]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_I2S_DMAStop+0x154>
 8005c78:	4b78      	ldr	r3, [pc, #480]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005c7a:	e001      	b.n	8005c80 <HAL_I2S_DMAStop+0x158>
 8005c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a73      	ldr	r2, [pc, #460]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d101      	bne.n	8005c94 <HAL_I2S_DMAStop+0x16c>
 8005c90:	4b72      	ldr	r3, [pc, #456]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005c92:	e001      	b.n	8005c98 <HAL_I2S_DMAStop+0x170>
 8005c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	496e      	ldr	r1, [pc, #440]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_I2S_DMAStop+0x180>
 8005ca4:	4b6d      	ldr	r3, [pc, #436]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005ca6:	e001      	b.n	8005cac <HAL_I2S_DMAStop+0x184>
 8005ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005cd2:	e0fa      	b.n	8005eca <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a5f      	ldr	r2, [pc, #380]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2S_DMAStop+0x1ba>
 8005cde:	4b5f      	ldr	r3, [pc, #380]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005ce0:	e001      	b.n	8005ce6 <HAL_I2S_DMAStop+0x1be>
 8005ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005ce8:	e0ef      	b.n	8005eca <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cf2:	d005      	beq.n	8005d00 <HAL_I2S_DMAStop+0x1d8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfc:	f040 80e5 	bne.w	8005eca <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00f      	beq.n	8005d28 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fb ff47 	bl	8001ba0 <HAL_DMA_Abort>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1c:	f043 0208 	orr.w	r2, r3, #8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b05      	cmp	r3, #5
 8005d32:	f040 809a 	bne.w	8005e6a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00f      	beq.n	8005d5e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fb ff2c 	bl	8001ba0 <HAL_DMA_Abort>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f043 0208 	orr.w	r2, r3, #8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005d5e:	f7fb fcd7 	bl	8001710 <HAL_GetTick>
 8005d62:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005d64:	e012      	b.n	8005d8c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005d66:	f7fb fcd3 	bl	8001710 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b64      	cmp	r3, #100	; 0x64
 8005d72:	d90b      	bls.n	8005d8c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	f043 0201 	orr.w	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a31      	ldr	r2, [pc, #196]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d101      	bne.n	8005d9a <HAL_I2S_DMAStop+0x272>
 8005d96:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005d98:	e001      	b.n	8005d9e <HAL_I2S_DMAStop+0x276>
 8005d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d1de      	bne.n	8005d66 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005da8:	e012      	b.n	8005dd0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005daa:	f7fb fcb1 	bl	8001710 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b64      	cmp	r3, #100	; 0x64
 8005db6:	d90b      	bls.n	8005dd0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a20      	ldr	r2, [pc, #128]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_I2S_DMAStop+0x2b6>
 8005dda:	4b20      	ldr	r3, [pc, #128]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005ddc:	e001      	b.n	8005de2 <HAL_I2S_DMAStop+0x2ba>
 8005dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de8:	2b80      	cmp	r3, #128	; 0x80
 8005dea:	d0de      	beq.n	8005daa <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d101      	bne.n	8005dfa <HAL_I2S_DMAStop+0x2d2>
 8005df6:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005df8:	e001      	b.n	8005dfe <HAL_I2S_DMAStop+0x2d6>
 8005dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4914      	ldr	r1, [pc, #80]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005e06:	428b      	cmp	r3, r1
 8005e08:	d101      	bne.n	8005e0e <HAL_I2S_DMAStop+0x2e6>
 8005e0a:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005e0c:	e001      	b.n	8005e12 <HAL_I2S_DMAStop+0x2ea>
 8005e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e16:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d101      	bne.n	8005e2a <HAL_I2S_DMAStop+0x302>
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005e28:	e001      	b.n	8005e2e <HAL_I2S_DMAStop+0x306>
 8005e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a07      	ldr	r2, [pc, #28]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2S_DMAStop+0x31a>
 8005e3e:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005e40:	e001      	b.n	8005e46 <HAL_I2S_DMAStop+0x31e>
 8005e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4902      	ldr	r1, [pc, #8]	; (8005e58 <HAL_I2S_DMAStop+0x330>)
 8005e4e:	428b      	cmp	r3, r1
 8005e50:	d106      	bne.n	8005e60 <HAL_I2S_DMAStop+0x338>
 8005e52:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <HAL_I2S_DMAStop+0x334>)
 8005e54:	e006      	b.n	8005e64 <HAL_I2S_DMAStop+0x33c>
 8005e56:	bf00      	nop
 8005e58:	40003800 	.word	0x40003800
 8005e5c:	40003400 	.word	0x40003400
 8005e60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e64:	f022 0202 	bic.w	r2, r2, #2
 8005e68:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e78:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e002      	b.n	8005eca <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10e      	bne.n	8005f38 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0202 	bic.w	r2, r2, #2
 8005f28:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7fa fe09 	bl	8000b50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7fa fe0d 	bl	8000b74 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0203 	bic.w	r2, r2, #3
 8005f7e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	f043 0208 	orr.w	r2, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff ffa5 	bl	8005ef0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10e      	bne.n	8006002 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ff2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fa fda7 	bl	8000b50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	b292      	uxth	r2, r2
 800601e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10e      	bne.n	8006060 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006050:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ff3e 	bl	8005edc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b04      	cmp	r3, #4
 8006082:	d13a      	bne.n	80060fa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d109      	bne.n	80060a2 <I2S_IRQHandler+0x3a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d102      	bne.n	80060a2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff ffb4 	bl	800600a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d126      	bne.n	80060fa <I2S_IRQHandler+0x92>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d11f      	bne.n	80060fa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060c8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	f043 0202 	orr.w	r2, r3, #2
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fefb 	bl	8005ef0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b03      	cmp	r3, #3
 8006104:	d136      	bne.n	8006174 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d109      	bne.n	8006124 <I2S_IRQHandler+0xbc>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d102      	bne.n	8006124 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff ff45 	bl	8005fae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b08      	cmp	r3, #8
 800612c:	d122      	bne.n	8006174 <I2S_IRQHandler+0x10c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b20      	cmp	r3, #32
 800613a:	d11b      	bne.n	8006174 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800614a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f043 0204 	orr.w	r2, r3, #4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff febe 	bl	8005ef0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006174:	bf00      	nop
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800618c:	f7fb fac0 	bl	8001710 <HAL_GetTick>
 8006190:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006192:	e018      	b.n	80061c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	d014      	beq.n	80061c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800619c:	f7fb fab8 	bl	8001710 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d902      	bls.n	80061b2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e00f      	b.n	80061e6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4013      	ands	r3, r2
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d1d7      	bne.n	8006194 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a92      	ldr	r2, [pc, #584]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d101      	bne.n	800620e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800620a:	4b92      	ldr	r3, [pc, #584]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800620c:	e001      	b.n	8006212 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800620e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a8b      	ldr	r2, [pc, #556]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006228:	4b8a      	ldr	r3, [pc, #552]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800622a:	e001      	b.n	8006230 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800622c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623c:	d004      	beq.n	8006248 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 8099 	bne.w	800637a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b02      	cmp	r3, #2
 8006250:	d107      	bne.n	8006262 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f925 	bl	80064ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d107      	bne.n	800627c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f9c8 	bl	800660c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d13a      	bne.n	80062fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d035      	beq.n	80062fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6e      	ldr	r2, [pc, #440]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800629a:	4b6e      	ldr	r3, [pc, #440]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800629c:	e001      	b.n	80062a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800629e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4969      	ldr	r1, [pc, #420]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062aa:	428b      	cmp	r3, r1
 80062ac:	d101      	bne.n	80062b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80062ae:	4b69      	ldr	r3, [pc, #420]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062b0:	e001      	b.n	80062b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80062b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	f043 0202 	orr.w	r2, r3, #2
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fdfa 	bl	8005ef0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b08      	cmp	r3, #8
 8006304:	f040 80c3 	bne.w	800648e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80bd 	beq.w	800648e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006322:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a49      	ldr	r2, [pc, #292]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d101      	bne.n	8006332 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800632e:	4b49      	ldr	r3, [pc, #292]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006330:	e001      	b.n	8006336 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4944      	ldr	r1, [pc, #272]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800633e:	428b      	cmp	r3, r1
 8006340:	d101      	bne.n	8006346 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006342:	4b44      	ldr	r3, [pc, #272]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006344:	e001      	b.n	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800634a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800634e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006350:	2300      	movs	r3, #0
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f043 0204 	orr.w	r2, r3, #4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fdbc 	bl	8005ef0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006378:	e089      	b.n	800648e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b02      	cmp	r3, #2
 8006382:	d107      	bne.n	8006394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8be 	bl	8006510 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f8fd 	bl	80065a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d12f      	bne.n	8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d02a      	beq.n	8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d101      	bne.n	80063e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80063dc:	4b1d      	ldr	r3, [pc, #116]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063de:	e001      	b.n	80063e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80063e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4919      	ldr	r1, [pc, #100]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d101      	bne.n	80063f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80063f0:	4b18      	ldr	r3, [pc, #96]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063f2:	e001      	b.n	80063f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80063f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	f043 0202 	orr.w	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd6c 	bl	8005ef0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b08      	cmp	r3, #8
 8006420:	d136      	bne.n	8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d031      	beq.n	8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a07      	ldr	r2, [pc, #28]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006438:	e001      	b.n	800643e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800643a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4902      	ldr	r1, [pc, #8]	; (8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006446:	428b      	cmp	r3, r1
 8006448:	d106      	bne.n	8006458 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800644a:	4b02      	ldr	r3, [pc, #8]	; (8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800644c:	e006      	b.n	800645c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800644e:	bf00      	nop
 8006450:	40003800 	.word	0x40003800
 8006454:	40003400 	.word	0x40003400
 8006458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800645c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006460:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006470:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	f043 0204 	orr.w	r2, r3, #4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fd32 	bl	8005ef0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800648c:	e000      	b.n	8006490 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800648e:	bf00      	nop
}
 8006490:	bf00      	nop
 8006492:	3720      	adds	r7, #32
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	1c99      	adds	r1, r3, #2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6251      	str	r1, [r2, #36]	; 0x24
 80064be:	881a      	ldrh	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d113      	bne.n	8006506 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff ffc9 	bl	8006498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	1c99      	adds	r1, r3, #2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6251      	str	r1, [r2, #36]	; 0x24
 8006522:	8819      	ldrh	r1, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <I2SEx_TxISR_I2SExt+0x90>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <I2SEx_TxISR_I2SExt+0x22>
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <I2SEx_TxISR_I2SExt+0x94>)
 8006530:	e001      	b.n	8006536 <I2SEx_TxISR_I2SExt+0x26>
 8006532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006536:	460a      	mov	r2, r1
 8006538:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d121      	bne.n	8006596 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a12      	ldr	r2, [pc, #72]	; (80065a0 <I2SEx_TxISR_I2SExt+0x90>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d101      	bne.n	8006560 <I2SEx_TxISR_I2SExt+0x50>
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <I2SEx_TxISR_I2SExt+0x94>)
 800655e:	e001      	b.n	8006564 <I2SEx_TxISR_I2SExt+0x54>
 8006560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	490d      	ldr	r1, [pc, #52]	; (80065a0 <I2SEx_TxISR_I2SExt+0x90>)
 800656c:	428b      	cmp	r3, r1
 800656e:	d101      	bne.n	8006574 <I2SEx_TxISR_I2SExt+0x64>
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <I2SEx_TxISR_I2SExt+0x94>)
 8006572:	e001      	b.n	8006578 <I2SEx_TxISR_I2SExt+0x68>
 8006574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006578:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800657c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff ff81 	bl	8006498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40003800 	.word	0x40003800
 80065a4:	40003400 	.word	0x40003400

080065a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68d8      	ldr	r0, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	1c99      	adds	r1, r3, #2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065c0:	b282      	uxth	r2, r0
 80065c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d113      	bne.n	8006604 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff4a 	bl	8006498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a20      	ldr	r2, [pc, #128]	; (800669c <I2SEx_RxISR_I2SExt+0x90>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d101      	bne.n	8006622 <I2SEx_RxISR_I2SExt+0x16>
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <I2SEx_RxISR_I2SExt+0x94>)
 8006620:	e001      	b.n	8006626 <I2SEx_RxISR_I2SExt+0x1a>
 8006622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006626:	68d8      	ldr	r0, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	1c99      	adds	r1, r3, #2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006632:	b282      	uxth	r2, r0
 8006634:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d121      	bne.n	8006692 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <I2SEx_RxISR_I2SExt+0x90>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d101      	bne.n	800665c <I2SEx_RxISR_I2SExt+0x50>
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <I2SEx_RxISR_I2SExt+0x94>)
 800665a:	e001      	b.n	8006660 <I2SEx_RxISR_I2SExt+0x54>
 800665c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	490d      	ldr	r1, [pc, #52]	; (800669c <I2SEx_RxISR_I2SExt+0x90>)
 8006668:	428b      	cmp	r3, r1
 800666a:	d101      	bne.n	8006670 <I2SEx_RxISR_I2SExt+0x64>
 800666c:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <I2SEx_RxISR_I2SExt+0x94>)
 800666e:	e001      	b.n	8006674 <I2SEx_RxISR_I2SExt+0x68>
 8006670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006674:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006678:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff ff03 	bl	8006498 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40003800 	.word	0x40003800
 80066a0:	40003400 	.word	0x40003400

080066a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e267      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d075      	beq.n	80067ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066c2:	4b88      	ldr	r3, [pc, #544]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d00c      	beq.n	80066e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ce:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d112      	bne.n	8006700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066da:	4b82      	ldr	r3, [pc, #520]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e6:	d10b      	bne.n	8006700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e8:	4b7e      	ldr	r3, [pc, #504]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d05b      	beq.n	80067ac <HAL_RCC_OscConfig+0x108>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d157      	bne.n	80067ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e242      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006708:	d106      	bne.n	8006718 <HAL_RCC_OscConfig+0x74>
 800670a:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a75      	ldr	r2, [pc, #468]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e01d      	b.n	8006754 <HAL_RCC_OscConfig+0xb0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006720:	d10c      	bne.n	800673c <HAL_RCC_OscConfig+0x98>
 8006722:	4b70      	ldr	r3, [pc, #448]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6f      	ldr	r2, [pc, #444]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4b6d      	ldr	r3, [pc, #436]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a6c      	ldr	r2, [pc, #432]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e00b      	b.n	8006754 <HAL_RCC_OscConfig+0xb0>
 800673c:	4b69      	ldr	r3, [pc, #420]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a68      	ldr	r2, [pc, #416]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	4b66      	ldr	r3, [pc, #408]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a65      	ldr	r2, [pc, #404]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 800674e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d013      	beq.n	8006784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675c:	f7fa ffd8 	bl	8001710 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006764:	f7fa ffd4 	bl	8001710 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b64      	cmp	r3, #100	; 0x64
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e207      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006776:	4b5b      	ldr	r3, [pc, #364]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f0      	beq.n	8006764 <HAL_RCC_OscConfig+0xc0>
 8006782:	e014      	b.n	80067ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006784:	f7fa ffc4 	bl	8001710 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800678c:	f7fa ffc0 	bl	8001710 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b64      	cmp	r3, #100	; 0x64
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e1f3      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679e:	4b51      	ldr	r3, [pc, #324]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f0      	bne.n	800678c <HAL_RCC_OscConfig+0xe8>
 80067aa:	e000      	b.n	80067ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d063      	beq.n	8006882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ba:	4b4a      	ldr	r3, [pc, #296]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 030c 	and.w	r3, r3, #12
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00b      	beq.n	80067de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	d11c      	bne.n	800680c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067d2:	4b44      	ldr	r3, [pc, #272]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d116      	bne.n	800680c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067de:	4b41      	ldr	r3, [pc, #260]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_RCC_OscConfig+0x152>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d001      	beq.n	80067f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e1c7      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f6:	4b3b      	ldr	r3, [pc, #236]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4937      	ldr	r1, [pc, #220]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006806:	4313      	orrs	r3, r2
 8006808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800680a:	e03a      	b.n	8006882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d020      	beq.n	8006856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006814:	4b34      	ldr	r3, [pc, #208]	; (80068e8 <HAL_RCC_OscConfig+0x244>)
 8006816:	2201      	movs	r2, #1
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681a:	f7fa ff79 	bl	8001710 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006822:	f7fa ff75 	bl	8001710 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e1a8      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006834:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006840:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	4925      	ldr	r1, [pc, #148]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006850:	4313      	orrs	r3, r2
 8006852:	600b      	str	r3, [r1, #0]
 8006854:	e015      	b.n	8006882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <HAL_RCC_OscConfig+0x244>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fa ff58 	bl	8001710 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006864:	f7fa ff54 	bl	8001710 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e187      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006876:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d036      	beq.n	80068fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <HAL_RCC_OscConfig+0x248>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689c:	f7fa ff38 	bl	8001710 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068a4:	f7fa ff34 	bl	8001710 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e167      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_OscConfig+0x240>)
 80068b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0x200>
 80068c2:	e01b      	b.n	80068fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c4:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_RCC_OscConfig+0x248>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ca:	f7fa ff21 	bl	8001710 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d0:	e00e      	b.n	80068f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d2:	f7fa ff1d 	bl	8001710 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d907      	bls.n	80068f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e150      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
 80068e4:	40023800 	.word	0x40023800
 80068e8:	42470000 	.word	0x42470000
 80068ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f0:	4b88      	ldr	r3, [pc, #544]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80068f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1ea      	bne.n	80068d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8097 	beq.w	8006a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800690e:	4b81      	ldr	r3, [pc, #516]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
 800691e:	4b7d      	ldr	r3, [pc, #500]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	4a7c      	ldr	r2, [pc, #496]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006928:	6413      	str	r3, [r2, #64]	; 0x40
 800692a:	4b7a      	ldr	r3, [pc, #488]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006932:	60bb      	str	r3, [r7, #8]
 8006934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693a:	4b77      	ldr	r3, [pc, #476]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d118      	bne.n	8006978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006946:	4b74      	ldr	r3, [pc, #464]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a73      	ldr	r2, [pc, #460]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 800694c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006952:	f7fa fedd 	bl	8001710 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695a:	f7fa fed9 	bl	8001710 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e10c      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696c:	4b6a      	ldr	r3, [pc, #424]	; (8006b18 <HAL_RCC_OscConfig+0x474>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d106      	bne.n	800698e <HAL_RCC_OscConfig+0x2ea>
 8006980:	4b64      	ldr	r3, [pc, #400]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	4a63      	ldr	r2, [pc, #396]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	6713      	str	r3, [r2, #112]	; 0x70
 800698c:	e01c      	b.n	80069c8 <HAL_RCC_OscConfig+0x324>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b05      	cmp	r3, #5
 8006994:	d10c      	bne.n	80069b0 <HAL_RCC_OscConfig+0x30c>
 8006996:	4b5f      	ldr	r3, [pc, #380]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a5e      	ldr	r2, [pc, #376]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 800699c:	f043 0304 	orr.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	4b5c      	ldr	r3, [pc, #368]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a5b      	ldr	r2, [pc, #364]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
 80069ae:	e00b      	b.n	80069c8 <HAL_RCC_OscConfig+0x324>
 80069b0:	4b58      	ldr	r3, [pc, #352]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	4a57      	ldr	r2, [pc, #348]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	6713      	str	r3, [r2, #112]	; 0x70
 80069bc:	4b55      	ldr	r3, [pc, #340]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	4a54      	ldr	r2, [pc, #336]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069c2:	f023 0304 	bic.w	r3, r3, #4
 80069c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d015      	beq.n	80069fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fa fe9e 	bl	8001710 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d6:	e00a      	b.n	80069ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d8:	f7fa fe9a 	bl	8001710 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0cb      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ee:	4b49      	ldr	r3, [pc, #292]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0ee      	beq.n	80069d8 <HAL_RCC_OscConfig+0x334>
 80069fa:	e014      	b.n	8006a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fc:	f7fa fe88 	bl	8001710 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a02:	e00a      	b.n	8006a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a04:	f7fa fe84 	bl	8001710 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e0b5      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a1a:	4b3e      	ldr	r3, [pc, #248]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1ee      	bne.n	8006a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d105      	bne.n	8006a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a2c:	4b39      	ldr	r3, [pc, #228]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	4a38      	ldr	r2, [pc, #224]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80a1 	beq.w	8006b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a42:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 030c 	and.w	r3, r3, #12
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d05c      	beq.n	8006b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d141      	bne.n	8006ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a56:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <HAL_RCC_OscConfig+0x478>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fa fe58 	bl	8001710 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a64:	f7fa fe54 	bl	8001710 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e087      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a76:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1f0      	bne.n	8006a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69da      	ldr	r2, [r3, #28]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	019b      	lsls	r3, r3, #6
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	491b      	ldr	r1, [pc, #108]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aac:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <HAL_RCC_OscConfig+0x478>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab2:	f7fa fe2d 	bl	8001710 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aba:	f7fa fe29 	bl	8001710 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e05c      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0f0      	beq.n	8006aba <HAL_RCC_OscConfig+0x416>
 8006ad8:	e054      	b.n	8006b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ada:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <HAL_RCC_OscConfig+0x478>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae0:	f7fa fe16 	bl	8001710 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae8:	f7fa fe12 	bl	8001710 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e045      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_RCC_OscConfig+0x470>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f0      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x444>
 8006b06:	e03d      	b.n	8006b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d107      	bne.n	8006b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e038      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
 8006b14:	40023800 	.word	0x40023800
 8006b18:	40007000 	.word	0x40007000
 8006b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <HAL_RCC_OscConfig+0x4ec>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d028      	beq.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d121      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d11a      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b50:	4013      	ands	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d111      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d107      	bne.n	8006b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40023800 	.word	0x40023800

08006b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0cc      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba8:	4b68      	ldr	r3, [pc, #416]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d90c      	bls.n	8006bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb6:	4b65      	ldr	r3, [pc, #404]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bbe:	4b63      	ldr	r3, [pc, #396]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d001      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0b8      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d020      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006be8:	4b59      	ldr	r3, [pc, #356]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4a58      	ldr	r2, [pc, #352]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c00:	4b53      	ldr	r3, [pc, #332]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	4a52      	ldr	r2, [pc, #328]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c0c:	4b50      	ldr	r3, [pc, #320]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	494d      	ldr	r1, [pc, #308]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d044      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d107      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d119      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e07f      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d003      	beq.n	8006c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d107      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c52:	4b3f      	ldr	r3, [pc, #252]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e06f      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c62:	4b3b      	ldr	r3, [pc, #236]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e067      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c72:	4b37      	ldr	r3, [pc, #220]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f023 0203 	bic.w	r2, r3, #3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	4934      	ldr	r1, [pc, #208]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c84:	f7fa fd44 	bl	8001710 <HAL_GetTick>
 8006c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c8a:	e00a      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c8c:	f7fa fd40 	bl	8001710 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e04f      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca2:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 020c 	and.w	r2, r3, #12
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d1eb      	bne.n	8006c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d20c      	bcs.n	8006cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cca:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <HAL_RCC_ClockConfig+0x1b8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e032      	b.n	8006d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4916      	ldr	r1, [pc, #88]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d06:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	490e      	ldr	r1, [pc, #56]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d1a:	f000 f821 	bl	8006d60 <HAL_RCC_GetSysClockFreq>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	490a      	ldr	r1, [pc, #40]	; (8006d54 <HAL_RCC_ClockConfig+0x1c0>)
 8006d2c:	5ccb      	ldrb	r3, [r1, r3]
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <HAL_RCC_ClockConfig+0x1c4>)
 8006d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <HAL_RCC_ClockConfig+0x1c8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fa fca4 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40023c00 	.word	0x40023c00
 8006d50:	40023800 	.word	0x40023800
 8006d54:	0800e5e0 	.word	0x0800e5e0
 8006d58:	20000000 	.word	0x20000000
 8006d5c:	20000004 	.word	0x20000004

08006d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d64:	b094      	sub	sp, #80	; 0x50
 8006d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d70:	2300      	movs	r3, #0
 8006d72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d78:	4b79      	ldr	r3, [pc, #484]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 030c 	and.w	r3, r3, #12
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d00d      	beq.n	8006da0 <HAL_RCC_GetSysClockFreq+0x40>
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	f200 80e1 	bhi.w	8006f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_RCC_GetSysClockFreq+0x34>
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d003      	beq.n	8006d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d92:	e0db      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d94:	4b73      	ldr	r3, [pc, #460]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d98:	e0db      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d9a:	4b73      	ldr	r3, [pc, #460]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d9e:	e0d8      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006da0:	4b6f      	ldr	r3, [pc, #444]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006daa:	4b6d      	ldr	r3, [pc, #436]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d063      	beq.n	8006e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db6:	4b6a      	ldr	r3, [pc, #424]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	099b      	lsrs	r3, r3, #6
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dca:	2300      	movs	r3, #0
 8006dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	f04f 0000 	mov.w	r0, #0
 8006dda:	f04f 0100 	mov.w	r1, #0
 8006dde:	0159      	lsls	r1, r3, #5
 8006de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006de4:	0150      	lsls	r0, r2, #5
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4621      	mov	r1, r4
 8006dec:	1a51      	subs	r1, r2, r1
 8006dee:	6139      	str	r1, [r7, #16]
 8006df0:	4629      	mov	r1, r5
 8006df2:	eb63 0301 	sbc.w	r3, r3, r1
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e04:	4659      	mov	r1, fp
 8006e06:	018b      	lsls	r3, r1, #6
 8006e08:	4651      	mov	r1, sl
 8006e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e0e:	4651      	mov	r1, sl
 8006e10:	018a      	lsls	r2, r1, #6
 8006e12:	4651      	mov	r1, sl
 8006e14:	ebb2 0801 	subs.w	r8, r2, r1
 8006e18:	4659      	mov	r1, fp
 8006e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8006e1e:	f04f 0200 	mov.w	r2, #0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e32:	4690      	mov	r8, r2
 8006e34:	4699      	mov	r9, r3
 8006e36:	4623      	mov	r3, r4
 8006e38:	eb18 0303 	adds.w	r3, r8, r3
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	462b      	mov	r3, r5
 8006e40:	eb49 0303 	adc.w	r3, r9, r3
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e52:	4629      	mov	r1, r5
 8006e54:	024b      	lsls	r3, r1, #9
 8006e56:	4621      	mov	r1, r4
 8006e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	024a      	lsls	r2, r1, #9
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e66:	2200      	movs	r2, #0
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e70:	f7f9 f9aa 	bl	80001c8 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e7c:	e058      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e7e:	4b38      	ldr	r3, [pc, #224]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	099b      	lsrs	r3, r3, #6
 8006e84:	2200      	movs	r2, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	4611      	mov	r1, r2
 8006e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e8e:	623b      	str	r3, [r7, #32]
 8006e90:	2300      	movs	r3, #0
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
 8006e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	f04f 0000 	mov.w	r0, #0
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	0159      	lsls	r1, r3, #5
 8006ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eaa:	0150      	lsls	r0, r2, #5
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8006ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	00eb      	lsls	r3, r5, #3
 8006ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ee6:	00e2      	lsls	r2, r4, #3
 8006ee8:	4614      	mov	r4, r2
 8006eea:	461d      	mov	r5, r3
 8006eec:	4643      	mov	r3, r8
 8006eee:	18e3      	adds	r3, r4, r3
 8006ef0:	603b      	str	r3, [r7, #0]
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	eb45 0303 	adc.w	r3, r5, r3
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f06:	4629      	mov	r1, r5
 8006f08:	028b      	lsls	r3, r1, #10
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f10:	4621      	mov	r1, r4
 8006f12:	028a      	lsls	r2, r1, #10
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	61fa      	str	r2, [r7, #28]
 8006f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f24:	f7f9 f950 	bl	80001c8 <__aeabi_uldivmod>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f30:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f4a:	e002      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3750      	adds	r7, #80	; 0x50
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f5e:	bf00      	nop
 8006f60:	40023800 	.word	0x40023800
 8006f64:	00f42400 	.word	0x00f42400
 8006f68:	007a1200 	.word	0x007a1200

08006f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f70:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f72:	681b      	ldr	r3, [r3, #0]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000000 	.word	0x20000000

08006f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f88:	f7ff fff0 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	0a9b      	lsrs	r3, r3, #10
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4903      	ldr	r1, [pc, #12]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	0800e5f0 	.word	0x0800e5f0

08006fac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d035      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fd4:	4b62      	ldr	r3, [pc, #392]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fda:	f7fa fb99 	bl	8001710 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fe2:	f7fa fb95 	bl	8001710 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e0b0      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ff4:	4b5b      	ldr	r3, [pc, #364]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f0      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	019a      	lsls	r2, r3, #6
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	071b      	lsls	r3, r3, #28
 800700c:	4955      	ldr	r1, [pc, #340]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007014:	4b52      	ldr	r3, [pc, #328]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800701a:	f7fa fb79 	bl	8001710 <HAL_GetTick>
 800701e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007020:	e008      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007022:	f7fa fb75 	bl	8001710 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e090      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007034:	4b4b      	ldr	r3, [pc, #300]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f0      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8083 	beq.w	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	4b44      	ldr	r3, [pc, #272]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	4a43      	ldr	r2, [pc, #268]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
 800705e:	4b41      	ldr	r3, [pc, #260]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800706a:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a3e      	ldr	r2, [pc, #248]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007074:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007076:	f7fa fb4b 	bl	8001710 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800707e:	f7fa fb47 	bl	8001710 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e062      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007090:	4b35      	ldr	r3, [pc, #212]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f0      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800709c:	4b31      	ldr	r3, [pc, #196]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d02f      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d028      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ba:	4b2a      	ldr	r3, [pc, #168]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070c4:	4b29      	ldr	r3, [pc, #164]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070ca:	4b28      	ldr	r3, [pc, #160]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070d0:	4a24      	ldr	r2, [pc, #144]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070d6:	4b23      	ldr	r3, [pc, #140]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d114      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070e2:	f7fa fb15 	bl	8001710 <HAL_GetTick>
 80070e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e8:	e00a      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ea:	f7fa fb11 	bl	8001710 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d901      	bls.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e02a      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007100:	4b18      	ldr	r3, [pc, #96]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0ee      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007118:	d10d      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	490d      	ldr	r1, [pc, #52]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007130:	4313      	orrs	r3, r2
 8007132:	608b      	str	r3, [r1, #8]
 8007134:	e005      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800713c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007140:	6093      	str	r3, [r2, #8]
 8007142:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714e:	4905      	ldr	r1, [pc, #20]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007150:	4313      	orrs	r3, r2
 8007152:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	42470068 	.word	0x42470068
 8007164:	40023800 	.word	0x40023800
 8007168:	40007000 	.word	0x40007000
 800716c:	42470e40 	.word	0x42470e40

08007170 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2203      	movs	r2, #3
 800717c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800717e:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007184:	099b      	lsrs	r3, r3, #6
 8007186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007194:	0f1b      	lsrs	r3, r3, #28
 8007196:	f003 0207 	and.w	r2, r3, #7
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80071a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80071a8:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	40023800 	.word	0x40023800

080071c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d13e      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80071e6:	4b23      	ldr	r3, [pc, #140]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d12f      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80071fc:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071fe:	617b      	str	r3, [r7, #20]
          break;
 8007200:	e02f      	b.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800720e:	d108      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007210:	4b18      	ldr	r3, [pc, #96]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007218:	4a18      	ldr	r2, [pc, #96]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	e007      	b.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007222:	4b14      	ldr	r3, [pc, #80]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007238:	099b      	lsrs	r3, r3, #6
 800723a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	fb02 f303 	mul.w	r3, r2, r3
 8007244:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800724c:	0f1b      	lsrs	r3, r3, #28
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]
          break;
 800725a:	e002      	b.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
          break;
 8007260:	bf00      	nop
        }
      }
      break;
 8007262:	bf00      	nop
    }
  }
  return frequency;
 8007264:	697b      	ldr	r3, [r7, #20]
}
 8007266:	4618      	mov	r0, r3
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800
 8007278:	00bb8000 	.word	0x00bb8000
 800727c:	007a1200 	.word	0x007a1200
 8007280:	00f42400 	.word	0x00f42400

08007284 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007284:	b084      	sub	sp, #16
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	f107 001c 	add.w	r0, r7, #28
 8007292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	2b01      	cmp	r3, #1
 800729a:	d122      	bne.n	80072e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80072b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d105      	bne.n	80072d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f9c0 	bl	800765c <USB_CoreReset>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	e01a      	b.n	8007318 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f9b4 	bl	800765c <USB_CoreReset>
 80072f4:	4603      	mov	r3, r0
 80072f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
 800730a:	e005      	b.n	8007318 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	2b01      	cmp	r3, #1
 800731c:	d10b      	bne.n	8007336 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f043 0206 	orr.w	r2, r3, #6
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f043 0220 	orr.w	r2, r3, #32
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007342:	b004      	add	sp, #16
 8007344:	4770      	bx	lr

08007346 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f043 0201 	orr.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f023 0201 	bic.w	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d115      	bne.n	80073d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073b8:	2001      	movs	r0, #1
 80073ba:	f7fa f9b5 	bl	8001728 <HAL_Delay>
      ms++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f93a 	bl	800763e <USB_GetMode>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d01e      	beq.n	800740e <USB_SetCurrentMode+0x84>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b31      	cmp	r3, #49	; 0x31
 80073d4:	d9f0      	bls.n	80073b8 <USB_SetCurrentMode+0x2e>
 80073d6:	e01a      	b.n	800740e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d115      	bne.n	800740a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073ea:	2001      	movs	r0, #1
 80073ec:	f7fa f99c 	bl	8001728 <HAL_Delay>
      ms++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f921 	bl	800763e <USB_GetMode>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <USB_SetCurrentMode+0x84>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b31      	cmp	r3, #49	; 0x31
 8007406:	d9f0      	bls.n	80073ea <USB_SetCurrentMode+0x60>
 8007408:	e001      	b.n	800740e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e005      	b.n	800741a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b32      	cmp	r3, #50	; 0x32
 8007412:	d101      	bne.n	8007418 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e000      	b.n	800741a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <USB_FlushTxFifo+0x64>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d901      	bls.n	8007444 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e01b      	b.n	800747c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	daf2      	bge.n	8007432 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	019b      	lsls	r3, r3, #6
 8007454:	f043 0220 	orr.w	r2, r3, #32
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4a08      	ldr	r2, [pc, #32]	; (8007488 <USB_FlushTxFifo+0x64>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d901      	bls.n	800746e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e006      	b.n	800747c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b20      	cmp	r3, #32
 8007478:	d0f0      	beq.n	800745c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	00030d40 	.word	0x00030d40

0800748c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a11      	ldr	r2, [pc, #68]	; (80074e8 <USB_FlushRxFifo+0x5c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d901      	bls.n	80074aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e018      	b.n	80074dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	daf2      	bge.n	8007498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2210      	movs	r2, #16
 80074ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <USB_FlushRxFifo+0x5c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d901      	bls.n	80074ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e006      	b.n	80074dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d0f0      	beq.n	80074bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	00030d40 	.word	0x00030d40

080074ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b089      	sub	sp, #36	; 0x24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4611      	mov	r1, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	460b      	mov	r3, r1
 80074fc:	71fb      	strb	r3, [r7, #7]
 80074fe:	4613      	mov	r3, r2
 8007500:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800750a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800750e:	2b00      	cmp	r3, #0
 8007510:	d123      	bne.n	800755a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007512:	88bb      	ldrh	r3, [r7, #4]
 8007514:	3303      	adds	r3, #3
 8007516:	089b      	lsrs	r3, r3, #2
 8007518:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800751a:	2300      	movs	r3, #0
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	e018      	b.n	8007552 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	031a      	lsls	r2, r3, #12
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	4413      	add	r3, r2
 8007528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752c:	461a      	mov	r2, r3
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	3301      	adds	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	3301      	adds	r3, #1
 800753e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	3301      	adds	r3, #1
 8007544:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	3301      	adds	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	3301      	adds	r3, #1
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	429a      	cmp	r2, r3
 8007558:	d3e2      	bcc.n	8007520 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3724      	adds	r7, #36	; 0x24
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007568:	b480      	push	{r7}
 800756a:	b08b      	sub	sp, #44	; 0x2c
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	089b      	lsrs	r3, r3, #2
 8007582:	b29b      	uxth	r3, r3
 8007584:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800758e:	2300      	movs	r3, #0
 8007590:	623b      	str	r3, [r7, #32]
 8007592:	e014      	b.n	80075be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	601a      	str	r2, [r3, #0]
    pDest++;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	3301      	adds	r3, #1
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	3301      	adds	r3, #1
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	3301      	adds	r3, #1
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	3301      	adds	r3, #1
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	3301      	adds	r3, #1
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	6a3a      	ldr	r2, [r7, #32]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d3e6      	bcc.n	8007594 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075c6:	8bfb      	ldrh	r3, [r7, #30]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01e      	beq.n	800760a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d6:	461a      	mov	r2, r3
 80075d8:	f107 0310 	add.w	r3, r7, #16
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	701a      	strb	r2, [r3, #0]
      i++;
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	3301      	adds	r3, #1
 80075f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	3301      	adds	r3, #1
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075fe:	8bfb      	ldrh	r3, [r7, #30]
 8007600:	3b01      	subs	r3, #1
 8007602:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007604:	8bfb      	ldrh	r3, [r7, #30]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1ea      	bne.n	80075e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800760c:	4618      	mov	r0, r3
 800760e:	372c      	adds	r7, #44	; 0x2c
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4013      	ands	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f003 0301 	and.w	r3, r3, #1
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <USB_CoreReset+0x64>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e01b      	b.n	80076b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	daf2      	bge.n	8007668 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f043 0201 	orr.w	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <USB_CoreReset+0x64>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d901      	bls.n	80076a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e006      	b.n	80076b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d0f0      	beq.n	8007692 <USB_CoreReset+0x36>

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	00030d40 	.word	0x00030d40

080076c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076c4:	b084      	sub	sp, #16
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076e4:	461a      	mov	r2, r3
 80076e6:	2300      	movs	r3, #0
 80076e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007716:	2b00      	cmp	r3, #0
 8007718:	d018      	beq.n	800774c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d10a      	bne.n	8007736 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800772e:	f043 0304 	orr.w	r3, r3, #4
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	e014      	b.n	8007760 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007744:	f023 0304 	bic.w	r3, r3, #4
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e009      	b.n	8007760 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800775a:	f023 0304 	bic.w	r3, r3, #4
 800775e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007760:	2110      	movs	r1, #16
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fe5e 	bl	8007424 <USB_FlushTxFifo>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fe8a 	bl	800748c <USB_FlushRxFifo>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	e015      	b.n	80077b4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007794:	461a      	mov	r2, r3
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a8:	461a      	mov	r2, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	3301      	adds	r3, #1
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3e5      	bcc.n	8007788 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a13      	ldr	r2, [pc, #76]	; (8007830 <USB_HostInit+0x16c>)
 80077e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a13      	ldr	r2, [pc, #76]	; (8007834 <USB_HostInit+0x170>)
 80077e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80077ec:	e009      	b.n	8007802 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2280      	movs	r2, #128	; 0x80
 80077f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a10      	ldr	r2, [pc, #64]	; (8007838 <USB_HostInit+0x174>)
 80077f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a0f      	ldr	r2, [pc, #60]	; (800783c <USB_HostInit+0x178>)
 80077fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f043 0210 	orr.w	r2, r3, #16
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <USB_HostInit+0x17c>)
 800781a:	4313      	orrs	r3, r2
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007820:	7dfb      	ldrb	r3, [r7, #23]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800782c:	b004      	add	sp, #16
 800782e:	4770      	bx	lr
 8007830:	01000200 	.word	0x01000200
 8007834:	00e00300 	.word	0x00e00300
 8007838:	00600080 	.word	0x00600080
 800783c:	004000e0 	.word	0x004000e0
 8007840:	a3200008 	.word	0xa3200008

08007844 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800787c:	4313      	orrs	r3, r2
 800787e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d107      	bne.n	8007896 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800788c:	461a      	mov	r2, r3
 800788e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007892:	6053      	str	r3, [r2, #4]
 8007894:	e009      	b.n	80078aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d106      	bne.n	80078aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078a2:	461a      	mov	r2, r3
 80078a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80078a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80078e8:	2064      	movs	r0, #100	; 0x64
 80078ea:	f7f9 ff1d 	bl	8001728 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078fc:	200a      	movs	r0, #10
 80078fe:	f7f9 ff13 	bl	8001728 <HAL_Delay>

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007930:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d109      	bne.n	8007950 <USB_DriveVbus+0x44>
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d106      	bne.n	8007950 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800794a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800794e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795a:	d109      	bne.n	8007970 <USB_DriveVbus+0x64>
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800796a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800796e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	0c5b      	lsrs	r3, r3, #17
 800799c:	f003 0303 	and.w	r3, r3, #3
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	b29b      	uxth	r3, r3
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
	...

080079d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	461a      	mov	r2, r3
 80079de:	4603      	mov	r3, r0
 80079e0:	70fb      	strb	r3, [r7, #3]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70bb      	strb	r3, [r7, #2]
 80079e6:	4613      	mov	r3, r2
 80079e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fe:	461a      	mov	r2, r3
 8007a00:	f04f 33ff 	mov.w	r3, #4294967295
 8007a04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d87e      	bhi.n	8007b0c <USB_HC_Init+0x13c>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <USB_HC_Init+0x44>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007acf 	.word	0x08007acf
 8007a1c:	08007a25 	.word	0x08007a25
 8007a20:	08007a91 	.word	0x08007a91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a30:	461a      	mov	r2, r3
 8007a32:	f240 439d 	movw	r3, #1181	; 0x49d
 8007a36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007a38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da10      	bge.n	8007a62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007a60:	e057      	b.n	8007b12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d051      	beq.n	8007b12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	78fa      	ldrb	r2, [r7, #3]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a8c:	60d3      	str	r3, [r2, #12]
      break;
 8007a8e:	e040      	b.n	8007b12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007aa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007aa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	da34      	bge.n	8007b16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	78fa      	ldrb	r2, [r7, #3]
 8007abc:	0151      	lsls	r1, r2, #5
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	440a      	add	r2, r1
 8007ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007acc:	e023      	b.n	8007b16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ada:	461a      	mov	r2, r3
 8007adc:	f240 2325 	movw	r3, #549	; 0x225
 8007ae0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ae2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da17      	bge.n	8007b1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007b08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b0a:	e006      	b.n	8007b1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	77fb      	strb	r3, [r7, #31]
      break;
 8007b10:	e004      	b.n	8007b1c <USB_HC_Init+0x14c>
      break;
 8007b12:	bf00      	nop
 8007b14:	e002      	b.n	8007b1c <USB_HC_Init+0x14c>
      break;
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <USB_HC_Init+0x14c>
      break;
 8007b1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b36:	f043 0302 	orr.w	r3, r3, #2
 8007b3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b50:	6939      	ldr	r1, [r7, #16]
 8007b52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007b56:	4313      	orrs	r3, r2
 8007b58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007b66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da03      	bge.n	8007b76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	e001      	b.n	8007b7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff feff 	bl	800797e <USB_GetHostSpeed>
 8007b80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d106      	bne.n	8007b98 <USB_HC_Init+0x1c8>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d003      	beq.n	8007b98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	e001      	b.n	8007b9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b9c:	787b      	ldrb	r3, [r7, #1]
 8007b9e:	059b      	lsls	r3, r3, #22
 8007ba0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ba4:	78bb      	ldrb	r3, [r7, #2]
 8007ba6:	02db      	lsls	r3, r3, #11
 8007ba8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007bae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bb2:	049b      	lsls	r3, r3, #18
 8007bb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007bb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007bba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007bc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	0159      	lsls	r1, r3, #5
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	440b      	add	r3, r1
 8007bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bd8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007bda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d003      	beq.n	8007bea <USB_HC_Init+0x21a>
 8007be2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10f      	bne.n	8007c0a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3720      	adds	r7, #32
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08c      	sub	sp, #48	; 0x30
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d02d      	beq.n	8007c9a <USB_HC_StartXfer+0x86>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	791b      	ldrb	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d129      	bne.n	8007c9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d117      	bne.n	8007c7c <USB_HC_StartXfer+0x68>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	79db      	ldrb	r3, [r3, #7]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <USB_HC_StartXfer+0x48>
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	79db      	ldrb	r3, [r3, #7]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d10f      	bne.n	8007c7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	0151      	lsls	r1, r2, #5
 8007c6e:	6a3a      	ldr	r2, [r7, #32]
 8007c70:	440a      	add	r2, r1
 8007c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <USB_HC_StartXfer+0x86>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	795b      	ldrb	r3, [r3, #5]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d107      	bne.n	8007c9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 fa0f 	bl	80080b4 <USB_DoPing>
      return HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e0f8      	b.n	8007e8c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d018      	beq.n	8007cd4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	8912      	ldrh	r2, [r2, #8]
 8007caa:	4413      	add	r3, r2
 8007cac:	3b01      	subs	r3, #1
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	8912      	ldrh	r2, [r2, #8]
 8007cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007cb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007cba:	8b7b      	ldrh	r3, [r7, #26]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d90b      	bls.n	8007cd8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007cc0:	8b7b      	ldrh	r3, [r7, #26]
 8007cc2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007cc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	8912      	ldrh	r2, [r2, #8]
 8007cca:	fb03 f202 	mul.w	r2, r3, r2
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	611a      	str	r2, [r3, #16]
 8007cd2:	e001      	b.n	8007cd8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	78db      	ldrb	r3, [r3, #3]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	8912      	ldrh	r2, [r2, #8]
 8007ce6:	fb03 f202 	mul.w	r2, r3, r2
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	611a      	str	r2, [r3, #16]
 8007cee:	e003      	b.n	8007cf8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	695a      	ldr	r2, [r3, #20]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d02:	04d9      	lsls	r1, r3, #19
 8007d04:	4b63      	ldr	r3, [pc, #396]	; (8007e94 <USB_HC_StartXfer+0x280>)
 8007d06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	7a9b      	ldrb	r3, [r3, #10]
 8007d0e:	075b      	lsls	r3, r3, #29
 8007d10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d14:	69f9      	ldr	r1, [r7, #28]
 8007d16:	0148      	lsls	r0, r1, #5
 8007d18:	6a39      	ldr	r1, [r7, #32]
 8007d1a:	4401      	add	r1, r0
 8007d1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	68d9      	ldr	r1, [r3, #12]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3a:	460a      	mov	r2, r1
 8007d3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bf0c      	ite	eq
 8007d4e:	2301      	moveq	r3, #1
 8007d50:	2300      	movne	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	7e7b      	ldrb	r3, [r7, #25]
 8007d86:	075b      	lsls	r3, r3, #29
 8007d88:	69f9      	ldr	r1, [r7, #28]
 8007d8a:	0148      	lsls	r0, r1, #5
 8007d8c:	6a39      	ldr	r1, [r7, #32]
 8007d8e:	4401      	add	r1, r0
 8007d90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	78db      	ldrb	r3, [r3, #3]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dbe:	613b      	str	r3, [r7, #16]
 8007dc0:	e003      	b.n	8007dca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dc8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dd0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dde:	461a      	mov	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e04e      	b.n	8007e8c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	78db      	ldrb	r3, [r3, #3]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d149      	bne.n	8007e8a <USB_HC_StartXfer+0x276>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d045      	beq.n	8007e8a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	79db      	ldrb	r3, [r3, #7]
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d830      	bhi.n	8007e68 <USB_HC_StartXfer+0x254>
 8007e06:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <USB_HC_StartXfer+0x1f8>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e1d 	.word	0x08007e1d
 8007e10:	08007e41 	.word	0x08007e41
 8007e14:	08007e1d 	.word	0x08007e1d
 8007e18:	08007e41 	.word	0x08007e41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	3303      	adds	r3, #3
 8007e22:	089b      	lsrs	r3, r3, #2
 8007e24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e26:	8afa      	ldrh	r2, [r7, #22]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d91c      	bls.n	8007e6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f043 0220 	orr.w	r2, r3, #32
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e3e:	e015      	b.n	8007e6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	3303      	adds	r3, #3
 8007e46:	089b      	lsrs	r3, r3, #2
 8007e48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e4a:	8afa      	ldrh	r2, [r7, #22]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d90a      	bls.n	8007e70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e66:	e003      	b.n	8007e70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007e68:	bf00      	nop
 8007e6a:	e002      	b.n	8007e72 <USB_HC_StartXfer+0x25e>
        break;
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <USB_HC_StartXfer+0x25e>
        break;
 8007e70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	68d9      	ldr	r1, [r3, #12]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	785a      	ldrb	r2, [r3, #1]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	2000      	movs	r0, #0
 8007e82:	9000      	str	r0, [sp, #0]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7ff fb31 	bl	80074ec <USB_WritePacket>
  }

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3728      	adds	r7, #40	; 0x28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	1ff80000 	.word	0x1ff80000

08007e98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	b29b      	uxth	r3, r3
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b089      	sub	sp, #36	; 0x24
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	0c9b      	lsrs	r3, r3, #18
 8007ee2:	f003 0303 	and.w	r3, r3, #3
 8007ee6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	0fdb      	lsrs	r3, r3, #31
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d104      	bne.n	8007f14 <USB_HC_Halt+0x5a>
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e0c8      	b.n	80080a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <USB_HC_Halt+0x66>
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d163      	bne.n	8007fe8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	0151      	lsls	r1, r2, #5
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	440a      	add	r2, r1
 8007f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f3e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f040 80ab 	bne.w	80080a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d133      	bne.n	8007fc2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	0151      	lsls	r1, r2, #5
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	440a      	add	r2, r1
 8007f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f98:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fa6:	d81d      	bhi.n	8007fe4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fbe:	d0ec      	beq.n	8007f9a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fc0:	e070      	b.n	80080a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	0151      	lsls	r1, r2, #5
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	440a      	add	r2, r1
 8007fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fe0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fe2:	e05f      	b.n	80080a4 <USB_HC_Halt+0x1ea>
            break;
 8007fe4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fe6:	e05d      	b.n	80080a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008006:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d133      	bne.n	8008080 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008036:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008056:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008064:	d81d      	bhi.n	80080a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800807c:	d0ec      	beq.n	8008058 <USB_HC_Halt+0x19e>
 800807e:	e011      	b.n	80080a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	440a      	add	r2, r1
 8008096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800809a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	e000      	b.n	80080a4 <USB_HC_Halt+0x1ea>
          break;
 80080a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3724      	adds	r7, #36	; 0x24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
	...

080080b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80080c8:	2301      	movs	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	04da      	lsls	r2, r3, #19
 80080d0:	4b15      	ldr	r3, [pc, #84]	; (8008128 <USB_DoPing+0x74>)
 80080d2:	4013      	ands	r3, r2
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008104:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	4413      	add	r3, r2
 800810e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008112:	461a      	mov	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	1ff80000 	.word	0x1ff80000

0800812c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff f911 	bl	8007368 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008146:	2110      	movs	r1, #16
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff f96b 	bl	8007424 <USB_FlushTxFifo>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff f997 	bl	800748c <USB_FlushRxFifo>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	e01f      	b.n	80081ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	4413      	add	r3, r2
 8008176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008184:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800818c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008194:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	4413      	add	r3, r2
 800819e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a2:	461a      	mov	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	3301      	adds	r3, #1
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b0f      	cmp	r3, #15
 80081b2:	d9dc      	bls.n	800816e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	e034      	b.n	8008224 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ee:	461a      	mov	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008200:	d80c      	bhi.n	800821c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	4413      	add	r3, r2
 800820a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008218:	d0ec      	beq.n	80081f4 <USB_StopHost+0xc8>
 800821a:	e000      	b.n	800821e <USB_StopHost+0xf2>
        break;
 800821c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	3301      	adds	r3, #1
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b0f      	cmp	r3, #15
 8008228:	d9c7      	bls.n	80081ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008230:	461a      	mov	r2, r3
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f04f 32ff 	mov.w	r2, #4294967295
 800823e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff f880 	bl	8007346 <USB_EnableGlobalInt>

  return ret;
 8008246:	7ffb      	ldrb	r3, [r7, #31]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008254:	4904      	ldr	r1, [pc, #16]	; (8008268 <MX_FATFS_Init+0x18>)
 8008256:	4805      	ldr	r0, [pc, #20]	; (800826c <MX_FATFS_Init+0x1c>)
 8008258:	f005 fc98 	bl	800db8c <FATFS_LinkDriver>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	4b03      	ldr	r3, [pc, #12]	; (8008270 <MX_FATFS_Init+0x20>)
 8008262:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008264:	bf00      	nop
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20001450 	.word	0x20001450
 800826c:	0800e600 	.word	0x0800e600
 8008270:	2000144c 	.word	0x2000144c

08008274 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008278:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800827a:	4618      	mov	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	4619      	mov	r1, r3
 80082ae:	4808      	ldr	r0, [pc, #32]	; (80082d0 <USBH_status+0x34>)
 80082b0:	f000 fe32 	bl	8008f18 <USBH_MSC_UnitIsReady>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <USBH_status+0x24>
  {
    res = RES_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
 80082be:	e001      	b.n	80082c4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	200016b8 	.word	0x200016b8

080082d4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b094      	sub	sp, #80	; 0x50
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	4603      	mov	r3, r0
 80082e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80082ea:	7bf9      	ldrb	r1, [r7, #15]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	4813      	ldr	r0, [pc, #76]	; (8008344 <USBH_read+0x70>)
 80082f6:	f000 fe59 	bl	8008fac <USBH_MSC_Read>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <USBH_read+0x34>
  {
    res = RES_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008306:	e017      	b.n	8008338 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008308:	f107 0210 	add.w	r2, r7, #16
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	4619      	mov	r1, r3
 8008310:	480c      	ldr	r0, [pc, #48]	; (8008344 <USBH_read+0x70>)
 8008312:	f000 fe27 	bl	8008f64 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008316:	7f7b      	ldrb	r3, [r7, #29]
 8008318:	2b3a      	cmp	r3, #58	; 0x3a
 800831a:	d005      	beq.n	8008328 <USBH_read+0x54>
 800831c:	2b3a      	cmp	r3, #58	; 0x3a
 800831e:	dc07      	bgt.n	8008330 <USBH_read+0x5c>
 8008320:	2b04      	cmp	r3, #4
 8008322:	d001      	beq.n	8008328 <USBH_read+0x54>
 8008324:	2b28      	cmp	r3, #40	; 0x28
 8008326:	d103      	bne.n	8008330 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008328:	2303      	movs	r3, #3
 800832a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800832e:	e003      	b.n	8008338 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008336:	bf00      	nop
    }
  }

  return res;
 8008338:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800833c:	4618      	mov	r0, r3
 800833e:	3748      	adds	r7, #72	; 0x48
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	200016b8 	.word	0x200016b8

08008348 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b094      	sub	sp, #80	; 0x50
 800834c:	af02      	add	r7, sp, #8
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800835e:	7bf9      	ldrb	r1, [r7, #15]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	4817      	ldr	r0, [pc, #92]	; (80083c8 <USBH_write+0x80>)
 800836a:	f000 fe88 	bl	800907e <USBH_MSC_Write>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <USBH_write+0x34>
  {
    res = RES_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800837a:	e01f      	b.n	80083bc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800837c:	f107 0210 	add.w	r2, r7, #16
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4619      	mov	r1, r3
 8008384:	4810      	ldr	r0, [pc, #64]	; (80083c8 <USBH_write+0x80>)
 8008386:	f000 fded 	bl	8008f64 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800838a:	7f7b      	ldrb	r3, [r7, #29]
 800838c:	2b3a      	cmp	r3, #58	; 0x3a
 800838e:	d00d      	beq.n	80083ac <USBH_write+0x64>
 8008390:	2b3a      	cmp	r3, #58	; 0x3a
 8008392:	dc0f      	bgt.n	80083b4 <USBH_write+0x6c>
 8008394:	2b28      	cmp	r3, #40	; 0x28
 8008396:	d009      	beq.n	80083ac <USBH_write+0x64>
 8008398:	2b28      	cmp	r3, #40	; 0x28
 800839a:	dc0b      	bgt.n	80083b4 <USBH_write+0x6c>
 800839c:	2b04      	cmp	r3, #4
 800839e:	d005      	beq.n	80083ac <USBH_write+0x64>
 80083a0:	2b27      	cmp	r3, #39	; 0x27
 80083a2:	d107      	bne.n	80083b4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80083a4:	2302      	movs	r3, #2
 80083a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083aa:	e007      	b.n	80083bc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80083ac:	2303      	movs	r3, #3
 80083ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083b2:	e003      	b.n	80083bc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083ba:	bf00      	nop
    }
  }

  return res;
 80083bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3748      	adds	r7, #72	; 0x48
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	200016b8 	.word	0x200016b8

080083cc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b090      	sub	sp, #64	; 0x40
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	603a      	str	r2, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]
 80083d8:	460b      	mov	r3, r1
 80083da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80083e2:	79bb      	ldrb	r3, [r7, #6]
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d852      	bhi.n	800848e <USBH_ioctl+0xc2>
 80083e8:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <USBH_ioctl+0x24>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008401 	.word	0x08008401
 80083f4:	08008409 	.word	0x08008409
 80083f8:	08008433 	.word	0x08008433
 80083fc:	0800845f 	.word	0x0800845f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008406:	e045      	b.n	8008494 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008408:	f107 0208 	add.w	r2, r7, #8
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	4619      	mov	r1, r3
 8008410:	4823      	ldr	r0, [pc, #140]	; (80084a0 <USBH_ioctl+0xd4>)
 8008412:	f000 fda7 	bl	8008f64 <USBH_MSC_GetLUNInfo>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008428:	e034      	b.n	8008494 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008430:	e030      	b.n	8008494 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	4619      	mov	r1, r3
 800843a:	4819      	ldr	r0, [pc, #100]	; (80084a0 <USBH_ioctl+0xd4>)
 800843c:	f000 fd92 	bl	8008f64 <USBH_MSC_GetLUNInfo>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d107      	bne.n	8008456 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008446:	8a3b      	ldrh	r3, [r7, #16]
 8008448:	461a      	mov	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008454:	e01e      	b.n	8008494 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800845c:	e01a      	b.n	8008494 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800845e:	f107 0208 	add.w	r2, r7, #8
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	4619      	mov	r1, r3
 8008466:	480e      	ldr	r0, [pc, #56]	; (80084a0 <USBH_ioctl+0xd4>)
 8008468:	f000 fd7c 	bl	8008f64 <USBH_MSC_GetLUNInfo>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008472:	8a3b      	ldrh	r3, [r7, #16]
 8008474:	0a5b      	lsrs	r3, r3, #9
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008484:	e006      	b.n	8008494 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800848c:	e002      	b.n	8008494 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800848e:	2304      	movs	r3, #4
 8008490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008494:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008498:	4618      	mov	r0, r3
 800849a:	3740      	adds	r7, #64	; 0x40
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	200016b8 	.word	0x200016b8

080084a4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b089      	sub	sp, #36	; 0x24
 80084a8:	af04      	add	r7, sp, #16
 80084aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b2:	7919      	ldrb	r1, [r3, #4]
 80084b4:	2350      	movs	r3, #80	; 0x50
 80084b6:	2206      	movs	r2, #6
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 fc6b 	bl	8009d94 <USBH_FindInterface>
 80084be:	4603      	mov	r3, r0
 80084c0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2bff      	cmp	r3, #255	; 0xff
 80084c6:	d002      	beq.n	80084ce <USBH_MSC_InterfaceInit+0x2a>
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d901      	bls.n	80084d2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80084ce:	2302      	movs	r3, #2
 80084d0:	e106      	b.n	80086e0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 fc40 	bl	8009d5c <USBH_SelectInterface>
 80084dc:	4603      	mov	r3, r0
 80084de:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80084e6:	2302      	movs	r3, #2
 80084e8:	e0fa      	b.n	80086e0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80084f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80084f4:	f005 fedc 	bl	800e2b0 <malloc>
 80084f8:	4603      	mov	r3, r0
 80084fa:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800850c:	2302      	movs	r3, #2
 800850e:	e0e7      	b.n	80086e0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008514:	2100      	movs	r1, #0
 8008516:	68b8      	ldr	r0, [r7, #8]
 8008518:	f005 fee8 	bl	800e2ec <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	211a      	movs	r1, #26
 8008522:	fb01 f303 	mul.w	r3, r1, r3
 8008526:	4413      	add	r3, r2
 8008528:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b25b      	sxtb	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	da16      	bge.n	8008562 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	211a      	movs	r1, #26
 800853a:	fb01 f303 	mul.w	r3, r1, r3
 800853e:	4413      	add	r3, r2
 8008540:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	211a      	movs	r1, #26
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	4413      	add	r3, r2
 8008556:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800855a:	881a      	ldrh	r2, [r3, #0]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	815a      	strh	r2, [r3, #10]
 8008560:	e015      	b.n	800858e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	211a      	movs	r1, #26
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	4413      	add	r3, r2
 800856e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008572:	781a      	ldrb	r2, [r3, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	211a      	movs	r1, #26
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	4413      	add	r3, r2
 8008584:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008588:	881a      	ldrh	r2, [r3, #0]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	211a      	movs	r1, #26
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	4413      	add	r3, r2
 800859a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	b25b      	sxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	da16      	bge.n	80085d4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	211a      	movs	r1, #26
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	4413      	add	r3, r2
 80085b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	211a      	movs	r1, #26
 80085c2:	fb01 f303 	mul.w	r3, r1, r3
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80085cc:	881a      	ldrh	r2, [r3, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	815a      	strh	r2, [r3, #10]
 80085d2:	e015      	b.n	8008600 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	211a      	movs	r1, #26
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	4413      	add	r3, r2
 80085e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085e4:	781a      	ldrb	r2, [r3, #0]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	211a      	movs	r1, #26
 80085f0:	fb01 f303 	mul.w	r3, r1, r3
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80085fa:	881a      	ldrh	r2, [r3, #0]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2200      	movs	r2, #0
 800860a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	799b      	ldrb	r3, [r3, #6]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f002 fed6 	bl	800b3ca <USBH_AllocPipe>
 800861e:	4603      	mov	r3, r0
 8008620:	461a      	mov	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	79db      	ldrb	r3, [r3, #7]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f002 fecc 	bl	800b3ca <USBH_AllocPipe>
 8008632:	4603      	mov	r3, r0
 8008634:	461a      	mov	r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fdc4 	bl	80091c8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	799b      	ldrb	r3, [r3, #6]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01e      	beq.n	8008686 <USBH_MSC_InterfaceInit+0x1e2>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	891b      	ldrh	r3, [r3, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01a      	beq.n	8008686 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	7959      	ldrb	r1, [r3, #5]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	7998      	ldrb	r0, [r3, #6]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	8912      	ldrh	r2, [r2, #8]
 8008668:	9202      	str	r2, [sp, #8]
 800866a:	2202      	movs	r2, #2
 800866c:	9201      	str	r2, [sp, #4]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	4623      	mov	r3, r4
 8008672:	4602      	mov	r2, r0
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f002 fe79 	bl	800b36c <USBH_OpenPipe>
 800867a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	79db      	ldrb	r3, [r3, #7]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d02c      	beq.n	80086de <USBH_MSC_InterfaceInit+0x23a>
 8008684:	e001      	b.n	800868a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008686:	2303      	movs	r3, #3
 8008688:	e02a      	b.n	80086e0 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	895b      	ldrh	r3, [r3, #10]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d025      	beq.n	80086de <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	7919      	ldrb	r1, [r3, #4]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	79d8      	ldrb	r0, [r3, #7]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	8952      	ldrh	r2, [r2, #10]
 80086aa:	9202      	str	r2, [sp, #8]
 80086ac:	2202      	movs	r2, #2
 80086ae:	9201      	str	r2, [sp, #4]
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	4623      	mov	r3, r4
 80086b4:	4602      	mov	r2, r0
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f002 fe58 	bl	800b36c <USBH_OpenPipe>
 80086bc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	791b      	ldrb	r3, [r3, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f005 fcf4 	bl	800e0b4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	795b      	ldrb	r3, [r3, #5]
 80086d0:	2200      	movs	r2, #0
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f005 fced 	bl	800e0b4 <USBH_LL_SetToggle>

  return USBH_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	e000      	b.n	80086e0 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80086de:	2303      	movs	r3, #3
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd90      	pop	{r4, r7, pc}

080086e8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	795b      	ldrb	r3, [r3, #5]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f002 fe4e 	bl	800b3aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	795b      	ldrb	r3, [r3, #5]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f002 fe79 	bl	800b40c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	791b      	ldrb	r3, [r3, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00e      	beq.n	8008746 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	791b      	ldrb	r3, [r3, #4]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 fe3b 	bl	800b3aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	791b      	ldrb	r3, [r3, #4]
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f002 fe66 	bl	800b40c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	4618      	mov	r0, r3
 800875c:	f005 fdb0 	bl	800e2c0 <free>
    phost->pActiveClass->pData = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008766:	2200      	movs	r2, #0
 8008768:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008786:	2301      	movs	r3, #1
 8008788:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	7b9b      	ldrb	r3, [r3, #14]
 800878e:	2b03      	cmp	r3, #3
 8008790:	d041      	beq.n	8008816 <USBH_MSC_ClassRequest+0xa2>
 8008792:	2b03      	cmp	r3, #3
 8008794:	dc4b      	bgt.n	800882e <USBH_MSC_ClassRequest+0xba>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <USBH_MSC_ClassRequest+0x2a>
 800879a:	2b02      	cmp	r3, #2
 800879c:	d147      	bne.n	800882e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fcf1 	bl	800918a <USBH_MSC_BOT_REQ_GetMaxLUN>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d104      	bne.n	80087bc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d137      	bne.n	8008832 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d804      	bhi.n	80087d4 <USBH_MSC_ClassRequest+0x60>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	3301      	adds	r3, #1
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	e000      	b.n	80087d6 <USBH_MSC_ClassRequest+0x62>
 80087d4:	2202      	movs	r2, #2
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80087da:	2300      	movs	r3, #0
 80087dc:	73bb      	strb	r3, [r7, #14]
 80087de:	e014      	b.n	800880a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	2134      	movs	r1, #52	; 0x34
 80087e6:	fb01 f303 	mul.w	r3, r1, r3
 80087ea:	4413      	add	r3, r2
 80087ec:	3392      	adds	r3, #146	; 0x92
 80087ee:	2202      	movs	r2, #2
 80087f0:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	2134      	movs	r1, #52	; 0x34
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	4413      	add	r3, r2
 80087fe:	33c1      	adds	r3, #193	; 0xc1
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	3301      	adds	r3, #1
 8008808:	73bb      	strb	r3, [r7, #14]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	7bba      	ldrb	r2, [r7, #14]
 8008810:	429a      	cmp	r2, r3
 8008812:	d3e5      	bcc.n	80087e0 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008814:	e00d      	b.n	8008832 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008816:	2100      	movs	r1, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f002 f888 	bl	800a92e <USBH_ClrFeature>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d108      	bne.n	8008836 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	7bda      	ldrb	r2, [r3, #15]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800882c:	e003      	b.n	8008836 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800882e:	bf00      	nop
 8008830:	e002      	b.n	8008838 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008832:	bf00      	nop
 8008834:	e000      	b.n	8008838 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008836:	bf00      	nop
  }

  return status;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008856:	2301      	movs	r3, #1
 8008858:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800885a:	2301      	movs	r3, #1
 800885c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800885e:	2301      	movs	r3, #1
 8008860:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	7b1b      	ldrb	r3, [r3, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <USBH_MSC_Process+0x2e>
 800886a:	2b01      	cmp	r3, #1
 800886c:	f000 8271 	beq.w	8008d52 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008870:	e272      	b.n	8008d58 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	429a      	cmp	r2, r3
 8008880:	f080 824f 	bcs.w	8008d22 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800888a:	4619      	mov	r1, r3
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	2334      	movs	r3, #52	; 0x34
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	4413      	add	r3, r2
 8008896:	3391      	adds	r3, #145	; 0x91
 8008898:	2201      	movs	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088a2:	4619      	mov	r1, r3
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	2334      	movs	r3, #52	; 0x34
 80088a8:	fb01 f303 	mul.w	r3, r1, r3
 80088ac:	4413      	add	r3, r2
 80088ae:	3390      	adds	r3, #144	; 0x90
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	f200 8243 	bhi.w	8008d3e <USBH_MSC_Process+0x4fa>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <USBH_MSC_Process+0x7c>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088e5 	.word	0x080088e5
 80088c4:	08008d3f 	.word	0x08008d3f
 80088c8:	080089ad 	.word	0x080089ad
 80088cc:	08008b31 	.word	0x08008b31
 80088d0:	0800890b 	.word	0x0800890b
 80088d4:	08008bfd 	.word	0x08008bfd
 80088d8:	08008d3f 	.word	0x08008d3f
 80088dc:	08008d3f 	.word	0x08008d3f
 80088e0:	08008d11 	.word	0x08008d11
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088ea:	4619      	mov	r1, r3
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	2334      	movs	r3, #52	; 0x34
 80088f0:	fb01 f303 	mul.w	r3, r1, r3
 80088f4:	4413      	add	r3, r2
 80088f6:	3390      	adds	r3, #144	; 0x90
 80088f8:	2204      	movs	r2, #4
 80088fa:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008908:	e222      	b.n	8008d50 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008910:	b2d9      	uxtb	r1, r3
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008918:	461a      	mov	r2, r3
 800891a:	2334      	movs	r3, #52	; 0x34
 800891c:	fb02 f303 	mul.w	r3, r2, r3
 8008920:	3398      	adds	r3, #152	; 0x98
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4413      	add	r3, r2
 8008926:	3307      	adds	r3, #7
 8008928:	461a      	mov	r2, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 ff6a 	bl	8009804 <USBH_MSC_SCSI_Inquiry>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008940:	4619      	mov	r1, r3
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	2334      	movs	r3, #52	; 0x34
 8008946:	fb01 f303 	mul.w	r3, r1, r3
 800894a:	4413      	add	r3, r2
 800894c:	3390      	adds	r3, #144	; 0x90
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d10c      	bne.n	8008972 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800895e:	4619      	mov	r1, r3
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	2334      	movs	r3, #52	; 0x34
 8008964:	fb01 f303 	mul.w	r3, r1, r3
 8008968:	4413      	add	r3, r2
 800896a:	3390      	adds	r3, #144	; 0x90
 800896c:	2205      	movs	r2, #5
 800896e:	701a      	strb	r2, [r3, #0]
            break;
 8008970:	e1e7      	b.n	8008d42 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b04      	cmp	r3, #4
 8008976:	f040 81e4 	bne.w	8008d42 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008980:	4619      	mov	r1, r3
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	2334      	movs	r3, #52	; 0x34
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	3390      	adds	r3, #144	; 0x90
 800898e:	2201      	movs	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008998:	4619      	mov	r1, r3
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	2334      	movs	r3, #52	; 0x34
 800899e:	fb01 f303 	mul.w	r3, r1, r3
 80089a2:	4413      	add	r3, r2
 80089a4:	3391      	adds	r3, #145	; 0x91
 80089a6:	2202      	movs	r2, #2
 80089a8:	701a      	strb	r2, [r3, #0]
            break;
 80089aa:	e1ca      	b.n	8008d42 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fe66 	bl	8009688 <USBH_MSC_SCSI_TestUnitReady>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d149      	bne.n	8008a5a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089cc:	4619      	mov	r1, r3
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	2334      	movs	r3, #52	; 0x34
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	3392      	adds	r3, #146	; 0x92
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00c      	beq.n	80089fa <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089e6:	4619      	mov	r1, r3
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	2334      	movs	r3, #52	; 0x34
 80089ec:	fb01 f303 	mul.w	r3, r1, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	33c1      	adds	r3, #193	; 0xc1
 80089f4:	2201      	movs	r2, #1
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	e00b      	b.n	8008a12 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a00:	4619      	mov	r1, r3
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	2334      	movs	r3, #52	; 0x34
 8008a06:	fb01 f303 	mul.w	r3, r1, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	33c1      	adds	r3, #193	; 0xc1
 8008a0e:	2200      	movs	r2, #0
 8008a10:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a18:	4619      	mov	r1, r3
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	2334      	movs	r3, #52	; 0x34
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	3390      	adds	r3, #144	; 0x90
 8008a26:	2203      	movs	r2, #3
 8008a28:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a30:	4619      	mov	r1, r3
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	2334      	movs	r3, #52	; 0x34
 8008a36:	fb01 f303 	mul.w	r3, r1, r3
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3391      	adds	r3, #145	; 0x91
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a48:	4619      	mov	r1, r3
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	2334      	movs	r3, #52	; 0x34
 8008a4e:	fb01 f303 	mul.w	r3, r1, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	3392      	adds	r3, #146	; 0x92
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d14a      	bne.n	8008af6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a66:	4619      	mov	r1, r3
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	2334      	movs	r3, #52	; 0x34
 8008a6c:	fb01 f303 	mul.w	r3, r1, r3
 8008a70:	4413      	add	r3, r2
 8008a72:	3392      	adds	r3, #146	; 0x92
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d00c      	beq.n	8008a94 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a80:	4619      	mov	r1, r3
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	2334      	movs	r3, #52	; 0x34
 8008a86:	fb01 f303 	mul.w	r3, r1, r3
 8008a8a:	4413      	add	r3, r2
 8008a8c:	33c1      	adds	r3, #193	; 0xc1
 8008a8e:	2201      	movs	r2, #1
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	e00b      	b.n	8008aac <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	2334      	movs	r3, #52	; 0x34
 8008aa0:	fb01 f303 	mul.w	r3, r1, r3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	33c1      	adds	r3, #193	; 0xc1
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	2334      	movs	r3, #52	; 0x34
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	3390      	adds	r3, #144	; 0x90
 8008ac0:	2205      	movs	r2, #5
 8008ac2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aca:	4619      	mov	r1, r3
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	2334      	movs	r3, #52	; 0x34
 8008ad0:	fb01 f303 	mul.w	r3, r1, r3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3391      	adds	r3, #145	; 0x91
 8008ad8:	2201      	movs	r2, #1
 8008ada:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	2334      	movs	r3, #52	; 0x34
 8008ae8:	fb01 f303 	mul.w	r3, r1, r3
 8008aec:	4413      	add	r3, r2
 8008aee:	3392      	adds	r3, #146	; 0x92
 8008af0:	2202      	movs	r2, #2
 8008af2:	701a      	strb	r2, [r3, #0]
            break;
 8008af4:	e127      	b.n	8008d46 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	f040 8124 	bne.w	8008d46 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b04:	4619      	mov	r1, r3
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	2334      	movs	r3, #52	; 0x34
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	4413      	add	r3, r2
 8008b10:	3390      	adds	r3, #144	; 0x90
 8008b12:	2201      	movs	r2, #1
 8008b14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	2334      	movs	r3, #52	; 0x34
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	4413      	add	r3, r2
 8008b28:	3391      	adds	r3, #145	; 0x91
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	701a      	strb	r2, [r3, #0]
            break;
 8008b2e:	e10a      	b.n	8008d46 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b36:	b2d9      	uxtb	r1, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b3e:	461a      	mov	r2, r3
 8008b40:	2334      	movs	r3, #52	; 0x34
 8008b42:	fb02 f303 	mul.w	r3, r2, r3
 8008b46:	3390      	adds	r3, #144	; 0x90
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	461a      	mov	r2, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fddc 	bl	800970e <USBH_MSC_SCSI_ReadCapacity>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d120      	bne.n	8008ba2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b66:	4619      	mov	r1, r3
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	2334      	movs	r3, #52	; 0x34
 8008b6c:	fb01 f303 	mul.w	r3, r1, r3
 8008b70:	4413      	add	r3, r2
 8008b72:	3390      	adds	r3, #144	; 0x90
 8008b74:	2201      	movs	r2, #1
 8008b76:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b7e:	4619      	mov	r1, r3
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	2334      	movs	r3, #52	; 0x34
 8008b84:	fb01 f303 	mul.w	r3, r1, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	3391      	adds	r3, #145	; 0x91
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b96:	3301      	adds	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008ba0:	e0d3      	b.n	8008d4a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d10c      	bne.n	8008bc2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bae:	4619      	mov	r1, r3
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	2334      	movs	r3, #52	; 0x34
 8008bb4:	fb01 f303 	mul.w	r3, r1, r3
 8008bb8:	4413      	add	r3, r2
 8008bba:	3390      	adds	r3, #144	; 0x90
 8008bbc:	2205      	movs	r2, #5
 8008bbe:	701a      	strb	r2, [r3, #0]
            break;
 8008bc0:	e0c3      	b.n	8008d4a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	f040 80c0 	bne.w	8008d4a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	2334      	movs	r3, #52	; 0x34
 8008bd6:	fb01 f303 	mul.w	r3, r1, r3
 8008bda:	4413      	add	r3, r2
 8008bdc:	3390      	adds	r3, #144	; 0x90
 8008bde:	2201      	movs	r2, #1
 8008be0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008be8:	4619      	mov	r1, r3
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	2334      	movs	r3, #52	; 0x34
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	3391      	adds	r3, #145	; 0x91
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	701a      	strb	r2, [r3, #0]
            break;
 8008bfa:	e0a6      	b.n	8008d4a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c02:	b2d9      	uxtb	r1, r3
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	2334      	movs	r3, #52	; 0x34
 8008c0e:	fb02 f303 	mul.w	r3, r2, r3
 8008c12:	3398      	adds	r3, #152	; 0x98
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4413      	add	r3, r2
 8008c18:	3304      	adds	r3, #4
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fe96 	bl	800994e <USBH_MSC_SCSI_RequestSense>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d145      	bne.n	8008cb8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c32:	4619      	mov	r1, r3
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	2334      	movs	r3, #52	; 0x34
 8008c38:	fb01 f303 	mul.w	r3, r1, r3
 8008c3c:	4413      	add	r3, r2
 8008c3e:	339c      	adds	r3, #156	; 0x9c
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b06      	cmp	r3, #6
 8008c44:	d00c      	beq.n	8008c60 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	2334      	movs	r3, #52	; 0x34
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	339c      	adds	r3, #156	; 0x9c
 8008c5a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d117      	bne.n	8008c90 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d80c      	bhi.n	8008c90 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	2334      	movs	r3, #52	; 0x34
 8008c82:	fb01 f303 	mul.w	r3, r1, r3
 8008c86:	4413      	add	r3, r2
 8008c88:	3390      	adds	r3, #144	; 0x90
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	701a      	strb	r2, [r3, #0]
                  break;
 8008c8e:	e05f      	b.n	8008d50 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c96:	4619      	mov	r1, r3
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	2334      	movs	r3, #52	; 0x34
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	3390      	adds	r3, #144	; 0x90
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d10c      	bne.n	8008cd8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	2334      	movs	r3, #52	; 0x34
 8008cca:	fb01 f303 	mul.w	r3, r1, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	3390      	adds	r3, #144	; 0x90
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	701a      	strb	r2, [r3, #0]
            break;
 8008cd6:	e03a      	b.n	8008d4e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d137      	bne.n	8008d4e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	2334      	movs	r3, #52	; 0x34
 8008cea:	fb01 f303 	mul.w	r3, r1, r3
 8008cee:	4413      	add	r3, r2
 8008cf0:	3390      	adds	r3, #144	; 0x90
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	2334      	movs	r3, #52	; 0x34
 8008d02:	fb01 f303 	mul.w	r3, r1, r3
 8008d06:	4413      	add	r3, r2
 8008d08:	3391      	adds	r3, #145	; 0x91
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	701a      	strb	r2, [r3, #0]
            break;
 8008d0e:	e01e      	b.n	8008d4e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d16:	3301      	adds	r3, #1
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008d20:	e016      	b.n	8008d50 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d36:	2102      	movs	r1, #2
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
      break;
 8008d3c:	e00c      	b.n	8008d58 <USBH_MSC_Process+0x514>
            break;
 8008d3e:	bf00      	nop
 8008d40:	e00a      	b.n	8008d58 <USBH_MSC_Process+0x514>
            break;
 8008d42:	bf00      	nop
 8008d44:	e008      	b.n	8008d58 <USBH_MSC_Process+0x514>
            break;
 8008d46:	bf00      	nop
 8008d48:	e006      	b.n	8008d58 <USBH_MSC_Process+0x514>
            break;
 8008d4a:	bf00      	nop
 8008d4c:	e004      	b.n	8008d58 <USBH_MSC_Process+0x514>
            break;
 8008d4e:	bf00      	nop
      break;
 8008d50:	e002      	b.n	8008d58 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75fb      	strb	r3, [r7, #23]
      break;
 8008d56:	bf00      	nop
  }
  return error;
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop

08008d64 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b088      	sub	sp, #32
 8008d7e:	af02      	add	r7, sp, #8
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008d90:	2301      	movs	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	2134      	movs	r1, #52	; 0x34
 8008d9e:	fb01 f303 	mul.w	r3, r1, r3
 8008da2:	4413      	add	r3, r2
 8008da4:	3390      	adds	r3, #144	; 0x90
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b07      	cmp	r3, #7
 8008daa:	d03c      	beq.n	8008e26 <USBH_MSC_RdWrProcess+0xac>
 8008dac:	2b07      	cmp	r3, #7
 8008dae:	f300 80a7 	bgt.w	8008f00 <USBH_MSC_RdWrProcess+0x186>
 8008db2:	2b05      	cmp	r3, #5
 8008db4:	d06c      	beq.n	8008e90 <USBH_MSC_RdWrProcess+0x116>
 8008db6:	2b06      	cmp	r3, #6
 8008db8:	f040 80a2 	bne.w	8008f00 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008dbc:	78f9      	ldrb	r1, [r7, #3]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fea5 	bl	8009b16 <USBH_MSC_SCSI_Read>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008dd6:	78fb      	ldrb	r3, [r7, #3]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	2134      	movs	r1, #52	; 0x34
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	4413      	add	r3, r2
 8008de2:	3390      	adds	r3, #144	; 0x90
 8008de4:	2201      	movs	r2, #1
 8008de6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dec:	e08a      	b.n	8008f04 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d109      	bne.n	8008e08 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	2134      	movs	r1, #52	; 0x34
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	3390      	adds	r3, #144	; 0x90
 8008e02:	2205      	movs	r2, #5
 8008e04:	701a      	strb	r2, [r3, #0]
      break;
 8008e06:	e07d      	b.n	8008f04 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d17a      	bne.n	8008f04 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	2134      	movs	r1, #52	; 0x34
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	4413      	add	r3, r2
 8008e1a:	3390      	adds	r3, #144	; 0x90
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e20:	2302      	movs	r3, #2
 8008e22:	75fb      	strb	r3, [r7, #23]
      break;
 8008e24:	e06e      	b.n	8008f04 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008e26:	78f9      	ldrb	r1, [r7, #3]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	2200      	movs	r2, #0
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fe05 	bl	8009a40 <USBH_MSC_SCSI_Write>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10b      	bne.n	8008e58 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	2134      	movs	r1, #52	; 0x34
 8008e46:	fb01 f303 	mul.w	r3, r1, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	3390      	adds	r3, #144	; 0x90
 8008e4e:	2201      	movs	r2, #1
 8008e50:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e56:	e057      	b.n	8008f08 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d109      	bne.n	8008e72 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008e5e:	78fb      	ldrb	r3, [r7, #3]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	2134      	movs	r1, #52	; 0x34
 8008e64:	fb01 f303 	mul.w	r3, r1, r3
 8008e68:	4413      	add	r3, r2
 8008e6a:	3390      	adds	r3, #144	; 0x90
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	701a      	strb	r2, [r3, #0]
      break;
 8008e70:	e04a      	b.n	8008f08 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d147      	bne.n	8008f08 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	2134      	movs	r1, #52	; 0x34
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	3390      	adds	r3, #144	; 0x90
 8008e86:	2208      	movs	r2, #8
 8008e88:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8e:	e03b      	b.n	8008f08 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	2234      	movs	r2, #52	; 0x34
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
 8008e98:	3398      	adds	r3, #152	; 0x98
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fd52 	bl	800994e <USBH_MSC_SCSI_RequestSense>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d113      	bne.n	8008edc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	2134      	movs	r1, #52	; 0x34
 8008eba:	fb01 f303 	mul.w	r3, r1, r3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3390      	adds	r3, #144	; 0x90
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	2134      	movs	r1, #52	; 0x34
 8008ecc:	fb01 f303 	mul.w	r3, r1, r3
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3391      	adds	r3, #145	; 0x91
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d014      	beq.n	8008f0c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d111      	bne.n	8008f0c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	2134      	movs	r1, #52	; 0x34
 8008eee:	fb01 f303 	mul.w	r3, r1, r3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3390      	adds	r3, #144	; 0x90
 8008ef6:	2208      	movs	r2, #8
 8008ef8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008efa:	2302      	movs	r3, #2
 8008efc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008efe:	e005      	b.n	8008f0c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008f00:	bf00      	nop
 8008f02:	e004      	b.n	8008f0e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008f04:	bf00      	nop
 8008f06:	e002      	b.n	8008f0e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008f08:	bf00      	nop
 8008f0a:	e000      	b.n	8008f0e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008f0c:	bf00      	nop

  }
  return error;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b0b      	cmp	r3, #11
 8008f36:	d10c      	bne.n	8008f52 <USBH_MSC_UnitIsReady+0x3a>
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	2134      	movs	r1, #52	; 0x34
 8008f3e:	fb01 f303 	mul.w	r3, r1, r3
 8008f42:	4413      	add	r3, r2
 8008f44:	3391      	adds	r3, #145	; 0x91
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	73fb      	strb	r3, [r7, #15]
 8008f50:	e001      	b.n	8008f56 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b0b      	cmp	r3, #11
 8008f84:	d10d      	bne.n	8008fa2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008f86:	7afb      	ldrb	r3, [r7, #11]
 8008f88:	2234      	movs	r2, #52	; 0x34
 8008f8a:	fb02 f303 	mul.w	r3, r2, r3
 8008f8e:	3390      	adds	r3, #144	; 0x90
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4413      	add	r3, r2
 8008f94:	2234      	movs	r2, #52	; 0x34
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f005 f999 	bl	800e2d0 <memcpy>
    return USBH_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e000      	b.n	8008fa4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008fa2:	2302      	movs	r3, #2
  }
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00e      	beq.n	8008ff0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008fd8:	2b0b      	cmp	r3, #11
 8008fda:	d109      	bne.n	8008ff0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008fdc:	7afb      	ldrb	r3, [r7, #11]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	2134      	movs	r1, #52	; 0x34
 8008fe2:	fb01 f303 	mul.w	r3, r1, r3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	3390      	adds	r3, #144	; 0x90
 8008fea:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d001      	beq.n	8008ff4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e040      	b.n	8009076 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2206      	movs	r2, #6
 8008ff8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	2134      	movs	r1, #52	; 0x34
 8009000:	fb01 f303 	mul.w	r3, r1, r3
 8009004:	4413      	add	r3, r2
 8009006:	3390      	adds	r3, #144	; 0x90
 8009008:	2206      	movs	r2, #6
 800900a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	b29a      	uxth	r2, r3
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009016:	7af9      	ldrb	r1, [r7, #11]
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 fd78 	bl	8009b16 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800902c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800902e:	e016      	b.n	800905e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	1ad2      	subs	r2, r2, r3
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009040:	fb01 f303 	mul.w	r3, r1, r3
 8009044:	429a      	cmp	r2, r3
 8009046:	d805      	bhi.n	8009054 <USBH_MSC_Read+0xa8>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d104      	bne.n	800905e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2201      	movs	r2, #1
 8009058:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800905a:	2302      	movs	r3, #2
 800905c:	e00b      	b.n	8009076 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800905e:	7afb      	ldrb	r3, [r7, #11]
 8009060:	4619      	mov	r1, r3
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff fe89 	bl	8008d7a <USBH_MSC_RdWrProcess>
 8009068:	4603      	mov	r3, r0
 800906a:	2b01      	cmp	r3, #1
 800906c:	d0e0      	beq.n	8009030 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2201      	movs	r2, #1
 8009072:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b088      	sub	sp, #32
 8009082:	af02      	add	r7, sp, #8
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	460b      	mov	r3, r1
 800908c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00e      	beq.n	80090c2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80090aa:	2b0b      	cmp	r3, #11
 80090ac:	d109      	bne.n	80090c2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	2134      	movs	r1, #52	; 0x34
 80090b4:	fb01 f303 	mul.w	r3, r1, r3
 80090b8:	4413      	add	r3, r2
 80090ba:	3390      	adds	r3, #144	; 0x90
 80090bc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d001      	beq.n	80090c6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80090c2:	2302      	movs	r3, #2
 80090c4:	e040      	b.n	8009148 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2207      	movs	r2, #7
 80090ca:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	2134      	movs	r1, #52	; 0x34
 80090d2:	fb01 f303 	mul.w	r3, r1, r3
 80090d6:	4413      	add	r3, r2
 80090d8:	3390      	adds	r3, #144	; 0x90
 80090da:	2207      	movs	r2, #7
 80090dc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80090de:	7afb      	ldrb	r3, [r7, #11]
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80090e8:	7af9      	ldrb	r1, [r7, #11]
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fca4 	bl	8009a40 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090fe:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009100:	e016      	b.n	8009130 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad2      	subs	r2, r2, r3
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009112:	fb01 f303 	mul.w	r3, r1, r3
 8009116:	429a      	cmp	r2, r3
 8009118:	d805      	bhi.n	8009126 <USBH_MSC_Write+0xa8>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2201      	movs	r2, #1
 800912a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800912c:	2302      	movs	r3, #2
 800912e:	e00b      	b.n	8009148 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	4619      	mov	r1, r3
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7ff fe20 	bl	8008d7a <USBH_MSC_RdWrProcess>
 800913a:	4603      	mov	r3, r0
 800913c:	2b01      	cmp	r3, #1
 800913e:	d0e0      	beq.n	8009102 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2201      	movs	r2, #1
 8009144:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2221      	movs	r2, #33	; 0x21
 800915c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009176:	2200      	movs	r2, #0
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fea4 	bl	800aec8 <USBH_CtlReq>
 8009180:	4603      	mov	r3, r0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	22a1      	movs	r2, #161	; 0xa1
 8009198:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	22fe      	movs	r2, #254	; 0xfe
 800919e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80091b2:	2201      	movs	r2, #1
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fe86 	bl	800aec8 <USBH_CtlReq>
 80091bc:	4603      	mov	r3, r0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4a09      	ldr	r2, [pc, #36]	; (8009204 <USBH_MSC_BOT_Init+0x3c>)
 80091de:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4a09      	ldr	r2, [pc, #36]	; (8009208 <USBH_MSC_BOT_Init+0x40>)
 80091e4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	43425355 	.word	0x43425355
 8009208:	20304050 	.word	0x20304050

0800920c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af02      	add	r7, sp, #8
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009218:	2301      	movs	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800921c:	2301      	movs	r3, #1
 800921e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009220:	2301      	movs	r3, #1
 8009222:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009224:	2300      	movs	r3, #0
 8009226:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800923c:	3b01      	subs	r3, #1
 800923e:	2b0a      	cmp	r3, #10
 8009240:	f200 819e 	bhi.w	8009580 <USBH_MSC_BOT_Process+0x374>
 8009244:	a201      	add	r2, pc, #4	; (adr r2, 800924c <USBH_MSC_BOT_Process+0x40>)
 8009246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924a:	bf00      	nop
 800924c:	08009279 	.word	0x08009279
 8009250:	080092a1 	.word	0x080092a1
 8009254:	0800930b 	.word	0x0800930b
 8009258:	08009329 	.word	0x08009329
 800925c:	080093ad 	.word	0x080093ad
 8009260:	080093cf 	.word	0x080093cf
 8009264:	08009467 	.word	0x08009467
 8009268:	08009483 	.word	0x08009483
 800926c:	080094d5 	.word	0x080094d5
 8009270:	08009505 	.word	0x08009505
 8009274:	08009567 	.word	0x08009567
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	795b      	ldrb	r3, [r3, #5]
 8009292:	2201      	movs	r2, #1
 8009294:	9200      	str	r2, [sp, #0]
 8009296:	221f      	movs	r2, #31
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f002 f824 	bl	800b2e6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800929e:	e17e      	b.n	800959e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	795b      	ldrb	r3, [r3, #5]
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f004 feda 	bl	800e060 <USBH_LL_GetURBState>
 80092ac:	4603      	mov	r3, r0
 80092ae:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80092b0:	7d3b      	ldrb	r3, [r7, #20]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d118      	bne.n	80092e8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00f      	beq.n	80092de <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80092c4:	b25b      	sxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	da04      	bge.n	80092d4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2203      	movs	r2, #3
 80092ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092d2:	e157      	b.n	8009584 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	2205      	movs	r2, #5
 80092d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092dc:	e152      	b.n	8009584 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	2207      	movs	r2, #7
 80092e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092e6:	e14d      	b.n	8009584 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092e8:	7d3b      	ldrb	r3, [r7, #20]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d104      	bne.n	80092f8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092f6:	e145      	b.n	8009584 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80092f8:	7d3b      	ldrb	r3, [r7, #20]
 80092fa:	2b05      	cmp	r3, #5
 80092fc:	f040 8142 	bne.w	8009584 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	220a      	movs	r2, #10
 8009304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009308:	e13c      	b.n	8009584 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	895a      	ldrh	r2, [r3, #10]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	791b      	ldrb	r3, [r3, #4]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f002 f809 	bl	800b330 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2204      	movs	r2, #4
 8009322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009326:	e13a      	b.n	800959e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	791b      	ldrb	r3, [r3, #4]
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f004 fe96 	bl	800e060 <USBH_LL_GetURBState>
 8009334:	4603      	mov	r3, r0
 8009336:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009338:	7d3b      	ldrb	r3, [r7, #20]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d12d      	bne.n	800939a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	8952      	ldrh	r2, [r2, #10]
 8009346:	4293      	cmp	r3, r2
 8009348:	d910      	bls.n	800936c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	8952      	ldrh	r2, [r2, #10]
 8009354:	441a      	add	r2, r3
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	8952      	ldrh	r2, [r2, #10]
 8009364:	1a9a      	subs	r2, r3, r2
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	65da      	str	r2, [r3, #92]	; 0x5c
 800936a:	e002      	b.n	8009372 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2200      	movs	r2, #0
 8009370:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	895a      	ldrh	r2, [r3, #10]
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	791b      	ldrb	r3, [r3, #4]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 ffd1 	bl	800b330 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800938e:	e0fb      	b.n	8009588 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2207      	movs	r2, #7
 8009394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009398:	e0f6      	b.n	8009588 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800939a:	7d3b      	ldrb	r3, [r7, #20]
 800939c:	2b05      	cmp	r3, #5
 800939e:	f040 80f3 	bne.w	8009588 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2209      	movs	r2, #9
 80093a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093aa:	e0ed      	b.n	8009588 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	891a      	ldrh	r2, [r3, #8]
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	795b      	ldrb	r3, [r3, #5]
 80093ba:	2001      	movs	r0, #1
 80093bc:	9000      	str	r0, [sp, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 ff91 	bl	800b2e6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	2206      	movs	r2, #6
 80093c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093cc:	e0e7      	b.n	800959e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	795b      	ldrb	r3, [r3, #5]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f004 fe43 	bl	800e060 <USBH_LL_GetURBState>
 80093da:	4603      	mov	r3, r0
 80093dc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80093de:	7d3b      	ldrb	r3, [r7, #20]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d12f      	bne.n	8009444 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	8912      	ldrh	r2, [r2, #8]
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d910      	bls.n	8009412 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	8912      	ldrh	r2, [r2, #8]
 80093fa:	441a      	add	r2, r3
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	8912      	ldrh	r2, [r2, #8]
 800940a:	1a9a      	subs	r2, r3, r2
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009410:	e002      	b.n	8009418 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2200      	movs	r2, #0
 8009416:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00c      	beq.n	800943a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	891a      	ldrh	r2, [r3, #8]
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	795b      	ldrb	r3, [r3, #5]
 800942e:	2001      	movs	r0, #1
 8009430:	9000      	str	r0, [sp, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 ff57 	bl	800b2e6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009438:	e0a8      	b.n	800958c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2207      	movs	r2, #7
 800943e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009442:	e0a3      	b.n	800958c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009444:	7d3b      	ldrb	r3, [r7, #20]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d104      	bne.n	8009454 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2205      	movs	r2, #5
 800944e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009452:	e09b      	b.n	800958c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009454:	7d3b      	ldrb	r3, [r7, #20]
 8009456:	2b05      	cmp	r3, #5
 8009458:	f040 8098 	bne.w	800958c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	220a      	movs	r2, #10
 8009460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009464:	e092      	b.n	800958c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	791b      	ldrb	r3, [r3, #4]
 8009470:	220d      	movs	r2, #13
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 ff5c 	bl	800b330 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	2208      	movs	r2, #8
 800947c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009480:	e08d      	b.n	800959e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	791b      	ldrb	r3, [r3, #4]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f004 fde9 	bl	800e060 <USBH_LL_GetURBState>
 800948e:	4603      	mov	r3, r0
 8009490:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009492:	7d3b      	ldrb	r3, [r7, #20]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d115      	bne.n	80094c4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f8a9 	bl	8009600 <USBH_MSC_DecodeCSW>
 80094ae:	4603      	mov	r3, r0
 80094b0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80094b2:	7d7b      	ldrb	r3, [r7, #21]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80094bc:	e068      	b.n	8009590 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80094be:	2302      	movs	r3, #2
 80094c0:	75fb      	strb	r3, [r7, #23]
      break;
 80094c2:	e065      	b.n	8009590 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80094c4:	7d3b      	ldrb	r3, [r7, #20]
 80094c6:	2b05      	cmp	r3, #5
 80094c8:	d162      	bne.n	8009590 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2209      	movs	r2, #9
 80094ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094d2:	e05d      	b.n	8009590 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	2200      	movs	r2, #0
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f864 	bl	80095a8 <USBH_MSC_BOT_Abort>
 80094e0:	4603      	mov	r3, r0
 80094e2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80094e4:	7dbb      	ldrb	r3, [r7, #22]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d104      	bne.n	80094f4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	2207      	movs	r2, #7
 80094ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80094f2:	e04f      	b.n	8009594 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80094f4:	7dbb      	ldrb	r3, [r7, #22]
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d14c      	bne.n	8009594 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	220b      	movs	r2, #11
 80094fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009502:	e047      	b.n	8009594 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	2201      	movs	r2, #1
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f84c 	bl	80095a8 <USBH_MSC_BOT_Abort>
 8009510:	4603      	mov	r3, r0
 8009512:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009514:	7dbb      	ldrb	r3, [r7, #22]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d11d      	bne.n	8009556 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	795b      	ldrb	r3, [r3, #5]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f004 fdf7 	bl	800e114 <USBH_LL_GetToggle>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	7959      	ldrb	r1, [r3, #5]
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	f1c3 0301 	rsb	r3, r3, #1
 8009534:	b2db      	uxtb	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f004 fdbb 	bl	800e0b4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	791b      	ldrb	r3, [r3, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f004 fdb4 	bl	800e0b4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	2209      	movs	r2, #9
 8009550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009554:	e020      	b.n	8009598 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009556:	7dbb      	ldrb	r3, [r7, #22]
 8009558:	2b04      	cmp	r3, #4
 800955a:	d11d      	bne.n	8009598 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	220b      	movs	r2, #11
 8009560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009564:	e018      	b.n	8009598 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fdf2 	bl	8009150 <USBH_MSC_BOT_REQ_Reset>
 800956c:	4603      	mov	r3, r0
 800956e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d112      	bne.n	800959c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800957e:	e00d      	b.n	800959c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009580:	bf00      	nop
 8009582:	e00c      	b.n	800959e <USBH_MSC_BOT_Process+0x392>
      break;
 8009584:	bf00      	nop
 8009586:	e00a      	b.n	800959e <USBH_MSC_BOT_Process+0x392>
      break;
 8009588:	bf00      	nop
 800958a:	e008      	b.n	800959e <USBH_MSC_BOT_Process+0x392>
      break;
 800958c:	bf00      	nop
 800958e:	e006      	b.n	800959e <USBH_MSC_BOT_Process+0x392>
      break;
 8009590:	bf00      	nop
 8009592:	e004      	b.n	800959e <USBH_MSC_BOT_Process+0x392>
      break;
 8009594:	bf00      	nop
 8009596:	e002      	b.n	800959e <USBH_MSC_BOT_Process+0x392>
      break;
 8009598:	bf00      	nop
 800959a:	e000      	b.n	800959e <USBH_MSC_BOT_Process+0x392>
      break;
 800959c:	bf00      	nop
  }
  return status;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
 80095b4:	4613      	mov	r3, r2
 80095b6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80095b8:	2302      	movs	r3, #2
 80095ba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80095c6:	78bb      	ldrb	r3, [r7, #2]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <USBH_MSC_BOT_Abort+0x2a>
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d009      	beq.n	80095e4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80095d0:	e011      	b.n	80095f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	79db      	ldrb	r3, [r3, #7]
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 f9a8 	bl	800a92e <USBH_ClrFeature>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]
      break;
 80095e2:	e008      	b.n	80095f6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	799b      	ldrb	r3, [r3, #6]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 f99f 	bl	800a92e <USBH_ClrFeature>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]
      break;
 80095f4:	bf00      	nop
  }
  return status;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009612:	2301      	movs	r3, #1
 8009614:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f004 fc8d 	bl	800df3c <USBH_LL_GetLastXferSize>
 8009622:	4603      	mov	r3, r0
 8009624:	2b0d      	cmp	r3, #13
 8009626:	d002      	beq.n	800962e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009628:	2302      	movs	r3, #2
 800962a:	73fb      	strb	r3, [r7, #15]
 800962c:	e024      	b.n	8009678 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009632:	4a14      	ldr	r2, [pc, #80]	; (8009684 <USBH_MSC_DecodeCSW+0x84>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d11d      	bne.n	8009674 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009640:	429a      	cmp	r2, r3
 8009642:	d119      	bne.n	8009678 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
 8009652:	e011      	b.n	8009678 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800965a:	2b01      	cmp	r3, #1
 800965c:	d102      	bne.n	8009664 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800965e:	2301      	movs	r3, #1
 8009660:	73fb      	strb	r3, [r7, #15]
 8009662:	e009      	b.n	8009678 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800966a:	2b02      	cmp	r3, #2
 800966c:	d104      	bne.n	8009678 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800966e:	2302      	movs	r3, #2
 8009670:	73fb      	strb	r3, [r7, #15]
 8009672:	e001      	b.n	8009678 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009674:	2302      	movs	r3, #2
 8009676:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	53425355 	.word	0x53425355

08009688 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009694:	2302      	movs	r3, #2
 8009696:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d002      	beq.n	80096b2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d021      	beq.n	80096f4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80096b0:	e028      	b.n	8009704 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	220a      	movs	r2, #10
 80096c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	3363      	adds	r3, #99	; 0x63
 80096cc:	2210      	movs	r2, #16
 80096ce:	2100      	movs	r1, #0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f004 fe0b 	bl	800e2ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2202      	movs	r2, #2
 80096ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80096ee:	2301      	movs	r3, #1
 80096f0:	73fb      	strb	r3, [r7, #15]
      break;
 80096f2:	e007      	b.n	8009704 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff fd87 	bl	800920c <USBH_MSC_BOT_Process>
 80096fe:	4603      	mov	r3, r0
 8009700:	73fb      	strb	r3, [r7, #15]
      break;
 8009702:	bf00      	nop
  }

  return error;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b086      	sub	sp, #24
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	460b      	mov	r3, r1
 8009718:	607a      	str	r2, [r7, #4]
 800971a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800971c:	2301      	movs	r3, #1
 800971e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009730:	2b01      	cmp	r3, #1
 8009732:	d002      	beq.n	800973a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009734:	2b02      	cmp	r3, #2
 8009736:	d027      	beq.n	8009788 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009738:	e05f      	b.n	80097fa <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2208      	movs	r2, #8
 800973e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2280      	movs	r2, #128	; 0x80
 8009744:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	220a      	movs	r2, #10
 800974c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	3363      	adds	r3, #99	; 0x63
 8009754:	2210      	movs	r2, #16
 8009756:	2100      	movs	r1, #0
 8009758:	4618      	mov	r0, r3
 800975a:	f004 fdc7 	bl	800e2ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2225      	movs	r2, #37	; 0x25
 8009762:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f103 0210 	add.w	r2, r3, #16
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009782:	2301      	movs	r3, #1
 8009784:	75fb      	strb	r3, [r7, #23]
      break;
 8009786:	e038      	b.n	80097fa <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009788:	7afb      	ldrb	r3, [r7, #11]
 800978a:	4619      	mov	r1, r3
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff fd3d 	bl	800920c <USBH_MSC_BOT_Process>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d12d      	bne.n	80097f8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097a2:	3303      	adds	r3, #3
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ae:	3302      	adds	r3, #2
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097bc:	3301      	adds	r3, #1
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80097c2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	061b      	lsls	r3, r3, #24
 80097ce:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097da:	3307      	adds	r3, #7
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b29a      	uxth	r2, r3
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e6:	3306      	adds	r3, #6
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	4313      	orrs	r3, r2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	809a      	strh	r2, [r3, #4]
      break;
 80097f8:	bf00      	nop
  }

  return error;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	460b      	mov	r3, r1
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009812:	2302      	movs	r3, #2
 8009814:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009826:	2b01      	cmp	r3, #1
 8009828:	d002      	beq.n	8009830 <USBH_MSC_SCSI_Inquiry+0x2c>
 800982a:	2b02      	cmp	r3, #2
 800982c:	d03d      	beq.n	80098aa <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800982e:	e089      	b.n	8009944 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	2224      	movs	r2, #36	; 0x24
 8009834:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2280      	movs	r2, #128	; 0x80
 800983a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	220a      	movs	r2, #10
 8009842:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	3363      	adds	r3, #99	; 0x63
 800984a:	220a      	movs	r2, #10
 800984c:	2100      	movs	r1, #0
 800984e:	4618      	mov	r0, r3
 8009850:	f004 fd4c 	bl	800e2ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	2212      	movs	r2, #18
 8009858:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	015b      	lsls	r3, r3, #5
 8009860:	b2da      	uxtb	r2, r3
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2224      	movs	r2, #36	; 0x24
 800987c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f103 0210 	add.w	r2, r3, #16
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80098a4:	2301      	movs	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
      break;
 80098a8:	e04c      	b.n	8009944 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	4619      	mov	r1, r3
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff fcac 	bl	800920c <USBH_MSC_BOT_Process>
 80098b4:	4603      	mov	r3, r0
 80098b6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d141      	bne.n	8009942 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80098be:	2222      	movs	r2, #34	; 0x22
 80098c0:	2100      	movs	r1, #0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f004 fd12 	bl	800e2ec <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	095b      	lsrs	r3, r3, #5
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f0:	3301      	adds	r3, #1
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	b25b      	sxtb	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	da03      	bge.n	8009902 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	709a      	strb	r2, [r3, #2]
 8009900:	e002      	b.n	8009908 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	1cd8      	adds	r0, r3, #3
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009912:	3308      	adds	r3, #8
 8009914:	2208      	movs	r2, #8
 8009916:	4619      	mov	r1, r3
 8009918:	f004 fcda 	bl	800e2d0 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f103 000c 	add.w	r0, r3, #12
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009928:	3310      	adds	r3, #16
 800992a:	2210      	movs	r2, #16
 800992c:	4619      	mov	r1, r3
 800992e:	f004 fccf 	bl	800e2d0 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	331d      	adds	r3, #29
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800993c:	3220      	adds	r2, #32
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	601a      	str	r2, [r3, #0]
      break;
 8009942:	bf00      	nop
  }

  return error;
 8009944:	7dfb      	ldrb	r3, [r7, #23]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b086      	sub	sp, #24
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	460b      	mov	r3, r1
 8009958:	607a      	str	r2, [r7, #4]
 800995a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800995c:	2302      	movs	r3, #2
 800995e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009970:	2b01      	cmp	r3, #1
 8009972:	d002      	beq.n	800997a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009974:	2b02      	cmp	r3, #2
 8009976:	d03d      	beq.n	80099f4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009978:	e05d      	b.n	8009a36 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	220e      	movs	r2, #14
 800997e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2280      	movs	r2, #128	; 0x80
 8009984:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	220a      	movs	r2, #10
 800998c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	3363      	adds	r3, #99	; 0x63
 8009994:	2210      	movs	r2, #16
 8009996:	2100      	movs	r1, #0
 8009998:	4618      	mov	r0, r3
 800999a:	f004 fca7 	bl	800e2ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2203      	movs	r2, #3
 80099a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	015b      	lsls	r3, r3, #5
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	220e      	movs	r2, #14
 80099c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2202      	movs	r2, #2
 80099de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f103 0210 	add.w	r2, r3, #16
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80099ee:	2301      	movs	r3, #1
 80099f0:	75fb      	strb	r3, [r7, #23]
      break;
 80099f2:	e020      	b.n	8009a36 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	4619      	mov	r1, r3
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f7ff fc07 	bl	800920c <USBH_MSC_BOT_Process>
 80099fe:	4603      	mov	r3, r0
 8009a00:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d115      	bne.n	8009a34 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0e:	3302      	adds	r3, #2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	f003 030f 	and.w	r3, r3, #15
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a22:	7b1a      	ldrb	r2, [r3, #12]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a2e:	7b5a      	ldrb	r2, [r3, #13]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	709a      	strb	r2, [r3, #2]
      break;
 8009a34:	bf00      	nop
  }

  return error;
 8009a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009a50:	2302      	movs	r3, #2
 8009a52:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d002      	beq.n	8009a6e <USBH_MSC_SCSI_Write+0x2e>
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d047      	beq.n	8009afc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009a6c:	e04e      	b.n	8009b0c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009a74:	461a      	mov	r2, r3
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	fb03 f202 	mul.w	r2, r3, r2
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	3363      	adds	r3, #99	; 0x63
 8009a94:	2210      	movs	r2, #16
 8009a96:	2100      	movs	r1, #0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f004 fc27 	bl	800e2ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	222a      	movs	r2, #42	; 0x2a
 8009aa2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009aa6:	79fa      	ldrb	r2, [r7, #7]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009aae:	79ba      	ldrb	r2, [r7, #6]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009ab6:	797a      	ldrb	r2, [r7, #5]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009abe:	1d3b      	adds	r3, r7, #4
 8009ac0:	781a      	ldrb	r2, [r3, #0]
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ac8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ad2:	f107 0320 	add.w	r3, r7, #32
 8009ad6:	781a      	ldrb	r2, [r3, #0]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009af6:	2301      	movs	r3, #1
 8009af8:	75fb      	strb	r3, [r7, #23]
      break;
 8009afa:	e007      	b.n	8009b0c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009afc:	7afb      	ldrb	r3, [r7, #11]
 8009afe:	4619      	mov	r1, r3
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fb83 	bl	800920c <USBH_MSC_BOT_Process>
 8009b06:	4603      	mov	r3, r0
 8009b08:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0a:	bf00      	nop
  }

  return error;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b086      	sub	sp, #24
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
 8009b22:	460b      	mov	r3, r1
 8009b24:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009b26:	2302      	movs	r3, #2
 8009b28:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d002      	beq.n	8009b44 <USBH_MSC_SCSI_Read+0x2e>
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d047      	beq.n	8009bd2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009b42:	e04e      	b.n	8009be2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	fb03 f202 	mul.w	r2, r3, r2
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2280      	movs	r2, #128	; 0x80
 8009b5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	220a      	movs	r2, #10
 8009b62:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	3363      	adds	r3, #99	; 0x63
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f004 fbbc 	bl	800e2ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2228      	movs	r2, #40	; 0x28
 8009b78:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009b7c:	79fa      	ldrb	r2, [r7, #7]
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009b84:	79ba      	ldrb	r2, [r7, #6]
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009b8c:	797a      	ldrb	r2, [r7, #5]
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009b94:	1d3b      	adds	r3, r7, #4
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009b9e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ba8:	f107 0320 	add.w	r3, r7, #32
 8009bac:	781a      	ldrb	r2, [r3, #0]
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd0:	e007      	b.n	8009be2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7ff fb18 	bl	800920c <USBH_MSC_BOT_Process>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]
      break;
 8009be0:	bf00      	nop
  }

  return error;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009c00:	2302      	movs	r3, #2
 8009c02:	e029      	b.n	8009c58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	79fa      	ldrb	r2, [r7, #7]
 8009c08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 f81f 	bl	8009c60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f004 f8bf 	bl	800ddd4 <USBH_LL_Init>

  return USBH_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e009      	b.n	8009c86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	33e0      	adds	r3, #224	; 0xe0
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3301      	adds	r3, #1
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b0f      	cmp	r3, #15
 8009c8a:	d9f2      	bls.n	8009c72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	e009      	b.n	8009ca6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cac:	d3f1      	bcc.n	8009c92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2240      	movs	r2, #64	; 0x40
 8009cd2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d016      	beq.n	8009d4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10e      	bne.n	8009d44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d2c:	1c59      	adds	r1, r3, #1
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	33de      	adds	r3, #222	; 0xde
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]
 8009d42:	e004      	b.n	8009d4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009d44:	2302      	movs	r3, #2
 8009d46:	73fb      	strb	r3, [r7, #15]
 8009d48:	e001      	b.n	8009d4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d204      	bcs.n	8009d82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009d80:	e001      	b.n	8009d86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d82:	2302      	movs	r3, #2
 8009d84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	4611      	mov	r1, r2
 8009da0:	461a      	mov	r2, r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	70fb      	strb	r3, [r7, #3]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70bb      	strb	r3, [r7, #2]
 8009daa:	4613      	mov	r3, r2
 8009dac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009dbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009dbe:	e025      	b.n	8009e0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	221a      	movs	r2, #26
 8009dc4:	fb02 f303 	mul.w	r3, r2, r3
 8009dc8:	3308      	adds	r3, #8
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4413      	add	r3, r2
 8009dce:	3302      	adds	r3, #2
 8009dd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	78fa      	ldrb	r2, [r7, #3]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d002      	beq.n	8009de2 <USBH_FindInterface+0x4e>
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	2bff      	cmp	r3, #255	; 0xff
 8009de0:	d111      	bne.n	8009e06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009de6:	78ba      	ldrb	r2, [r7, #2]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d002      	beq.n	8009df2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dec:	78bb      	ldrb	r3, [r7, #2]
 8009dee:	2bff      	cmp	r3, #255	; 0xff
 8009df0:	d109      	bne.n	8009e06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009df6:	787a      	ldrb	r2, [r7, #1]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d002      	beq.n	8009e02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009dfc:	787b      	ldrb	r3, [r7, #1]
 8009dfe:	2bff      	cmp	r3, #255	; 0xff
 8009e00:	d101      	bne.n	8009e06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	e006      	b.n	8009e14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d9d6      	bls.n	8009dc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009e12:	23ff      	movs	r3, #255	; 0xff
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	371c      	adds	r7, #28
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f004 f80f 	bl	800de4c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009e2e:	2101      	movs	r1, #1
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f004 f928 	bl	800e086 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af04      	add	r7, sp, #16
 8009e46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d102      	bne.n	8009e62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2203      	movs	r2, #3
 8009e60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b0b      	cmp	r3, #11
 8009e6a:	f200 81be 	bhi.w	800a1ea <USBH_Process+0x3aa>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <USBH_Process+0x34>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009ea5 	.word	0x08009ea5
 8009e78:	08009ed7 	.word	0x08009ed7
 8009e7c:	08009f3f 	.word	0x08009f3f
 8009e80:	0800a185 	.word	0x0800a185
 8009e84:	0800a1eb 	.word	0x0800a1eb
 8009e88:	08009fe3 	.word	0x08009fe3
 8009e8c:	0800a12b 	.word	0x0800a12b
 8009e90:	0800a019 	.word	0x0800a019
 8009e94:	0800a039 	.word	0x0800a039
 8009e98:	0800a059 	.word	0x0800a059
 8009e9c:	0800a09d 	.word	0x0800a09d
 8009ea0:	0800a16d 	.word	0x0800a16d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 819e 	beq.w	800a1ee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009eb8:	20c8      	movs	r0, #200	; 0xc8
 8009eba:	f004 f95b 	bl	800e174 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f004 f821 	bl	800df06 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ed4:	e18b      	b.n	800a1ee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d107      	bne.n	8009ef0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009eee:	e18d      	b.n	800a20c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009efa:	d914      	bls.n	8009f26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f02:	3301      	adds	r3, #1
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d903      	bls.n	8009f1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	220d      	movs	r2, #13
 8009f1a:	701a      	strb	r2, [r3, #0]
      break;
 8009f1c:	e176      	b.n	800a20c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	701a      	strb	r2, [r3, #0]
      break;
 8009f24:	e172      	b.n	800a20c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009f2c:	f103 020a 	add.w	r2, r3, #10
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009f36:	200a      	movs	r0, #10
 8009f38:	f004 f91c 	bl	800e174 <USBH_Delay>
      break;
 8009f3c:	e166      	b.n	800a20c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f4e:	2104      	movs	r1, #4
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f54:	2064      	movs	r0, #100	; 0x64
 8009f56:	f004 f90d 	bl	800e174 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f003 ffac 	bl	800deb8 <USBH_LL_GetSpeed>
 8009f60:	4603      	mov	r3, r0
 8009f62:	461a      	mov	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fa29 	bl	800b3ca <USBH_AllocPipe>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f80:	2180      	movs	r1, #128	; 0x80
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 fa21 	bl	800b3ca <USBH_AllocPipe>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7919      	ldrb	r1, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fa4:	b292      	uxth	r2, r2
 8009fa6:	9202      	str	r2, [sp, #8]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	9201      	str	r2, [sp, #4]
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2280      	movs	r2, #128	; 0x80
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 f9da 	bl	800b36c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	7959      	ldrb	r1, [r3, #5]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fcc:	b292      	uxth	r2, r2
 8009fce:	9202      	str	r2, [sp, #8]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	9201      	str	r2, [sp, #4]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2200      	movs	r2, #0
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 f9c6 	bl	800b36c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fe0:	e114      	b.n	800a20c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f918 	bl	800a218 <USBH_HandleEnum>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f040 80fe 	bne.w	800a1f2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a004:	2b01      	cmp	r3, #1
 800a006:	d103      	bne.n	800a010 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2208      	movs	r2, #8
 800a00c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a00e:	e0f0      	b.n	800a1f2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2207      	movs	r2, #7
 800a014:	701a      	strb	r2, [r3, #0]
      break;
 800a016:	e0ec      	b.n	800a1f2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 80e9 	beq.w	800a1f6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a02a:	2101      	movs	r1, #1
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2208      	movs	r2, #8
 800a034:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a036:	e0de      	b.n	800a1f6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a03e:	b29b      	uxth	r3, r3
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fc2c 	bl	800a8a0 <USBH_SetCfg>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f040 80d5 	bne.w	800a1fa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2209      	movs	r2, #9
 800a054:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a056:	e0d0      	b.n	800a1fa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d016      	beq.n	800a094 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a066:	2101      	movs	r1, #1
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fc3c 	bl	800a8e6 <USBH_SetFeature>
 800a06e:	4603      	mov	r3, r0
 800a070:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d103      	bne.n	800a082 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	220a      	movs	r2, #10
 800a07e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a080:	e0bd      	b.n	800a1fe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b03      	cmp	r3, #3
 800a088:	f040 80b9 	bne.w	800a1fe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	220a      	movs	r2, #10
 800a090:	701a      	strb	r2, [r3, #0]
      break;
 800a092:	e0b4      	b.n	800a1fe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	220a      	movs	r2, #10
 800a098:	701a      	strb	r2, [r3, #0]
      break;
 800a09a:	e0b0      	b.n	800a1fe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 80ad 	beq.w	800a202 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
 800a0b4:	e016      	b.n	800a0e4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a0b6:	7bfa      	ldrb	r2, [r7, #15]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	32de      	adds	r2, #222	; 0xde
 800a0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c0:	791a      	ldrb	r2, [r3, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d108      	bne.n	800a0de <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a0cc:	7bfa      	ldrb	r2, [r7, #15]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	32de      	adds	r2, #222	; 0xde
 800a0d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a0dc:	e005      	b.n	800a0ea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0e5      	beq.n	800a0b6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d016      	beq.n	800a122 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	4798      	blx	r3
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d109      	bne.n	800a11a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2206      	movs	r2, #6
 800a10a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a112:	2103      	movs	r1, #3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a118:	e073      	b.n	800a202 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	220d      	movs	r2, #13
 800a11e:	701a      	strb	r2, [r3, #0]
      break;
 800a120:	e06f      	b.n	800a202 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	220d      	movs	r2, #13
 800a126:	701a      	strb	r2, [r3, #0]
      break;
 800a128:	e06b      	b.n	800a202 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a130:	2b00      	cmp	r3, #0
 800a132:	d017      	beq.n	800a164 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	4798      	blx	r3
 800a140:	4603      	mov	r3, r0
 800a142:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d103      	bne.n	800a154 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	220b      	movs	r2, #11
 800a150:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a152:	e058      	b.n	800a206 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d154      	bne.n	800a206 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	220d      	movs	r2, #13
 800a160:	701a      	strb	r2, [r3, #0]
      break;
 800a162:	e050      	b.n	800a206 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	220d      	movs	r2, #13
 800a168:	701a      	strb	r2, [r3, #0]
      break;
 800a16a:	e04c      	b.n	800a206 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d049      	beq.n	800a20a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
      }
      break;
 800a182:	e042      	b.n	800a20a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7ff fd67 	bl	8009c60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d009      	beq.n	800a1b0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1c0:	2105      	movs	r1, #5
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d107      	bne.n	800a1e2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff fe20 	bl	8009e20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1e0:	e014      	b.n	800a20c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f003 fe32 	bl	800de4c <USBH_LL_Start>
      break;
 800a1e8:	e010      	b.n	800a20c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a1ea:	bf00      	nop
 800a1ec:	e00e      	b.n	800a20c <USBH_Process+0x3cc>
      break;
 800a1ee:	bf00      	nop
 800a1f0:	e00c      	b.n	800a20c <USBH_Process+0x3cc>
      break;
 800a1f2:	bf00      	nop
 800a1f4:	e00a      	b.n	800a20c <USBH_Process+0x3cc>
    break;
 800a1f6:	bf00      	nop
 800a1f8:	e008      	b.n	800a20c <USBH_Process+0x3cc>
      break;
 800a1fa:	bf00      	nop
 800a1fc:	e006      	b.n	800a20c <USBH_Process+0x3cc>
      break;
 800a1fe:	bf00      	nop
 800a200:	e004      	b.n	800a20c <USBH_Process+0x3cc>
      break;
 800a202:	bf00      	nop
 800a204:	e002      	b.n	800a20c <USBH_Process+0x3cc>
      break;
 800a206:	bf00      	nop
 800a208:	e000      	b.n	800a20c <USBH_Process+0x3cc>
      break;
 800a20a:	bf00      	nop
  }
  return USBH_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop

0800a218 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af04      	add	r7, sp, #16
 800a21e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a220:	2301      	movs	r3, #1
 800a222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a224:	2301      	movs	r3, #1
 800a226:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	2b07      	cmp	r3, #7
 800a22e:	f200 81c1 	bhi.w	800a5b4 <USBH_HandleEnum+0x39c>
 800a232:	a201      	add	r2, pc, #4	; (adr r2, 800a238 <USBH_HandleEnum+0x20>)
 800a234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a238:	0800a259 	.word	0x0800a259
 800a23c:	0800a317 	.word	0x0800a317
 800a240:	0800a381 	.word	0x0800a381
 800a244:	0800a40f 	.word	0x0800a40f
 800a248:	0800a479 	.word	0x0800a479
 800a24c:	0800a4e9 	.word	0x0800a4e9
 800a250:	0800a52f 	.word	0x0800a52f
 800a254:	0800a575 	.word	0x0800a575
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a258:	2108      	movs	r1, #8
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fa50 	bl	800a700 <USBH_Get_DevDesc>
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d130      	bne.n	800a2cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	7919      	ldrb	r1, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a28e:	b292      	uxth	r2, r2
 800a290:	9202      	str	r2, [sp, #8]
 800a292:	2200      	movs	r2, #0
 800a294:	9201      	str	r2, [sp, #4]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	4603      	mov	r3, r0
 800a29a:	2280      	movs	r2, #128	; 0x80
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f001 f865 	bl	800b36c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	7959      	ldrb	r1, [r3, #5]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2b6:	b292      	uxth	r2, r2
 800a2b8:	9202      	str	r2, [sp, #8]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	9201      	str	r2, [sp, #4]
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f001 f851 	bl	800b36c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a2ca:	e175      	b.n	800a5b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	f040 8172 	bne.w	800a5b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2da:	3301      	adds	r3, #1
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d903      	bls.n	800a2f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	220d      	movs	r2, #13
 800a2f2:	701a      	strb	r2, [r3, #0]
      break;
 800a2f4:	e160      	b.n	800a5b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	795b      	ldrb	r3, [r3, #5]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 f885 	bl	800b40c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 f87f 	bl	800b40c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
      break;
 800a314:	e150      	b.n	800a5b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a316:	2112      	movs	r1, #18
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f9f1 	bl	800a700 <USBH_Get_DevDesc>
 800a31e:	4603      	mov	r3, r0
 800a320:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d103      	bne.n	800a330 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a32e:	e145      	b.n	800a5bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	2b03      	cmp	r3, #3
 800a334:	f040 8142 	bne.w	800a5bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a33e:	3301      	adds	r3, #1
 800a340:	b2da      	uxtb	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d903      	bls.n	800a35a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	220d      	movs	r2, #13
 800a356:	701a      	strb	r2, [r3, #0]
      break;
 800a358:	e130      	b.n	800a5bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	795b      	ldrb	r3, [r3, #5]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 f853 	bl	800b40c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	791b      	ldrb	r3, [r3, #4]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 f84d 	bl	800b40c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
      break;
 800a37e:	e11d      	b.n	800a5bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a380:	2101      	movs	r1, #1
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa68 	bl	800a858 <USBH_SetAddress>
 800a388:	4603      	mov	r3, r0
 800a38a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d132      	bne.n	800a3f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a392:	2002      	movs	r0, #2
 800a394:	f003 feee 	bl	800e174 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	7919      	ldrb	r1, [r3, #4]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3ba:	b292      	uxth	r2, r2
 800a3bc:	9202      	str	r2, [sp, #8]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	9201      	str	r2, [sp, #4]
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2280      	movs	r2, #128	; 0x80
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 ffcf 	bl	800b36c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7959      	ldrb	r1, [r3, #5]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3e2:	b292      	uxth	r2, r2
 800a3e4:	9202      	str	r2, [sp, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	9201      	str	r2, [sp, #4]
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 ffbb 	bl	800b36c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a3f6:	e0e3      	b.n	800a5c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	f040 80e0 	bne.w	800a5c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220d      	movs	r2, #13
 800a404:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	705a      	strb	r2, [r3, #1]
      break;
 800a40c:	e0d8      	b.n	800a5c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a40e:	2109      	movs	r1, #9
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f99d 	bl	800a750 <USBH_Get_CfgDesc>
 800a416:	4603      	mov	r3, r0
 800a418:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d103      	bne.n	800a428 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2204      	movs	r2, #4
 800a424:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a426:	e0cd      	b.n	800a5c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	f040 80ca 	bne.w	800a5c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a436:	3301      	adds	r3, #1
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a446:	2b03      	cmp	r3, #3
 800a448:	d903      	bls.n	800a452 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	220d      	movs	r2, #13
 800a44e:	701a      	strb	r2, [r3, #0]
      break;
 800a450:	e0b8      	b.n	800a5c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	795b      	ldrb	r3, [r3, #5]
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 ffd7 	bl	800b40c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	791b      	ldrb	r3, [r3, #4]
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 ffd1 	bl	800b40c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
      break;
 800a476:	e0a5      	b.n	800a5c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f965 	bl	800a750 <USBH_Get_CfgDesc>
 800a486:	4603      	mov	r3, r0
 800a488:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d103      	bne.n	800a498 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2205      	movs	r2, #5
 800a494:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a496:	e097      	b.n	800a5c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a498:	7bbb      	ldrb	r3, [r7, #14]
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	f040 8094 	bne.w	800a5c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d903      	bls.n	800a4c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	220d      	movs	r2, #13
 800a4be:	701a      	strb	r2, [r3, #0]
      break;
 800a4c0:	e082      	b.n	800a5c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	795b      	ldrb	r3, [r3, #5]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 ff9f 	bl	800b40c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	791b      	ldrb	r3, [r3, #4]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 ff99 	bl	800b40c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	701a      	strb	r2, [r3, #0]
      break;
 800a4e6:	e06f      	b.n	800a5c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d019      	beq.n	800a526 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4fe:	23ff      	movs	r3, #255	; 0xff
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f949 	bl	800a798 <USBH_Get_StringDesc>
 800a506:	4603      	mov	r3, r0
 800a508:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2206      	movs	r2, #6
 800a514:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a516:	e059      	b.n	800a5cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d156      	bne.n	800a5cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2206      	movs	r2, #6
 800a522:	705a      	strb	r2, [r3, #1]
      break;
 800a524:	e052      	b.n	800a5cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2206      	movs	r2, #6
 800a52a:	705a      	strb	r2, [r3, #1]
      break;
 800a52c:	e04e      	b.n	800a5cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a534:	2b00      	cmp	r3, #0
 800a536:	d019      	beq.n	800a56c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a544:	23ff      	movs	r3, #255	; 0xff
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f926 	bl	800a798 <USBH_Get_StringDesc>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2207      	movs	r2, #7
 800a55a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a55c:	e038      	b.n	800a5d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
 800a560:	2b03      	cmp	r3, #3
 800a562:	d135      	bne.n	800a5d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2207      	movs	r2, #7
 800a568:	705a      	strb	r2, [r3, #1]
      break;
 800a56a:	e031      	b.n	800a5d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2207      	movs	r2, #7
 800a570:	705a      	strb	r2, [r3, #1]
      break;
 800a572:	e02d      	b.n	800a5d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d017      	beq.n	800a5ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a58a:	23ff      	movs	r3, #255	; 0xff
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f903 	bl	800a798 <USBH_Get_StringDesc>
 800a592:	4603      	mov	r3, r0
 800a594:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a5a0:	e018      	b.n	800a5d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d115      	bne.n	800a5d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ac:	e012      	b.n	800a5d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b2:	e00f      	b.n	800a5d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a5b4:	bf00      	nop
 800a5b6:	e00e      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5b8:	bf00      	nop
 800a5ba:	e00c      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5bc:	bf00      	nop
 800a5be:	e00a      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5c0:	bf00      	nop
 800a5c2:	e008      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5c4:	bf00      	nop
 800a5c6:	e006      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5c8:	bf00      	nop
 800a5ca:	e004      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5cc:	bf00      	nop
 800a5ce:	e002      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5d0:	bf00      	nop
 800a5d2:	e000      	b.n	800a5d6 <USBH_HandleEnum+0x3be>
      break;
 800a5d4:	bf00      	nop
  }
  return Status;
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a5f2:	bf00      	nop
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f804 	bl	800a622 <USBH_HandleSof>
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b082      	sub	sp, #8
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b0b      	cmp	r3, #11
 800a632:	d10a      	bne.n	800a64a <USBH_HandleSof+0x28>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
  }
}
 800a64a:	bf00      	nop
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a662:	bf00      	nop
}
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a67e:	bf00      	nop
}
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f003 fbd2 	bl	800de82 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	791b      	ldrb	r3, [r3, #4]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fe91 	bl	800b40c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	795b      	ldrb	r3, [r3, #5]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fe8b 	bl	800b40c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af02      	add	r7, sp, #8
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	b29b      	uxth	r3, r3
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	4613      	mov	r3, r2
 800a71a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a71e:	2100      	movs	r1, #0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f864 	bl	800a7ee <USBH_GetDescriptor>
 800a726:	4603      	mov	r3, r0
 800a728:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a73c:	78fa      	ldrb	r2, [r7, #3]
 800a73e:	b292      	uxth	r2, r2
 800a740:	4619      	mov	r1, r3
 800a742:	f000 f918 	bl	800a976 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af02      	add	r7, sp, #8
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	331c      	adds	r3, #28
 800a760:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a762:	887b      	ldrh	r3, [r7, #2]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a76c:	2100      	movs	r1, #0
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f83d 	bl	800a7ee <USBH_GetDescriptor>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d107      	bne.n	800a78e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a77e:	887b      	ldrh	r3, [r7, #2]
 800a780:	461a      	mov	r2, r3
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f987 	bl	800aa98 <USBH_ParseCfgDesc>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	607a      	str	r2, [r7, #4]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	72fb      	strb	r3, [r7, #11]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a7ac:	7afb      	ldrb	r3, [r7, #11]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a7b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a7bc:	893b      	ldrh	r3, [r7, #8]
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 f812 	bl	800a7ee <USBH_GetDescriptor>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d107      	bne.n	800a7e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7da:	893a      	ldrh	r2, [r7, #8]
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fb24 	bl	800ae2c <USBH_ParseStringDesc>
  }

  return status;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	607b      	str	r3, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	72fb      	strb	r3, [r7, #11]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	789b      	ldrb	r3, [r3, #2]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d11c      	bne.n	800a842 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a808:	7afb      	ldrb	r3, [r7, #11]
 800a80a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2206      	movs	r2, #6
 800a818:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	893a      	ldrh	r2, [r7, #8]
 800a81e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a820:	893b      	ldrh	r3, [r7, #8]
 800a822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a82a:	d104      	bne.n	800a836 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f240 4209 	movw	r2, #1033	; 0x409
 800a832:	829a      	strh	r2, [r3, #20]
 800a834:	e002      	b.n	800a83c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	8b3a      	ldrh	r2, [r7, #24]
 800a840:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a842:	8b3b      	ldrh	r3, [r7, #24]
 800a844:	461a      	mov	r2, r3
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 fb3d 	bl	800aec8 <USBH_CtlReq>
 800a84e:	4603      	mov	r3, r0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	789b      	ldrb	r3, [r3, #2]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d10f      	bne.n	800a88c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2205      	movs	r2, #5
 800a876:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a88c:	2200      	movs	r2, #0
 800a88e:	2100      	movs	r1, #0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fb19 	bl	800aec8 <USBH_CtlReq>
 800a896:	4603      	mov	r3, r0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	789b      	ldrb	r3, [r3, #2]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d10e      	bne.n	800a8d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2209      	movs	r2, #9
 800a8be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	887a      	ldrh	r2, [r7, #2]
 800a8c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 faf6 	bl	800aec8 <USBH_CtlReq>
 800a8dc:	4603      	mov	r3, r0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	789b      	ldrb	r3, [r3, #2]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d10f      	bne.n	800a91a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2203      	movs	r2, #3
 800a904:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	b29a      	uxth	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a91a:	2200      	movs	r2, #0
 800a91c:	2100      	movs	r1, #0
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fad2 	bl	800aec8 <USBH_CtlReq>
 800a924:	4603      	mov	r3, r0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	460b      	mov	r3, r1
 800a938:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	789b      	ldrb	r3, [r3, #2]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d10f      	bne.n	800a962 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2202      	movs	r2, #2
 800a946:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	b29a      	uxth	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a962:	2200      	movs	r2, #0
 800a964:	2100      	movs	r1, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 faae 	bl	800aec8 <USBH_CtlReq>
 800a96c:	4603      	mov	r3, r0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a976:	b480      	push	{r7}
 800a978:	b085      	sub	sp, #20
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	4613      	mov	r3, r2
 800a982:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	781a      	ldrb	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	785a      	ldrb	r2, [r3, #1]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	3302      	adds	r3, #2
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	3303      	adds	r3, #3
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	021b      	lsls	r3, r3, #8
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	791a      	ldrb	r2, [r3, #4]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	795a      	ldrb	r2, [r3, #5]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	799a      	ldrb	r2, [r3, #6]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	79da      	ldrb	r2, [r3, #7]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	79db      	ldrb	r3, [r3, #7]
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	dc11      	bgt.n	800a9fc <USBH_ParseDevDesc+0x86>
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	db16      	blt.n	800aa0a <USBH_ParseDevDesc+0x94>
 800a9dc:	3b08      	subs	r3, #8
 800a9de:	2201      	movs	r2, #1
 800a9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a9e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bf14      	ite	ne
 800a9f0:	2301      	movne	r3, #1
 800a9f2:	2300      	moveq	r3, #0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <USBH_ParseDevDesc+0x8a>
 800a9fa:	e006      	b.n	800aa0a <USBH_ParseDevDesc+0x94>
 800a9fc:	2b40      	cmp	r3, #64	; 0x40
 800a9fe:	d104      	bne.n	800aa0a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	79da      	ldrb	r2, [r3, #7]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	71da      	strb	r2, [r3, #7]
      break;
 800aa08:	e003      	b.n	800aa12 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2240      	movs	r2, #64	; 0x40
 800aa0e:	71da      	strb	r2, [r3, #7]
      break;
 800aa10:	bf00      	nop
  }

  if (length > 8U)
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d939      	bls.n	800aa8c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	3309      	adds	r3, #9
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	021b      	lsls	r3, r3, #8
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	330a      	adds	r3, #10
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	330b      	adds	r3, #11
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	021b      	lsls	r3, r3, #8
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	330c      	adds	r3, #12
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	330d      	adds	r3, #13
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	021b      	lsls	r3, r3, #8
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	4313      	orrs	r3, r2
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	7b9a      	ldrb	r2, [r3, #14]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	7bda      	ldrb	r2, [r3, #15]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	7c1a      	ldrb	r2, [r3, #16]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	7c5a      	ldrb	r2, [r3, #17]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	745a      	strb	r2, [r3, #17]
  }
}
 800aa8c:	bf00      	nop
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08c      	sub	sp, #48	; 0x30
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aaac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	781a      	ldrb	r2, [r3, #0]
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	785a      	ldrb	r2, [r3, #1]
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	3302      	adds	r3, #2
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	b29a      	uxth	r2, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	3303      	adds	r3, #3
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	021b      	lsls	r3, r3, #8
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4313      	orrs	r3, r2
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaf4:	bf28      	it	cs
 800aaf6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	791a      	ldrb	r2, [r3, #4]
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	795a      	ldrb	r2, [r3, #5]
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	799a      	ldrb	r2, [r3, #6]
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	79da      	ldrb	r2, [r3, #7]
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	7a1a      	ldrb	r2, [r3, #8]
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2b09      	cmp	r3, #9
 800ab2e:	d002      	beq.n	800ab36 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	2209      	movs	r2, #9
 800ab34:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ab36:	88fb      	ldrh	r3, [r7, #6]
 800ab38:	2b09      	cmp	r3, #9
 800ab3a:	f240 809d 	bls.w	800ac78 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ab3e:	2309      	movs	r3, #9
 800ab40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab46:	e081      	b.n	800ac4c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab48:	f107 0316 	add.w	r3, r7, #22
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab50:	f000 f99f 	bl	800ae92 <USBH_GetNextDesc>
 800ab54:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	785b      	ldrb	r3, [r3, #1]
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	d176      	bne.n	800ac4c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	2b09      	cmp	r3, #9
 800ab64:	d002      	beq.n	800ab6c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	2209      	movs	r2, #9
 800ab6a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ab6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab70:	221a      	movs	r2, #26
 800ab72:	fb02 f303 	mul.w	r3, r2, r3
 800ab76:	3308      	adds	r3, #8
 800ab78:	6a3a      	ldr	r2, [r7, #32]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	3302      	adds	r3, #2
 800ab7e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ab80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab82:	69f8      	ldr	r0, [r7, #28]
 800ab84:	f000 f87e 	bl	800ac84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab92:	e043      	b.n	800ac1c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab94:	f107 0316 	add.w	r3, r7, #22
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9c:	f000 f979 	bl	800ae92 <USBH_GetNextDesc>
 800aba0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b05      	cmp	r3, #5
 800aba8:	d138      	bne.n	800ac1c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	795b      	ldrb	r3, [r3, #5]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d10f      	bne.n	800abd2 <USBH_ParseCfgDesc+0x13a>
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	799b      	ldrb	r3, [r3, #6]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d10b      	bne.n	800abd2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	79db      	ldrb	r3, [r3, #7]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10f      	bne.n	800abe2 <USBH_ParseCfgDesc+0x14a>
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	2b09      	cmp	r3, #9
 800abc8:	d00b      	beq.n	800abe2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	2209      	movs	r2, #9
 800abce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800abd0:	e007      	b.n	800abe2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	2b07      	cmp	r3, #7
 800abd8:	d004      	beq.n	800abe4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	2207      	movs	r2, #7
 800abde:	701a      	strb	r2, [r3, #0]
 800abe0:	e000      	b.n	800abe4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800abe2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800abe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800abec:	3201      	adds	r2, #1
 800abee:	00d2      	lsls	r2, r2, #3
 800abf0:	211a      	movs	r1, #26
 800abf2:	fb01 f303 	mul.w	r3, r1, r3
 800abf6:	4413      	add	r3, r2
 800abf8:	3308      	adds	r3, #8
 800abfa:	6a3a      	ldr	r2, [r7, #32]
 800abfc:	4413      	add	r3, r2
 800abfe:	3304      	adds	r3, #4
 800ac00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ac02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac04:	69b9      	ldr	r1, [r7, #24]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f000 f86b 	bl	800ace2 <USBH_ParseEPDesc>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ac12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac16:	3301      	adds	r3, #1
 800ac18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	791b      	ldrb	r3, [r3, #4]
 800ac20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d204      	bcs.n	800ac32 <USBH_ParseCfgDesc+0x19a>
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	885a      	ldrh	r2, [r3, #2]
 800ac2c:	8afb      	ldrh	r3, [r7, #22]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d8b0      	bhi.n	800ab94 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	791b      	ldrb	r3, [r3, #4]
 800ac36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d201      	bcs.n	800ac42 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e01c      	b.n	800ac7c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ac42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac46:	3301      	adds	r3, #1
 800ac48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ac4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d805      	bhi.n	800ac60 <USBH_ParseCfgDesc+0x1c8>
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	885a      	ldrh	r2, [r3, #2]
 800ac58:	8afb      	ldrh	r3, [r7, #22]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	f63f af74 	bhi.w	800ab48 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	791b      	ldrb	r3, [r3, #4]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	bf28      	it	cs
 800ac68:	2302      	movcs	r3, #2
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d201      	bcs.n	800ac78 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e001      	b.n	800ac7c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ac78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3730      	adds	r7, #48	; 0x30
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	785a      	ldrb	r2, [r3, #1]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	789a      	ldrb	r2, [r3, #2]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	78da      	ldrb	r2, [r3, #3]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	791a      	ldrb	r2, [r3, #4]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	795a      	ldrb	r2, [r3, #5]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	799a      	ldrb	r2, [r3, #6]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	79da      	ldrb	r2, [r3, #7]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	7a1a      	ldrb	r2, [r3, #8]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	721a      	strb	r2, [r3, #8]
}
 800acd6:	bf00      	nop
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b087      	sub	sp, #28
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	781a      	ldrb	r2, [r3, #0]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	785a      	ldrb	r2, [r3, #1]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	789a      	ldrb	r2, [r3, #2]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	78da      	ldrb	r2, [r3, #3]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3304      	adds	r3, #4
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3305      	adds	r3, #5
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	021b      	lsls	r3, r3, #8
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	4313      	orrs	r3, r2
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	799a      	ldrb	r2, [r3, #6]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	889b      	ldrh	r3, [r3, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d102      	bne.n	800ad44 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	75fb      	strb	r3, [r7, #23]
 800ad42:	e033      	b.n	800adac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	889b      	ldrh	r3, [r3, #4]
 800ad48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ad4c:	f023 0307 	bic.w	r3, r3, #7
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	889b      	ldrh	r3, [r3, #4]
 800ad5a:	b21a      	sxth	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	b299      	uxth	r1, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3305      	adds	r3, #5
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	430b      	orrs	r3, r1
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d110      	bne.n	800ad9e <USBH_ParseEPDesc+0xbc>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	b299      	uxth	r1, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3305      	adds	r3, #5
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	021b      	lsls	r3, r3, #8
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	430b      	orrs	r3, r1
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	b21b      	sxth	r3, r3
 800ad96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad9a:	b21b      	sxth	r3, r3
 800ad9c:	e001      	b.n	800ada2 <USBH_ParseEPDesc+0xc0>
 800ad9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ada2:	4313      	orrs	r3, r2
 800ada4:	b21b      	sxth	r3, r3
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d116      	bne.n	800ade4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	78db      	ldrb	r3, [r3, #3]
 800adba:	f003 0303 	and.w	r3, r3, #3
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d005      	beq.n	800adce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	78db      	ldrb	r3, [r3, #3]
 800adc6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d127      	bne.n	800ae1e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	799b      	ldrb	r3, [r3, #6]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <USBH_ParseEPDesc+0xfc>
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	799b      	ldrb	r3, [r3, #6]
 800adda:	2b10      	cmp	r3, #16
 800addc:	d91f      	bls.n	800ae1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800adde:	2303      	movs	r3, #3
 800ade0:	75fb      	strb	r3, [r7, #23]
 800ade2:	e01c      	b.n	800ae1e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	78db      	ldrb	r3, [r3, #3]
 800ade8:	f003 0303 	and.w	r3, r3, #3
 800adec:	2b01      	cmp	r3, #1
 800adee:	d10a      	bne.n	800ae06 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	799b      	ldrb	r3, [r3, #6]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d003      	beq.n	800ae00 <USBH_ParseEPDesc+0x11e>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	799b      	ldrb	r3, [r3, #6]
 800adfc:	2b10      	cmp	r3, #16
 800adfe:	d90e      	bls.n	800ae1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ae00:	2303      	movs	r3, #3
 800ae02:	75fb      	strb	r3, [r7, #23]
 800ae04:	e00b      	b.n	800ae1e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	78db      	ldrb	r3, [r3, #3]
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	d105      	bne.n	800ae1e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	799b      	ldrb	r3, [r3, #6]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	371c      	adds	r7, #28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d120      	bne.n	800ae86 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	1e9a      	subs	r2, r3, #2
 800ae4a:	88fb      	ldrh	r3, [r7, #6]
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	bf28      	it	cs
 800ae50:	4613      	movcs	r3, r2
 800ae52:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3302      	adds	r3, #2
 800ae58:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	82fb      	strh	r3, [r7, #22]
 800ae5e:	e00b      	b.n	800ae78 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ae60:	8afb      	ldrh	r3, [r7, #22]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	4413      	add	r3, r2
 800ae66:	781a      	ldrb	r2, [r3, #0]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ae72:	8afb      	ldrh	r3, [r7, #22]
 800ae74:	3302      	adds	r3, #2
 800ae76:	82fb      	strh	r3, [r7, #22]
 800ae78:	8afa      	ldrh	r2, [r7, #22]
 800ae7a:	8abb      	ldrh	r3, [r7, #20]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d3ef      	bcc.n	800ae60 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
  }
}
 800ae86:	bf00      	nop
 800ae88:	371c      	adds	r7, #28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	881a      	ldrh	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	4413      	add	r3, r2
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aeba:	68fb      	ldr	r3, [r7, #12]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4613      	mov	r3, r2
 800aed4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aed6:	2301      	movs	r3, #1
 800aed8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	789b      	ldrb	r3, [r3, #2]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d002      	beq.n	800aee8 <USBH_CtlReq+0x20>
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d00f      	beq.n	800af06 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aee6:	e027      	b.n	800af38 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	88fa      	ldrh	r2, [r7, #6]
 800aef2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2201      	movs	r2, #1
 800aef8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2202      	movs	r2, #2
 800aefe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800af00:	2301      	movs	r3, #1
 800af02:	75fb      	strb	r3, [r7, #23]
      break;
 800af04:	e018      	b.n	800af38 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f000 f81c 	bl	800af44 <USBH_HandleControl>
 800af0c:	4603      	mov	r3, r0
 800af0e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <USBH_CtlReq+0x54>
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d106      	bne.n	800af2a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2201      	movs	r2, #1
 800af20:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	761a      	strb	r2, [r3, #24]
      break;
 800af28:	e005      	b.n	800af36 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d102      	bne.n	800af36 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	709a      	strb	r2, [r3, #2]
      break;
 800af36:	bf00      	nop
  }
  return status;
 800af38:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
	...

0800af44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af02      	add	r7, sp, #8
 800af4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800af4c:	2301      	movs	r3, #1
 800af4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af50:	2300      	movs	r3, #0
 800af52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	7e1b      	ldrb	r3, [r3, #24]
 800af58:	3b01      	subs	r3, #1
 800af5a:	2b0a      	cmp	r3, #10
 800af5c:	f200 8156 	bhi.w	800b20c <USBH_HandleControl+0x2c8>
 800af60:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <USBH_HandleControl+0x24>)
 800af62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af66:	bf00      	nop
 800af68:	0800af95 	.word	0x0800af95
 800af6c:	0800afaf 	.word	0x0800afaf
 800af70:	0800b019 	.word	0x0800b019
 800af74:	0800b03f 	.word	0x0800b03f
 800af78:	0800b077 	.word	0x0800b077
 800af7c:	0800b0a1 	.word	0x0800b0a1
 800af80:	0800b0f3 	.word	0x0800b0f3
 800af84:	0800b115 	.word	0x0800b115
 800af88:	0800b151 	.word	0x0800b151
 800af8c:	0800b177 	.word	0x0800b177
 800af90:	0800b1b5 	.word	0x0800b1b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f103 0110 	add.w	r1, r3, #16
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	795b      	ldrb	r3, [r3, #5]
 800af9e:	461a      	mov	r2, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f943 	bl	800b22c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	761a      	strb	r2, [r3, #24]
      break;
 800afac:	e139      	b.n	800b222 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	795b      	ldrb	r3, [r3, #5]
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f003 f853 	bl	800e060 <USBH_LL_GetURBState>
 800afba:	4603      	mov	r3, r0
 800afbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800afbe:	7bbb      	ldrb	r3, [r7, #14]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d11e      	bne.n	800b002 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	7c1b      	ldrb	r3, [r3, #16]
 800afc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	8adb      	ldrh	r3, [r3, #22]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800afd6:	7b7b      	ldrb	r3, [r7, #13]
 800afd8:	2b80      	cmp	r3, #128	; 0x80
 800afda:	d103      	bne.n	800afe4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2203      	movs	r2, #3
 800afe0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800afe2:	e115      	b.n	800b210 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2205      	movs	r2, #5
 800afe8:	761a      	strb	r2, [r3, #24]
      break;
 800afea:	e111      	b.n	800b210 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800afec:	7b7b      	ldrb	r3, [r7, #13]
 800afee:	2b80      	cmp	r3, #128	; 0x80
 800aff0:	d103      	bne.n	800affa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2209      	movs	r2, #9
 800aff6:	761a      	strb	r2, [r3, #24]
      break;
 800aff8:	e10a      	b.n	800b210 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2207      	movs	r2, #7
 800affe:	761a      	strb	r2, [r3, #24]
      break;
 800b000:	e106      	b.n	800b210 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b002:	7bbb      	ldrb	r3, [r7, #14]
 800b004:	2b04      	cmp	r3, #4
 800b006:	d003      	beq.n	800b010 <USBH_HandleControl+0xcc>
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	f040 8100 	bne.w	800b210 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	220b      	movs	r2, #11
 800b014:	761a      	strb	r2, [r3, #24]
      break;
 800b016:	e0fb      	b.n	800b210 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6899      	ldr	r1, [r3, #8]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	899a      	ldrh	r2, [r3, #12]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	791b      	ldrb	r3, [r3, #4]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f93a 	bl	800b2aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2204      	movs	r2, #4
 800b03a:	761a      	strb	r2, [r3, #24]
      break;
 800b03c:	e0f1      	b.n	800b222 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	791b      	ldrb	r3, [r3, #4]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f003 f80b 	bl	800e060 <USBH_LL_GetURBState>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d102      	bne.n	800b05a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2209      	movs	r2, #9
 800b058:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	2b05      	cmp	r3, #5
 800b05e:	d102      	bne.n	800b066 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b060:	2303      	movs	r3, #3
 800b062:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b064:	e0d6      	b.n	800b214 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	2b04      	cmp	r3, #4
 800b06a:	f040 80d3 	bne.w	800b214 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	220b      	movs	r2, #11
 800b072:	761a      	strb	r2, [r3, #24]
      break;
 800b074:	e0ce      	b.n	800b214 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6899      	ldr	r1, [r3, #8]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	899a      	ldrh	r2, [r3, #12]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	795b      	ldrb	r3, [r3, #5]
 800b082:	2001      	movs	r0, #1
 800b084:	9000      	str	r0, [sp, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f8ea 	bl	800b260 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b092:	b29a      	uxth	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2206      	movs	r2, #6
 800b09c:	761a      	strb	r2, [r3, #24]
      break;
 800b09e:	e0c0      	b.n	800b222 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	795b      	ldrb	r3, [r3, #5]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f002 ffda 	bl	800e060 <USBH_LL_GetURBState>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d103      	bne.n	800b0be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2207      	movs	r2, #7
 800b0ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b0bc:	e0ac      	b.n	800b218 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b0be:	7bbb      	ldrb	r3, [r7, #14]
 800b0c0:	2b05      	cmp	r3, #5
 800b0c2:	d105      	bne.n	800b0d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	220c      	movs	r2, #12
 800b0c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ce:	e0a3      	b.n	800b218 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d103      	bne.n	800b0de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2205      	movs	r2, #5
 800b0da:	761a      	strb	r2, [r3, #24]
      break;
 800b0dc:	e09c      	b.n	800b218 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	f040 8099 	bne.w	800b218 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	220b      	movs	r2, #11
 800b0ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b0f0:	e092      	b.n	800b218 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	791b      	ldrb	r3, [r3, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f8d5 	bl	800b2aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b106:	b29a      	uxth	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2208      	movs	r2, #8
 800b110:	761a      	strb	r2, [r3, #24]

      break;
 800b112:	e086      	b.n	800b222 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	791b      	ldrb	r3, [r3, #4]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f002 ffa0 	bl	800e060 <USBH_LL_GetURBState>
 800b120:	4603      	mov	r3, r0
 800b122:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b124:	7bbb      	ldrb	r3, [r7, #14]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d105      	bne.n	800b136 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	220d      	movs	r2, #13
 800b12e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b134:	e072      	b.n	800b21c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	2b04      	cmp	r3, #4
 800b13a:	d103      	bne.n	800b144 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	220b      	movs	r2, #11
 800b140:	761a      	strb	r2, [r3, #24]
      break;
 800b142:	e06b      	b.n	800b21c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b144:	7bbb      	ldrb	r3, [r7, #14]
 800b146:	2b05      	cmp	r3, #5
 800b148:	d168      	bne.n	800b21c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b14a:	2303      	movs	r3, #3
 800b14c:	73fb      	strb	r3, [r7, #15]
      break;
 800b14e:	e065      	b.n	800b21c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	795b      	ldrb	r3, [r3, #5]
 800b154:	2201      	movs	r2, #1
 800b156:	9200      	str	r2, [sp, #0]
 800b158:	2200      	movs	r2, #0
 800b15a:	2100      	movs	r1, #0
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f87f 	bl	800b260 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b168:	b29a      	uxth	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	220a      	movs	r2, #10
 800b172:	761a      	strb	r2, [r3, #24]
      break;
 800b174:	e055      	b.n	800b222 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	795b      	ldrb	r3, [r3, #5]
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f002 ff6f 	bl	800e060 <USBH_LL_GetURBState>
 800b182:	4603      	mov	r3, r0
 800b184:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d105      	bne.n	800b198 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	220d      	movs	r2, #13
 800b194:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b196:	e043      	b.n	800b220 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b198:	7bbb      	ldrb	r3, [r7, #14]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d103      	bne.n	800b1a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2209      	movs	r2, #9
 800b1a2:	761a      	strb	r2, [r3, #24]
      break;
 800b1a4:	e03c      	b.n	800b220 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d139      	bne.n	800b220 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	220b      	movs	r2, #11
 800b1b0:	761a      	strb	r2, [r3, #24]
      break;
 800b1b2:	e035      	b.n	800b220 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7e5b      	ldrb	r3, [r3, #25]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	765a      	strb	r2, [r3, #25]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7e5b      	ldrb	r3, [r3, #25]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d806      	bhi.n	800b1d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b1d4:	e025      	b.n	800b222 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1dc:	2106      	movs	r1, #6
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	795b      	ldrb	r3, [r3, #5]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f90c 	bl	800b40c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	791b      	ldrb	r3, [r3, #4]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f906 	bl	800b40c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b206:	2302      	movs	r3, #2
 800b208:	73fb      	strb	r3, [r7, #15]
      break;
 800b20a:	e00a      	b.n	800b222 <USBH_HandleControl+0x2de>

    default:
      break;
 800b20c:	bf00      	nop
 800b20e:	e008      	b.n	800b222 <USBH_HandleControl+0x2de>
      break;
 800b210:	bf00      	nop
 800b212:	e006      	b.n	800b222 <USBH_HandleControl+0x2de>
      break;
 800b214:	bf00      	nop
 800b216:	e004      	b.n	800b222 <USBH_HandleControl+0x2de>
      break;
 800b218:	bf00      	nop
 800b21a:	e002      	b.n	800b222 <USBH_HandleControl+0x2de>
      break;
 800b21c:	bf00      	nop
 800b21e:	e000      	b.n	800b222 <USBH_HandleControl+0x2de>
      break;
 800b220:	bf00      	nop
  }

  return status;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af04      	add	r7, sp, #16
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	4613      	mov	r3, r2
 800b238:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b23a:	79f9      	ldrb	r1, [r7, #7]
 800b23c:	2300      	movs	r3, #0
 800b23e:	9303      	str	r3, [sp, #12]
 800b240:	2308      	movs	r3, #8
 800b242:	9302      	str	r3, [sp, #8]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	2300      	movs	r3, #0
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	2300      	movs	r3, #0
 800b24e:	2200      	movs	r2, #0
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f002 fed4 	bl	800dffe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af04      	add	r7, sp, #16
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4611      	mov	r1, r2
 800b26c:	461a      	mov	r2, r3
 800b26e:	460b      	mov	r3, r1
 800b270:	80fb      	strh	r3, [r7, #6]
 800b272:	4613      	mov	r3, r2
 800b274:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b280:	2300      	movs	r3, #0
 800b282:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b284:	7979      	ldrb	r1, [r7, #5]
 800b286:	7e3b      	ldrb	r3, [r7, #24]
 800b288:	9303      	str	r3, [sp, #12]
 800b28a:	88fb      	ldrh	r3, [r7, #6]
 800b28c:	9302      	str	r3, [sp, #8]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	9301      	str	r3, [sp, #4]
 800b292:	2301      	movs	r3, #1
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	2300      	movs	r3, #0
 800b298:	2200      	movs	r2, #0
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f002 feaf 	bl	800dffe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b088      	sub	sp, #32
 800b2ae:	af04      	add	r7, sp, #16
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	80fb      	strh	r3, [r7, #6]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b2c0:	7979      	ldrb	r1, [r7, #5]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9303      	str	r3, [sp, #12]
 800b2c6:	88fb      	ldrh	r3, [r7, #6]
 800b2c8:	9302      	str	r3, [sp, #8]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	9301      	str	r3, [sp, #4]
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f002 fe91 	bl	800dffe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b2dc:	2300      	movs	r3, #0

}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b088      	sub	sp, #32
 800b2ea:	af04      	add	r7, sp, #16
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	80fb      	strh	r3, [r7, #6]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b306:	2300      	movs	r3, #0
 800b308:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b30a:	7979      	ldrb	r1, [r7, #5]
 800b30c:	7e3b      	ldrb	r3, [r7, #24]
 800b30e:	9303      	str	r3, [sp, #12]
 800b310:	88fb      	ldrh	r3, [r7, #6]
 800b312:	9302      	str	r3, [sp, #8]
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	9301      	str	r3, [sp, #4]
 800b318:	2301      	movs	r3, #1
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	2302      	movs	r3, #2
 800b31e:	2200      	movs	r2, #0
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f002 fe6c 	bl	800dffe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af04      	add	r7, sp, #16
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	4611      	mov	r1, r2
 800b33c:	461a      	mov	r2, r3
 800b33e:	460b      	mov	r3, r1
 800b340:	80fb      	strh	r3, [r7, #6]
 800b342:	4613      	mov	r3, r2
 800b344:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b346:	7979      	ldrb	r1, [r7, #5]
 800b348:	2300      	movs	r3, #0
 800b34a:	9303      	str	r3, [sp, #12]
 800b34c:	88fb      	ldrh	r3, [r7, #6]
 800b34e:	9302      	str	r3, [sp, #8]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	9301      	str	r3, [sp, #4]
 800b354:	2301      	movs	r3, #1
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	2302      	movs	r3, #2
 800b35a:	2201      	movs	r2, #1
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f002 fe4e 	bl	800dffe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af04      	add	r7, sp, #16
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	4608      	mov	r0, r1
 800b376:	4611      	mov	r1, r2
 800b378:	461a      	mov	r2, r3
 800b37a:	4603      	mov	r3, r0
 800b37c:	70fb      	strb	r3, [r7, #3]
 800b37e:	460b      	mov	r3, r1
 800b380:	70bb      	strb	r3, [r7, #2]
 800b382:	4613      	mov	r3, r2
 800b384:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b386:	7878      	ldrb	r0, [r7, #1]
 800b388:	78ba      	ldrb	r2, [r7, #2]
 800b38a:	78f9      	ldrb	r1, [r7, #3]
 800b38c:	8b3b      	ldrh	r3, [r7, #24]
 800b38e:	9302      	str	r3, [sp, #8]
 800b390:	7d3b      	ldrb	r3, [r7, #20]
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	7c3b      	ldrb	r3, [r7, #16]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	4603      	mov	r3, r0
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f002 fde1 	bl	800df62 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b3b6:	78fb      	ldrb	r3, [r7, #3]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f002 fe00 	bl	800dfc0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f836 	bl	800b448 <USBH_GetFreePipe>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b3e0:	89fb      	ldrh	r3, [r7, #14]
 800b3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d00a      	beq.n	800b400 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b3ea:	78fa      	ldrb	r2, [r7, #3]
 800b3ec:	89fb      	ldrh	r3, [r7, #14]
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	33e0      	adds	r3, #224	; 0xe0
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	440b      	add	r3, r1
 800b3fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b400:	89fb      	ldrh	r3, [r7, #14]
 800b402:	b2db      	uxtb	r3, r3
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	2b0f      	cmp	r3, #15
 800b41c:	d80d      	bhi.n	800b43a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b41e:	78fb      	ldrb	r3, [r7, #3]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	33e0      	adds	r3, #224	; 0xe0
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	78fb      	ldrb	r3, [r7, #3]
 800b42c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b430:	6879      	ldr	r1, [r7, #4]
 800b432:	33e0      	adds	r3, #224	; 0xe0
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	440b      	add	r3, r1
 800b438:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b454:	2300      	movs	r3, #0
 800b456:	73fb      	strb	r3, [r7, #15]
 800b458:	e00f      	b.n	800b47a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	33e0      	adds	r3, #224	; 0xe0
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	b29b      	uxth	r3, r3
 800b472:	e007      	b.n	800b484 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b474:	7bfb      	ldrb	r3, [r7, #15]
 800b476:	3301      	adds	r3, #1
 800b478:	73fb      	strb	r3, [r7, #15]
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	2b0f      	cmp	r3, #15
 800b47e:	d9ec      	bls.n	800b45a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b480:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	4a08      	ldr	r2, [pc, #32]	; (800b4c0 <disk_status+0x30>)
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	79fa      	ldrb	r2, [r7, #7]
 800b4a8:	4905      	ldr	r1, [pc, #20]	; (800b4c0 <disk_status+0x30>)
 800b4aa:	440a      	add	r2, r1
 800b4ac:	7a12      	ldrb	r2, [r2, #8]
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4798      	blx	r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	200016ac 	.word	0x200016ac

0800b4c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b4d2:	79fb      	ldrb	r3, [r7, #7]
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	; (800b50c <disk_initialize+0x48>)
 800b4d6:	5cd3      	ldrb	r3, [r2, r3]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d111      	bne.n	800b500 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b4dc:	79fb      	ldrb	r3, [r7, #7]
 800b4de:	4a0b      	ldr	r2, [pc, #44]	; (800b50c <disk_initialize+0x48>)
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	4a09      	ldr	r2, [pc, #36]	; (800b50c <disk_initialize+0x48>)
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	79fa      	ldrb	r2, [r7, #7]
 800b4f2:	4906      	ldr	r1, [pc, #24]	; (800b50c <disk_initialize+0x48>)
 800b4f4:	440a      	add	r2, r1
 800b4f6:	7a12      	ldrb	r2, [r2, #8]
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	200016ac 	.word	0x200016ac

0800b510 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b510:	b590      	push	{r4, r7, lr}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60b9      	str	r1, [r7, #8]
 800b518:	607a      	str	r2, [r7, #4]
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	4a0a      	ldr	r2, [pc, #40]	; (800b54c <disk_read+0x3c>)
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	689c      	ldr	r4, [r3, #8]
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4a07      	ldr	r2, [pc, #28]	; (800b54c <disk_read+0x3c>)
 800b530:	4413      	add	r3, r2
 800b532:	7a18      	ldrb	r0, [r3, #8]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	47a0      	blx	r4
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
}
 800b542:	4618      	mov	r0, r3
 800b544:	371c      	adds	r7, #28
 800b546:	46bd      	mov	sp, r7
 800b548:	bd90      	pop	{r4, r7, pc}
 800b54a:	bf00      	nop
 800b54c:	200016ac 	.word	0x200016ac

0800b550 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	60b9      	str	r1, [r7, #8]
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	4a0a      	ldr	r2, [pc, #40]	; (800b58c <disk_write+0x3c>)
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	68dc      	ldr	r4, [r3, #12]
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	4a07      	ldr	r2, [pc, #28]	; (800b58c <disk_write+0x3c>)
 800b570:	4413      	add	r3, r2
 800b572:	7a18      	ldrb	r0, [r3, #8]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	68b9      	ldr	r1, [r7, #8]
 800b57a:	47a0      	blx	r4
 800b57c:	4603      	mov	r3, r0
 800b57e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b580:	7dfb      	ldrb	r3, [r7, #23]
}
 800b582:	4618      	mov	r0, r3
 800b584:	371c      	adds	r7, #28
 800b586:	46bd      	mov	sp, r7
 800b588:	bd90      	pop	{r4, r7, pc}
 800b58a:	bf00      	nop
 800b58c:	200016ac 	.word	0x200016ac

0800b590 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	603a      	str	r2, [r7, #0]
 800b59a:	71fb      	strb	r3, [r7, #7]
 800b59c:	460b      	mov	r3, r1
 800b59e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <disk_ioctl+0x38>)
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	79fa      	ldrb	r2, [r7, #7]
 800b5ae:	4906      	ldr	r1, [pc, #24]	; (800b5c8 <disk_ioctl+0x38>)
 800b5b0:	440a      	add	r2, r1
 800b5b2:	7a10      	ldrb	r0, [r2, #8]
 800b5b4:	79b9      	ldrb	r1, [r7, #6]
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	4798      	blx	r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	200016ac 	.word	0x200016ac

0800b5cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b5dc:	89fb      	ldrh	r3, [r7, #14]
 800b5de:	021b      	lsls	r3, r3, #8
 800b5e0:	b21a      	sxth	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	b21b      	sxth	r3, r3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	b21b      	sxth	r3, r3
 800b5ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b5ee:	89fb      	ldrh	r3, [r7, #14]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3303      	adds	r3, #3
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	3202      	adds	r2, #2
 800b614:	7812      	ldrb	r2, [r2, #0]
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	021b      	lsls	r3, r3, #8
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	3201      	adds	r2, #1
 800b622:	7812      	ldrb	r2, [r2, #0]
 800b624:	4313      	orrs	r3, r2
 800b626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	7812      	ldrb	r2, [r2, #0]
 800b630:	4313      	orrs	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]
	return rv;
 800b634:	68fb      	ldr	r3, [r7, #12]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b642:	b480      	push	{r7}
 800b644:	b083      	sub	sp, #12
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	460b      	mov	r3, r1
 800b64c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	1c5a      	adds	r2, r3, #1
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	887a      	ldrh	r2, [r7, #2]
 800b656:	b2d2      	uxtb	r2, r2
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	887b      	ldrh	r3, [r7, #2]
 800b65c:	0a1b      	lsrs	r3, r3, #8
 800b65e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	607a      	str	r2, [r7, #4]
 800b666:	887a      	ldrh	r2, [r7, #2]
 800b668:	b2d2      	uxtb	r2, r2
 800b66a:	701a      	strb	r2, [r3, #0]
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	0a1b      	lsrs	r3, r3, #8
 800b692:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	b2d2      	uxtb	r2, r2
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	0a1b      	lsrs	r3, r3, #8
 800b6b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	607a      	str	r2, [r7, #4]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	b2d2      	uxtb	r2, r2
 800b6c2:	701a      	strb	r2, [r3, #0]
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00d      	beq.n	800b706 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	1c53      	adds	r3, r2, #1
 800b6ee:	613b      	str	r3, [r7, #16]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	1c59      	adds	r1, r3, #1
 800b6f4:	6179      	str	r1, [r7, #20]
 800b6f6:	7812      	ldrb	r2, [r2, #0]
 800b6f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1f1      	bne.n	800b6ea <mem_cpy+0x1a>
	}
}
 800b706:	bf00      	nop
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b712:	b480      	push	{r7}
 800b714:	b087      	sub	sp, #28
 800b716:	af00      	add	r7, sp, #0
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	617a      	str	r2, [r7, #20]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	b2d2      	uxtb	r2, r2
 800b72c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3b01      	subs	r3, #1
 800b732:	607b      	str	r3, [r7, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f3      	bne.n	800b722 <mem_set+0x10>
}
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	371c      	adds	r7, #28
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b748:	b480      	push	{r7}
 800b74a:	b089      	sub	sp, #36	; 0x24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	61fb      	str	r3, [r7, #28]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	61fa      	str	r2, [r7, #28]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	4619      	mov	r1, r3
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	61ba      	str	r2, [r7, #24]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	1acb      	subs	r3, r1, r3
 800b774:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3b01      	subs	r3, #1
 800b77a:	607b      	str	r3, [r7, #4]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <mem_cmp+0x40>
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0eb      	beq.n	800b760 <mem_cmp+0x18>

	return r;
 800b788:	697b      	ldr	r3, [r7, #20]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3724      	adds	r7, #36	; 0x24
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b796:	b480      	push	{r7}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b7a0:	e002      	b.n	800b7a8 <chk_chr+0x12>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	607b      	str	r3, [r7, #4]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <chk_chr+0x26>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d1f2      	bne.n	800b7a2 <chk_chr+0xc>
	return *str;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	781b      	ldrb	r3, [r3, #0]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60bb      	str	r3, [r7, #8]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	e029      	b.n	800b834 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b7e0:	4a27      	ldr	r2, [pc, #156]	; (800b880 <chk_lock+0xb4>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	011b      	lsls	r3, r3, #4
 800b7e6:	4413      	add	r3, r2
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d01d      	beq.n	800b82a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b7ee:	4a24      	ldr	r2, [pc, #144]	; (800b880 <chk_lock+0xb4>)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	011b      	lsls	r3, r3, #4
 800b7f4:	4413      	add	r3, r2
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d116      	bne.n	800b82e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b800:	4a1f      	ldr	r2, [pc, #124]	; (800b880 <chk_lock+0xb4>)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	011b      	lsls	r3, r3, #4
 800b806:	4413      	add	r3, r2
 800b808:	3304      	adds	r3, #4
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b810:	429a      	cmp	r2, r3
 800b812:	d10c      	bne.n	800b82e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b814:	4a1a      	ldr	r2, [pc, #104]	; (800b880 <chk_lock+0xb4>)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	4413      	add	r3, r2
 800b81c:	3308      	adds	r3, #8
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b824:	429a      	cmp	r2, r3
 800b826:	d102      	bne.n	800b82e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b828:	e007      	b.n	800b83a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b82a:	2301      	movs	r3, #1
 800b82c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3301      	adds	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d9d2      	bls.n	800b7e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d109      	bne.n	800b854 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <chk_lock+0x80>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d101      	bne.n	800b850 <chk_lock+0x84>
 800b84c:	2300      	movs	r3, #0
 800b84e:	e010      	b.n	800b872 <chk_lock+0xa6>
 800b850:	2312      	movs	r3, #18
 800b852:	e00e      	b.n	800b872 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d108      	bne.n	800b86c <chk_lock+0xa0>
 800b85a:	4a09      	ldr	r2, [pc, #36]	; (800b880 <chk_lock+0xb4>)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	4413      	add	r3, r2
 800b862:	330c      	adds	r3, #12
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b86a:	d101      	bne.n	800b870 <chk_lock+0xa4>
 800b86c:	2310      	movs	r3, #16
 800b86e:	e000      	b.n	800b872 <chk_lock+0xa6>
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	2000168c 	.word	0x2000168c

0800b884 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b88a:	2300      	movs	r3, #0
 800b88c:	607b      	str	r3, [r7, #4]
 800b88e:	e002      	b.n	800b896 <enq_lock+0x12>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3301      	adds	r3, #1
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d806      	bhi.n	800b8aa <enq_lock+0x26>
 800b89c:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <enq_lock+0x40>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	011b      	lsls	r3, r3, #4
 800b8a2:	4413      	add	r3, r2
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1f2      	bne.n	800b890 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	bf14      	ite	ne
 800b8b0:	2301      	movne	r3, #1
 800b8b2:	2300      	moveq	r3, #0
 800b8b4:	b2db      	uxtb	r3, r3
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	2000168c 	.word	0x2000168c

0800b8c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	e01f      	b.n	800b918 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b8d8:	4a41      	ldr	r2, [pc, #260]	; (800b9e0 <inc_lock+0x118>)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	011b      	lsls	r3, r3, #4
 800b8de:	4413      	add	r3, r2
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d113      	bne.n	800b912 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b8ea:	4a3d      	ldr	r2, [pc, #244]	; (800b9e0 <inc_lock+0x118>)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	4413      	add	r3, r2
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d109      	bne.n	800b912 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b8fe:	4a38      	ldr	r2, [pc, #224]	; (800b9e0 <inc_lock+0x118>)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	4413      	add	r3, r2
 800b906:	3308      	adds	r3, #8
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b90e:	429a      	cmp	r2, r3
 800b910:	d006      	beq.n	800b920 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3301      	adds	r3, #1
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d9dc      	bls.n	800b8d8 <inc_lock+0x10>
 800b91e:	e000      	b.n	800b922 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b920:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d132      	bne.n	800b98e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b928:	2300      	movs	r3, #0
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	e002      	b.n	800b934 <inc_lock+0x6c>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	3301      	adds	r3, #1
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d806      	bhi.n	800b948 <inc_lock+0x80>
 800b93a:	4a29      	ldr	r2, [pc, #164]	; (800b9e0 <inc_lock+0x118>)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	4413      	add	r3, r2
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1f2      	bne.n	800b92e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d101      	bne.n	800b952 <inc_lock+0x8a>
 800b94e:	2300      	movs	r3, #0
 800b950:	e040      	b.n	800b9d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	4922      	ldr	r1, [pc, #136]	; (800b9e0 <inc_lock+0x118>)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	011b      	lsls	r3, r3, #4
 800b95c:	440b      	add	r3, r1
 800b95e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	491e      	ldr	r1, [pc, #120]	; (800b9e0 <inc_lock+0x118>)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	440b      	add	r3, r1
 800b96c:	3304      	adds	r3, #4
 800b96e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695a      	ldr	r2, [r3, #20]
 800b974:	491a      	ldr	r1, [pc, #104]	; (800b9e0 <inc_lock+0x118>)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	011b      	lsls	r3, r3, #4
 800b97a:	440b      	add	r3, r1
 800b97c:	3308      	adds	r3, #8
 800b97e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b980:	4a17      	ldr	r2, [pc, #92]	; (800b9e0 <inc_lock+0x118>)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	4413      	add	r3, r2
 800b988:	330c      	adds	r3, #12
 800b98a:	2200      	movs	r2, #0
 800b98c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d009      	beq.n	800b9a8 <inc_lock+0xe0>
 800b994:	4a12      	ldr	r2, [pc, #72]	; (800b9e0 <inc_lock+0x118>)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	011b      	lsls	r3, r3, #4
 800b99a:	4413      	add	r3, r2
 800b99c:	330c      	adds	r3, #12
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <inc_lock+0xe0>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e015      	b.n	800b9d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d108      	bne.n	800b9c0 <inc_lock+0xf8>
 800b9ae:	4a0c      	ldr	r2, [pc, #48]	; (800b9e0 <inc_lock+0x118>)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	4413      	add	r3, r2
 800b9b6:	330c      	adds	r3, #12
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	e001      	b.n	800b9c4 <inc_lock+0xfc>
 800b9c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9c4:	4906      	ldr	r1, [pc, #24]	; (800b9e0 <inc_lock+0x118>)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	440b      	add	r3, r1
 800b9cc:	330c      	adds	r3, #12
 800b9ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3301      	adds	r3, #1
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	2000168c 	.word	0x2000168c

0800b9e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d825      	bhi.n	800ba44 <dec_lock+0x60>
		n = Files[i].ctr;
 800b9f8:	4a17      	ldr	r2, [pc, #92]	; (800ba58 <dec_lock+0x74>)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	4413      	add	r3, r2
 800ba00:	330c      	adds	r3, #12
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba06:	89fb      	ldrh	r3, [r7, #14]
 800ba08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba0c:	d101      	bne.n	800ba12 <dec_lock+0x2e>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba12:	89fb      	ldrh	r3, [r7, #14]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <dec_lock+0x3a>
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba1e:	4a0e      	ldr	r2, [pc, #56]	; (800ba58 <dec_lock+0x74>)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	4413      	add	r3, r2
 800ba26:	330c      	adds	r3, #12
 800ba28:	89fa      	ldrh	r2, [r7, #14]
 800ba2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d105      	bne.n	800ba3e <dec_lock+0x5a>
 800ba32:	4a09      	ldr	r2, [pc, #36]	; (800ba58 <dec_lock+0x74>)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	4413      	add	r3, r2
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	737b      	strb	r3, [r7, #13]
 800ba42:	e001      	b.n	800ba48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ba44:	2302      	movs	r3, #2
 800ba46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ba48:	7b7b      	ldrb	r3, [r7, #13]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3714      	adds	r7, #20
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	2000168c 	.word	0x2000168c

0800ba5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ba64:	2300      	movs	r3, #0
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	e010      	b.n	800ba8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ba6a:	4a0d      	ldr	r2, [pc, #52]	; (800baa0 <clear_lock+0x44>)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	011b      	lsls	r3, r3, #4
 800ba70:	4413      	add	r3, r2
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d105      	bne.n	800ba86 <clear_lock+0x2a>
 800ba7a:	4a09      	ldr	r2, [pc, #36]	; (800baa0 <clear_lock+0x44>)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	4413      	add	r3, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d9eb      	bls.n	800ba6a <clear_lock+0xe>
	}
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	2000168c 	.word	0x2000168c

0800baa4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	78db      	ldrb	r3, [r3, #3]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d034      	beq.n	800bb22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	7858      	ldrb	r0, [r3, #1]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bac8:	2301      	movs	r3, #1
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	f7ff fd40 	bl	800b550 <disk_write>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <sync_window+0x38>
			res = FR_DISK_ERR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	73fb      	strb	r3, [r7, #15]
 800bada:	e022      	b.n	800bb22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d217      	bcs.n	800bb22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	789b      	ldrb	r3, [r3, #2]
 800baf6:	613b      	str	r3, [r7, #16]
 800baf8:	e010      	b.n	800bb1c <sync_window+0x78>
					wsect += fs->fsize;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	4413      	add	r3, r2
 800bb02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7858      	ldrb	r0, [r3, #1]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb0e:	2301      	movs	r3, #1
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	f7ff fd1d 	bl	800b550 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	613b      	str	r3, [r7, #16]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d8eb      	bhi.n	800bafa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3718      	adds	r7, #24
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d01b      	beq.n	800bb7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7ff ffad 	bl	800baa4 <sync_window>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d113      	bne.n	800bb7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	7858      	ldrb	r0, [r3, #1]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb5e:	2301      	movs	r3, #1
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	f7ff fcd5 	bl	800b510 <disk_read>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff ff87 	bl	800baa4 <sync_window>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d158      	bne.n	800bc52 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d148      	bne.n	800bc3a <sync_fs+0xb2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	791b      	ldrb	r3, [r3, #4]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d144      	bne.n	800bc3a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3330      	adds	r3, #48	; 0x30
 800bbb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbb8:	2100      	movs	r1, #0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fda9 	bl	800b712 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3330      	adds	r3, #48	; 0x30
 800bbc4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbc8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff fd38 	bl	800b642 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3330      	adds	r3, #48	; 0x30
 800bbd6:	4921      	ldr	r1, [pc, #132]	; (800bc5c <sync_fs+0xd4>)
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fd4d 	bl	800b678 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	3330      	adds	r3, #48	; 0x30
 800bbe2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bbe6:	491e      	ldr	r1, [pc, #120]	; (800bc60 <sync_fs+0xd8>)
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff fd45 	bl	800b678 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3330      	adds	r3, #48	; 0x30
 800bbf2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	f7ff fd3b 	bl	800b678 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	3330      	adds	r3, #48	; 0x30
 800bc06:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4610      	mov	r0, r2
 800bc12:	f7ff fd31 	bl	800b678 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	1c5a      	adds	r2, r3, #1
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7858      	ldrb	r0, [r3, #1]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f7ff fc8e 	bl	800b550 <disk_write>
			fs->fsi_flag = 0;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	2100      	movs	r1, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff fca4 	bl	800b590 <disk_ioctl>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <sync_fs+0xca>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	41615252 	.word	0x41615252
 800bc60:	61417272 	.word	0x61417272

0800bc64 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	3b02      	subs	r3, #2
 800bc72:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	3b02      	subs	r3, #2
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d301      	bcc.n	800bc84 <clust2sect+0x20>
 800bc80:	2300      	movs	r3, #0
 800bc82:	e008      	b.n	800bc96 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	895b      	ldrh	r3, [r3, #10]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	fb03 f202 	mul.w	r2, r3, r2
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc94:	4413      	add	r3, r2
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b086      	sub	sp, #24
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d904      	bls.n	800bcc2 <get_fat+0x20>
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d302      	bcc.n	800bcc8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	617b      	str	r3, [r7, #20]
 800bcc6:	e08f      	b.n	800bde8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bcc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bccc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d062      	beq.n	800bd9c <get_fat+0xfa>
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	dc7c      	bgt.n	800bdd4 <get_fat+0x132>
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d002      	beq.n	800bce4 <get_fat+0x42>
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d042      	beq.n	800bd68 <get_fat+0xc6>
 800bce2:	e077      	b.n	800bdd4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	085b      	lsrs	r3, r3, #1
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6a1a      	ldr	r2, [r3, #32]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	0a5b      	lsrs	r3, r3, #9
 800bcfa:	4413      	add	r3, r2
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6938      	ldr	r0, [r7, #16]
 800bd00:	f7ff ff14 	bl	800bb2c <move_window>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d167      	bne.n	800bdda <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	60fa      	str	r2, [r7, #12]
 800bd10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	4413      	add	r3, r2
 800bd18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd1c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	6a1a      	ldr	r2, [r3, #32]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	0a5b      	lsrs	r3, r3, #9
 800bd26:	4413      	add	r3, r2
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6938      	ldr	r0, [r7, #16]
 800bd2c:	f7ff fefe 	bl	800bb2c <move_window>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d153      	bne.n	800bdde <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd44:	021b      	lsls	r3, r3, #8
 800bd46:	461a      	mov	r2, r3
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <get_fat+0xbc>
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	091b      	lsrs	r3, r3, #4
 800bd5c:	e002      	b.n	800bd64 <get_fat+0xc2>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd64:	617b      	str	r3, [r7, #20]
			break;
 800bd66:	e03f      	b.n	800bde8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6a1a      	ldr	r2, [r3, #32]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	0a1b      	lsrs	r3, r3, #8
 800bd70:	4413      	add	r3, r2
 800bd72:	4619      	mov	r1, r3
 800bd74:	6938      	ldr	r0, [r7, #16]
 800bd76:	f7ff fed9 	bl	800bb2c <move_window>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d130      	bne.n	800bde2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd8e:	4413      	add	r3, r2
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff fc1b 	bl	800b5cc <ld_word>
 800bd96:	4603      	mov	r3, r0
 800bd98:	617b      	str	r3, [r7, #20]
			break;
 800bd9a:	e025      	b.n	800bde8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6a1a      	ldr	r2, [r3, #32]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	09db      	lsrs	r3, r3, #7
 800bda4:	4413      	add	r3, r2
 800bda6:	4619      	mov	r1, r3
 800bda8:	6938      	ldr	r0, [r7, #16]
 800bdaa:	f7ff febf 	bl	800bb2c <move_window>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d118      	bne.n	800bde6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdc2:	4413      	add	r3, r2
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fc19 	bl	800b5fc <ld_dword>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bdd0:	617b      	str	r3, [r7, #20]
			break;
 800bdd2:	e009      	b.n	800bde8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	e006      	b.n	800bde8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdda:	bf00      	nop
 800bddc:	e004      	b.n	800bde8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdde:	bf00      	nop
 800bde0:	e002      	b.n	800bde8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bde2:	bf00      	nop
 800bde4:	e000      	b.n	800bde8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bde6:	bf00      	nop
		}
	}

	return val;
 800bde8:	697b      	ldr	r3, [r7, #20]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bdf2:	b590      	push	{r4, r7, lr}
 800bdf4:	b089      	sub	sp, #36	; 0x24
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bdfe:	2302      	movs	r3, #2
 800be00:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b01      	cmp	r3, #1
 800be06:	f240 80d2 	bls.w	800bfae <put_fat+0x1bc>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	695b      	ldr	r3, [r3, #20]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	429a      	cmp	r2, r3
 800be12:	f080 80cc 	bcs.w	800bfae <put_fat+0x1bc>
		switch (fs->fs_type) {
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	f000 8096 	beq.w	800bf4c <put_fat+0x15a>
 800be20:	2b03      	cmp	r3, #3
 800be22:	f300 80cd 	bgt.w	800bfc0 <put_fat+0x1ce>
 800be26:	2b01      	cmp	r3, #1
 800be28:	d002      	beq.n	800be30 <put_fat+0x3e>
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d06e      	beq.n	800bf0c <put_fat+0x11a>
 800be2e:	e0c7      	b.n	800bfc0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	61bb      	str	r3, [r7, #24]
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	4413      	add	r3, r2
 800be3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6a1a      	ldr	r2, [r3, #32]
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	0a5b      	lsrs	r3, r3, #9
 800be46:	4413      	add	r3, r2
 800be48:	4619      	mov	r1, r3
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7ff fe6e 	bl	800bb2c <move_window>
 800be50:	4603      	mov	r3, r0
 800be52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be54:	7ffb      	ldrb	r3, [r7, #31]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f040 80ab 	bne.w	800bfb2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	1c59      	adds	r1, r3, #1
 800be66:	61b9      	str	r1, [r7, #24]
 800be68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be6c:	4413      	add	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f003 0301 	and.w	r3, r3, #1
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00d      	beq.n	800be96 <put_fat+0xa4>
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	b25b      	sxtb	r3, r3
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	b25a      	sxtb	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	011b      	lsls	r3, r3, #4
 800be8c:	b25b      	sxtb	r3, r3
 800be8e:	4313      	orrs	r3, r2
 800be90:	b25b      	sxtb	r3, r3
 800be92:	b2db      	uxtb	r3, r3
 800be94:	e001      	b.n	800be9a <put_fat+0xa8>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2201      	movs	r2, #1
 800bea2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6a1a      	ldr	r2, [r3, #32]
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	0a5b      	lsrs	r3, r3, #9
 800beac:	4413      	add	r3, r2
 800beae:	4619      	mov	r1, r3
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7ff fe3b 	bl	800bb2c <move_window>
 800beb6:	4603      	mov	r3, r0
 800beb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800beba:	7ffb      	ldrb	r3, [r7, #31]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d17a      	bne.n	800bfb6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800becc:	4413      	add	r3, r2
 800bece:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <put_fat+0xf0>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	091b      	lsrs	r3, r3, #4
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	e00e      	b.n	800bf00 <put_fat+0x10e>
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	b25b      	sxtb	r3, r3
 800bee8:	f023 030f 	bic.w	r3, r3, #15
 800beec:	b25a      	sxtb	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	0a1b      	lsrs	r3, r3, #8
 800bef2:	b25b      	sxtb	r3, r3
 800bef4:	f003 030f 	and.w	r3, r3, #15
 800bef8:	b25b      	sxtb	r3, r3
 800befa:	4313      	orrs	r3, r2
 800befc:	b25b      	sxtb	r3, r3
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	697a      	ldr	r2, [r7, #20]
 800bf02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	70da      	strb	r2, [r3, #3]
			break;
 800bf0a:	e059      	b.n	800bfc0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6a1a      	ldr	r2, [r3, #32]
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	4413      	add	r3, r2
 800bf16:	4619      	mov	r1, r3
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f7ff fe07 	bl	800bb2c <move_window>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf22:	7ffb      	ldrb	r3, [r7, #31]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d148      	bne.n	800bfba <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf36:	4413      	add	r3, r2
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	b292      	uxth	r2, r2
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff fb7f 	bl	800b642 <st_word>
			fs->wflag = 1;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2201      	movs	r2, #1
 800bf48:	70da      	strb	r2, [r3, #3]
			break;
 800bf4a:	e039      	b.n	800bfc0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a1a      	ldr	r2, [r3, #32]
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	09db      	lsrs	r3, r3, #7
 800bf54:	4413      	add	r3, r2
 800bf56:	4619      	mov	r1, r3
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f7ff fde7 	bl	800bb2c <move_window>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf62:	7ffb      	ldrb	r3, [r7, #31]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d12a      	bne.n	800bfbe <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf7c:	4413      	add	r3, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fb3c 	bl	800b5fc <ld_dword>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bf8a:	4323      	orrs	r3, r4
 800bf8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf9c:	4413      	add	r3, r2
 800bf9e:	6879      	ldr	r1, [r7, #4]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fb69 	bl	800b678 <st_dword>
			fs->wflag = 1;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	70da      	strb	r2, [r3, #3]
			break;
 800bfac:	e008      	b.n	800bfc0 <put_fat+0x1ce>
		}
	}
 800bfae:	bf00      	nop
 800bfb0:	e006      	b.n	800bfc0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfb2:	bf00      	nop
 800bfb4:	e004      	b.n	800bfc0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfb6:	bf00      	nop
 800bfb8:	e002      	b.n	800bfc0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfba:	bf00      	nop
 800bfbc:	e000      	b.n	800bfc0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bfbe:	bf00      	nop
	return res;
 800bfc0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3724      	adds	r7, #36	; 0x24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd90      	pop	{r4, r7, pc}

0800bfca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b088      	sub	sp, #32
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	60f8      	str	r0, [r7, #12]
 800bfd2:	60b9      	str	r1, [r7, #8]
 800bfd4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d904      	bls.n	800bff0 <remove_chain+0x26>
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d301      	bcc.n	800bff4 <remove_chain+0x2a>
 800bff0:	2302      	movs	r3, #2
 800bff2:	e04b      	b.n	800c08c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00c      	beq.n	800c014 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bffa:	f04f 32ff 	mov.w	r2, #4294967295
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	69b8      	ldr	r0, [r7, #24]
 800c002:	f7ff fef6 	bl	800bdf2 <put_fat>
 800c006:	4603      	mov	r3, r0
 800c008:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c00a:	7ffb      	ldrb	r3, [r7, #31]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <remove_chain+0x4a>
 800c010:	7ffb      	ldrb	r3, [r7, #31]
 800c012:	e03b      	b.n	800c08c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff fe43 	bl	800bca2 <get_fat>
 800c01c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d031      	beq.n	800c088 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d101      	bne.n	800c02e <remove_chain+0x64>
 800c02a:	2302      	movs	r3, #2
 800c02c:	e02e      	b.n	800c08c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c034:	d101      	bne.n	800c03a <remove_chain+0x70>
 800c036:	2301      	movs	r3, #1
 800c038:	e028      	b.n	800c08c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c03a:	2200      	movs	r2, #0
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	69b8      	ldr	r0, [r7, #24]
 800c040:	f7ff fed7 	bl	800bdf2 <put_fat>
 800c044:	4603      	mov	r3, r0
 800c046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c048:	7ffb      	ldrb	r3, [r7, #31]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <remove_chain+0x88>
 800c04e:	7ffb      	ldrb	r3, [r7, #31]
 800c050:	e01c      	b.n	800c08c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	691a      	ldr	r2, [r3, #16]
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	695b      	ldr	r3, [r3, #20]
 800c05a:	3b02      	subs	r3, #2
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d20b      	bcs.n	800c078 <remove_chain+0xae>
			fs->free_clst++;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	791b      	ldrb	r3, [r3, #4]
 800c06e:	f043 0301 	orr.w	r3, r3, #1
 800c072:	b2da      	uxtb	r2, r3
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	695b      	ldr	r3, [r3, #20]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	429a      	cmp	r2, r3
 800c084:	d3c6      	bcc.n	800c014 <remove_chain+0x4a>
 800c086:	e000      	b.n	800c08a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c088:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3720      	adds	r7, #32
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b088      	sub	sp, #32
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10d      	bne.n	800c0c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <create_chain+0x2c>
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	69ba      	ldr	r2, [r7, #24]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d31b      	bcc.n	800c0f8 <create_chain+0x64>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	61bb      	str	r3, [r7, #24]
 800c0c4:	e018      	b.n	800c0f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff fdea 	bl	800bca2 <get_fat>
 800c0ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d801      	bhi.n	800c0da <create_chain+0x46>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e070      	b.n	800c1bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e0:	d101      	bne.n	800c0e6 <create_chain+0x52>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	e06a      	b.n	800c1bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d201      	bcs.n	800c0f4 <create_chain+0x60>
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	e063      	b.n	800c1bc <create_chain+0x128>
		scl = clst;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	3301      	adds	r3, #1
 800c100:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	69fa      	ldr	r2, [r7, #28]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d307      	bcc.n	800c11c <create_chain+0x88>
				ncl = 2;
 800c10c:	2302      	movs	r3, #2
 800c10e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c110:	69fa      	ldr	r2, [r7, #28]
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	429a      	cmp	r2, r3
 800c116:	d901      	bls.n	800c11c <create_chain+0x88>
 800c118:	2300      	movs	r3, #0
 800c11a:	e04f      	b.n	800c1bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c11c:	69f9      	ldr	r1, [r7, #28]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fdbf 	bl	800bca2 <get_fat>
 800c124:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00e      	beq.n	800c14a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d003      	beq.n	800c13a <create_chain+0xa6>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c138:	d101      	bne.n	800c13e <create_chain+0xaa>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	e03e      	b.n	800c1bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c13e:	69fa      	ldr	r2, [r7, #28]
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	429a      	cmp	r2, r3
 800c144:	d1da      	bne.n	800c0fc <create_chain+0x68>
 800c146:	2300      	movs	r3, #0
 800c148:	e038      	b.n	800c1bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c14a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c14c:	f04f 32ff 	mov.w	r2, #4294967295
 800c150:	69f9      	ldr	r1, [r7, #28]
 800c152:	6938      	ldr	r0, [r7, #16]
 800c154:	f7ff fe4d 	bl	800bdf2 <put_fat>
 800c158:	4603      	mov	r3, r0
 800c15a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c15c:	7dfb      	ldrb	r3, [r7, #23]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d109      	bne.n	800c176 <create_chain+0xe2>
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d006      	beq.n	800c176 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c168:	69fa      	ldr	r2, [r7, #28]
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6938      	ldr	r0, [r7, #16]
 800c16e:	f7ff fe40 	bl	800bdf2 <put_fat>
 800c172:	4603      	mov	r3, r0
 800c174:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c176:	7dfb      	ldrb	r3, [r7, #23]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d116      	bne.n	800c1aa <create_chain+0x116>
		fs->last_clst = ncl;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	69fa      	ldr	r2, [r7, #28]
 800c180:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	691a      	ldr	r2, [r3, #16]
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	3b02      	subs	r3, #2
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d804      	bhi.n	800c19a <create_chain+0x106>
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	1e5a      	subs	r2, r3, #1
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	791b      	ldrb	r3, [r3, #4]
 800c19e:	f043 0301 	orr.w	r3, r3, #1
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	711a      	strb	r2, [r3, #4]
 800c1a8:	e007      	b.n	800c1ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c1aa:	7dfb      	ldrb	r3, [r7, #23]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d102      	bne.n	800c1b6 <create_chain+0x122>
 800c1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b4:	e000      	b.n	800c1b8 <create_chain+0x124>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c1ba:	69fb      	ldr	r3, [r7, #28]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3720      	adds	r7, #32
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d8:	3304      	adds	r3, #4
 800c1da:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	0a5b      	lsrs	r3, r3, #9
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	8952      	ldrh	r2, [r2, #10]
 800c1e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	1d1a      	adds	r2, r3, #4
 800c1ee:	613a      	str	r2, [r7, #16]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <clmt_clust+0x3a>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e010      	b.n	800c220 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	429a      	cmp	r2, r3
 800c204:	d307      	bcc.n	800c216 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	3304      	adds	r3, #4
 800c212:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c214:	e7e9      	b.n	800c1ea <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c216:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	4413      	add	r3, r2
}
 800c220:	4618      	mov	r0, r3
 800c222:	371c      	adds	r7, #28
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c242:	d204      	bcs.n	800c24e <dir_sdi+0x22>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	f003 031f 	and.w	r3, r3, #31
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c24e:	2302      	movs	r3, #2
 800c250:	e063      	b.n	800c31a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <dir_sdi+0x46>
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d902      	bls.n	800c272 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c270:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10c      	bne.n	800c292 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	095b      	lsrs	r3, r3, #5
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	8912      	ldrh	r2, [r2, #8]
 800c280:	4293      	cmp	r3, r2
 800c282:	d301      	bcc.n	800c288 <dir_sdi+0x5c>
 800c284:	2302      	movs	r3, #2
 800c286:	e048      	b.n	800c31a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	61da      	str	r2, [r3, #28]
 800c290:	e029      	b.n	800c2e6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	895b      	ldrh	r3, [r3, #10]
 800c296:	025b      	lsls	r3, r3, #9
 800c298:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c29a:	e019      	b.n	800c2d0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6979      	ldr	r1, [r7, #20]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fcfe 	bl	800bca2 <get_fat>
 800c2a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d101      	bne.n	800c2b4 <dir_sdi+0x88>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e032      	b.n	800c31a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d904      	bls.n	800c2c4 <dir_sdi+0x98>
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d301      	bcc.n	800c2c8 <dir_sdi+0x9c>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e028      	b.n	800c31a <dir_sdi+0xee>
			ofs -= csz;
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d2e1      	bcs.n	800c29c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c2d8:	6979      	ldr	r1, [r7, #20]
 800c2da:	6938      	ldr	r0, [r7, #16]
 800c2dc:	f7ff fcc2 	bl	800bc64 <clust2sect>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	69db      	ldr	r3, [r3, #28]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <dir_sdi+0xcc>
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	e010      	b.n	800c31a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	69da      	ldr	r2, [r3, #28]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	0a5b      	lsrs	r3, r3, #9
 800c300:	441a      	add	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c312:	441a      	add	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b086      	sub	sp, #24
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	3320      	adds	r3, #32
 800c338:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <dir_next+0x28>
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c348:	d301      	bcc.n	800c34e <dir_next+0x2c>
 800c34a:	2304      	movs	r3, #4
 800c34c:	e0aa      	b.n	800c4a4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c354:	2b00      	cmp	r3, #0
 800c356:	f040 8098 	bne.w	800c48a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10b      	bne.n	800c384 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	8912      	ldrh	r2, [r2, #8]
 800c374:	4293      	cmp	r3, r2
 800c376:	f0c0 8088 	bcc.w	800c48a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	61da      	str	r2, [r3, #28]
 800c380:	2304      	movs	r3, #4
 800c382:	e08f      	b.n	800c4a4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	0a5b      	lsrs	r3, r3, #9
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	8952      	ldrh	r2, [r2, #10]
 800c38c:	3a01      	subs	r2, #1
 800c38e:	4013      	ands	r3, r2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d17a      	bne.n	800c48a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	4619      	mov	r1, r3
 800c39c:	4610      	mov	r0, r2
 800c39e:	f7ff fc80 	bl	800bca2 <get_fat>
 800c3a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d801      	bhi.n	800c3ae <dir_next+0x8c>
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e07a      	b.n	800c4a4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b4:	d101      	bne.n	800c3ba <dir_next+0x98>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e074      	b.n	800c4a4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d358      	bcc.n	800c476 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d104      	bne.n	800c3d4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	61da      	str	r2, [r3, #28]
 800c3d0:	2304      	movs	r3, #4
 800c3d2:	e067      	b.n	800c4a4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7ff fe59 	bl	800c094 <create_chain>
 800c3e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <dir_next+0xcc>
 800c3ea:	2307      	movs	r3, #7
 800c3ec:	e05a      	b.n	800c4a4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d101      	bne.n	800c3f8 <dir_next+0xd6>
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	e055      	b.n	800c4a4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fe:	d101      	bne.n	800c404 <dir_next+0xe2>
 800c400:	2301      	movs	r3, #1
 800c402:	e04f      	b.n	800c4a4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f7ff fb4d 	bl	800baa4 <sync_window>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <dir_next+0xf2>
 800c410:	2301      	movs	r3, #1
 800c412:	e047      	b.n	800c4a4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3330      	adds	r3, #48	; 0x30
 800c418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c41c:	2100      	movs	r1, #0
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff f977 	bl	800b712 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c424:	2300      	movs	r3, #0
 800c426:	613b      	str	r3, [r7, #16]
 800c428:	6979      	ldr	r1, [r7, #20]
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f7ff fc1a 	bl	800bc64 <clust2sect>
 800c430:	4602      	mov	r2, r0
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	62da      	str	r2, [r3, #44]	; 0x2c
 800c436:	e012      	b.n	800c45e <dir_next+0x13c>
						fs->wflag = 1;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2201      	movs	r2, #1
 800c43c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f7ff fb30 	bl	800baa4 <sync_window>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <dir_next+0x12c>
 800c44a:	2301      	movs	r3, #1
 800c44c:	e02a      	b.n	800c4a4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	3301      	adds	r3, #1
 800c452:	613b      	str	r3, [r7, #16]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	895b      	ldrh	r3, [r3, #10]
 800c462:	461a      	mov	r2, r3
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	4293      	cmp	r3, r2
 800c468:	d3e6      	bcc.n	800c438 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	1ad2      	subs	r2, r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c47c:	6979      	ldr	r1, [r7, #20]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff fbf0 	bl	800bc64 <clust2sect>
 800c484:	4602      	mov	r2, r0
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49c:	441a      	add	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4bc:	2100      	movs	r1, #0
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7ff feb4 	bl	800c22c <dir_sdi>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d12b      	bne.n	800c526 <dir_alloc+0x7a>
		n = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	69db      	ldr	r3, [r3, #28]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f7ff fb27 	bl	800bb2c <move_window>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d11d      	bne.n	800c524 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a1b      	ldr	r3, [r3, #32]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	2be5      	cmp	r3, #229	; 0xe5
 800c4f0:	d004      	beq.n	800c4fc <dir_alloc+0x50>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d107      	bne.n	800c50c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	3301      	adds	r3, #1
 800c500:	613b      	str	r3, [r7, #16]
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	d102      	bne.n	800c510 <dir_alloc+0x64>
 800c50a:	e00c      	b.n	800c526 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c50c:	2300      	movs	r3, #0
 800c50e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c510:	2101      	movs	r1, #1
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff ff05 	bl	800c322 <dir_next>
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0d7      	beq.n	800c4d2 <dir_alloc+0x26>
 800c522:	e000      	b.n	800c526 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c524:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c526:	7dfb      	ldrb	r3, [r7, #23]
 800c528:	2b04      	cmp	r3, #4
 800c52a:	d101      	bne.n	800c530 <dir_alloc+0x84>
 800c52c:	2307      	movs	r3, #7
 800c52e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c530:	7dfb      	ldrb	r3, [r7, #23]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3718      	adds	r7, #24
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b084      	sub	sp, #16
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	331a      	adds	r3, #26
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff f83f 	bl	800b5cc <ld_word>
 800c54e:	4603      	mov	r3, r0
 800c550:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	2b03      	cmp	r3, #3
 800c558:	d109      	bne.n	800c56e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	3314      	adds	r3, #20
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff f834 	bl	800b5cc <ld_word>
 800c564:	4603      	mov	r3, r0
 800c566:	041b      	lsls	r3, r3, #16
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c56e:	68fb      	ldr	r3, [r7, #12]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	331a      	adds	r3, #26
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	b292      	uxth	r2, r2
 800c58c:	4611      	mov	r1, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff f857 	bl	800b642 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d109      	bne.n	800c5b0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	f103 0214 	add.w	r2, r3, #20
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	0c1b      	lsrs	r3, r3, #16
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	f7ff f849 	bl	800b642 <st_word>
	}
}
 800c5b0:	bf00      	nop
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff fe2f 	bl	800c22c <dir_sdi>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c5d2:	7dfb      	ldrb	r3, [r7, #23]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d001      	beq.n	800c5dc <dir_find+0x24>
 800c5d8:	7dfb      	ldrb	r3, [r7, #23]
 800c5da:	e03e      	b.n	800c65a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69db      	ldr	r3, [r3, #28]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6938      	ldr	r0, [r7, #16]
 800c5e4:	f7ff faa2 	bl	800bb2c <move_window>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d12f      	bne.n	800c652 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <dir_find+0x4e>
 800c600:	2304      	movs	r3, #4
 800c602:	75fb      	strb	r3, [r7, #23]
 800c604:	e028      	b.n	800c658 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	330b      	adds	r3, #11
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c612:	b2da      	uxtb	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a1b      	ldr	r3, [r3, #32]
 800c61c:	330b      	adds	r3, #11
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 0308 	and.w	r3, r3, #8
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10a      	bne.n	800c63e <dir_find+0x86>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a18      	ldr	r0, [r3, #32]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3324      	adds	r3, #36	; 0x24
 800c630:	220b      	movs	r2, #11
 800c632:	4619      	mov	r1, r3
 800c634:	f7ff f888 	bl	800b748 <mem_cmp>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00b      	beq.n	800c656 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c63e:	2100      	movs	r1, #0
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fe6e 	bl	800c322 <dir_next>
 800c646:	4603      	mov	r3, r0
 800c648:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0c5      	beq.n	800c5dc <dir_find+0x24>
 800c650:	e002      	b.n	800c658 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c652:	bf00      	nop
 800c654:	e000      	b.n	800c658 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c656:	bf00      	nop

	return res;
 800c658:	7dfb      	ldrb	r3, [r7, #23]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c670:	2101      	movs	r1, #1
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff ff1a 	bl	800c4ac <dir_alloc>
 800c678:	4603      	mov	r3, r0
 800c67a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d11c      	bne.n	800c6bc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	4619      	mov	r1, r3
 800c688:	68b8      	ldr	r0, [r7, #8]
 800c68a:	f7ff fa4f 	bl	800bb2c <move_window>
 800c68e:	4603      	mov	r3, r0
 800c690:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d111      	bne.n	800c6bc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a1b      	ldr	r3, [r3, #32]
 800c69c:	2220      	movs	r2, #32
 800c69e:	2100      	movs	r1, #0
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff f836 	bl	800b712 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a18      	ldr	r0, [r3, #32]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3324      	adds	r3, #36	; 0x24
 800c6ae:	220b      	movs	r2, #11
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	f7ff f80d 	bl	800b6d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
	...

0800c6c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	3324      	adds	r3, #36	; 0x24
 800c6dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c6de:	220b      	movs	r2, #11
 800c6e0:	2120      	movs	r1, #32
 800c6e2:	68b8      	ldr	r0, [r7, #8]
 800c6e4:	f7ff f815 	bl	800b712 <mem_set>
	si = i = 0; ni = 8;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	613b      	str	r3, [r7, #16]
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	61fb      	str	r3, [r7, #28]
 800c6f0:	2308      	movs	r3, #8
 800c6f2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	61fa      	str	r2, [r7, #28]
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c702:	7efb      	ldrb	r3, [r7, #27]
 800c704:	2b20      	cmp	r3, #32
 800c706:	d94e      	bls.n	800c7a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c708:	7efb      	ldrb	r3, [r7, #27]
 800c70a:	2b2f      	cmp	r3, #47	; 0x2f
 800c70c:	d006      	beq.n	800c71c <create_name+0x54>
 800c70e:	7efb      	ldrb	r3, [r7, #27]
 800c710:	2b5c      	cmp	r3, #92	; 0x5c
 800c712:	d110      	bne.n	800c736 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c714:	e002      	b.n	800c71c <create_name+0x54>
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	3301      	adds	r3, #1
 800c71a:	61fb      	str	r3, [r7, #28]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	4413      	add	r3, r2
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	2b2f      	cmp	r3, #47	; 0x2f
 800c726:	d0f6      	beq.n	800c716 <create_name+0x4e>
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	4413      	add	r3, r2
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b5c      	cmp	r3, #92	; 0x5c
 800c732:	d0f0      	beq.n	800c716 <create_name+0x4e>
			break;
 800c734:	e038      	b.n	800c7a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c736:	7efb      	ldrb	r3, [r7, #27]
 800c738:	2b2e      	cmp	r3, #46	; 0x2e
 800c73a:	d003      	beq.n	800c744 <create_name+0x7c>
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	429a      	cmp	r2, r3
 800c742:	d30c      	bcc.n	800c75e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	2b0b      	cmp	r3, #11
 800c748:	d002      	beq.n	800c750 <create_name+0x88>
 800c74a:	7efb      	ldrb	r3, [r7, #27]
 800c74c:	2b2e      	cmp	r3, #46	; 0x2e
 800c74e:	d001      	beq.n	800c754 <create_name+0x8c>
 800c750:	2306      	movs	r3, #6
 800c752:	e044      	b.n	800c7de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c754:	2308      	movs	r3, #8
 800c756:	613b      	str	r3, [r7, #16]
 800c758:	230b      	movs	r3, #11
 800c75a:	617b      	str	r3, [r7, #20]
			continue;
 800c75c:	e022      	b.n	800c7a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c75e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c762:	2b00      	cmp	r3, #0
 800c764:	da04      	bge.n	800c770 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c766:	7efb      	ldrb	r3, [r7, #27]
 800c768:	3b80      	subs	r3, #128	; 0x80
 800c76a:	4a1f      	ldr	r2, [pc, #124]	; (800c7e8 <create_name+0x120>)
 800c76c:	5cd3      	ldrb	r3, [r2, r3]
 800c76e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c770:	7efb      	ldrb	r3, [r7, #27]
 800c772:	4619      	mov	r1, r3
 800c774:	481d      	ldr	r0, [pc, #116]	; (800c7ec <create_name+0x124>)
 800c776:	f7ff f80e 	bl	800b796 <chk_chr>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <create_name+0xbc>
 800c780:	2306      	movs	r3, #6
 800c782:	e02c      	b.n	800c7de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c784:	7efb      	ldrb	r3, [r7, #27]
 800c786:	2b60      	cmp	r3, #96	; 0x60
 800c788:	d905      	bls.n	800c796 <create_name+0xce>
 800c78a:	7efb      	ldrb	r3, [r7, #27]
 800c78c:	2b7a      	cmp	r3, #122	; 0x7a
 800c78e:	d802      	bhi.n	800c796 <create_name+0xce>
 800c790:	7efb      	ldrb	r3, [r7, #27]
 800c792:	3b20      	subs	r3, #32
 800c794:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	1c5a      	adds	r2, r3, #1
 800c79a:	613a      	str	r2, [r7, #16]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	4413      	add	r3, r2
 800c7a0:	7efa      	ldrb	r2, [r7, #27]
 800c7a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c7a4:	e7a6      	b.n	800c6f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	441a      	add	r2, r3
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <create_name+0xf4>
 800c7b8:	2306      	movs	r3, #6
 800c7ba:	e010      	b.n	800c7de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2be5      	cmp	r3, #229	; 0xe5
 800c7c2:	d102      	bne.n	800c7ca <create_name+0x102>
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2205      	movs	r2, #5
 800c7c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c7ca:	7efb      	ldrb	r3, [r7, #27]
 800c7cc:	2b20      	cmp	r3, #32
 800c7ce:	d801      	bhi.n	800c7d4 <create_name+0x10c>
 800c7d0:	2204      	movs	r2, #4
 800c7d2:	e000      	b.n	800c7d6 <create_name+0x10e>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	330b      	adds	r3, #11
 800c7da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c7dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3720      	adds	r7, #32
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	0800e614 	.word	0x0800e614
 800c7ec:	0800e53c 	.word	0x0800e53c

0800c7f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c804:	e002      	b.n	800c80c <follow_path+0x1c>
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	3301      	adds	r3, #1
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b2f      	cmp	r3, #47	; 0x2f
 800c812:	d0f8      	beq.n	800c806 <follow_path+0x16>
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b5c      	cmp	r3, #92	; 0x5c
 800c81a:	d0f4      	beq.n	800c806 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	2200      	movs	r2, #0
 800c820:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b1f      	cmp	r3, #31
 800c828:	d80a      	bhi.n	800c840 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2280      	movs	r2, #128	; 0x80
 800c82e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c832:	2100      	movs	r1, #0
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff fcf9 	bl	800c22c <dir_sdi>
 800c83a:	4603      	mov	r3, r0
 800c83c:	75fb      	strb	r3, [r7, #23]
 800c83e:	e043      	b.n	800c8c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c840:	463b      	mov	r3, r7
 800c842:	4619      	mov	r1, r3
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff ff3f 	bl	800c6c8 <create_name>
 800c84a:	4603      	mov	r3, r0
 800c84c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d134      	bne.n	800c8be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff feaf 	bl	800c5b8 <dir_find>
 800c85a:	4603      	mov	r3, r0
 800c85c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c864:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00a      	beq.n	800c882 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
 800c86e:	2b04      	cmp	r3, #4
 800c870:	d127      	bne.n	800c8c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c872:	7afb      	ldrb	r3, [r7, #11]
 800c874:	f003 0304 	and.w	r3, r3, #4
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d122      	bne.n	800c8c2 <follow_path+0xd2>
 800c87c:	2305      	movs	r3, #5
 800c87e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c880:	e01f      	b.n	800c8c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c882:	7afb      	ldrb	r3, [r7, #11]
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d11c      	bne.n	800c8c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	799b      	ldrb	r3, [r3, #6]
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	2b00      	cmp	r3, #0
 800c896:	d102      	bne.n	800c89e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c898:	2305      	movs	r3, #5
 800c89a:	75fb      	strb	r3, [r7, #23]
 800c89c:	e014      	b.n	800c8c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ac:	4413      	add	r3, r2
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f7ff fe42 	bl	800c53a <ld_clust>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8bc:	e7c0      	b.n	800c840 <follow_path+0x50>
			if (res != FR_OK) break;
 800c8be:	bf00      	nop
 800c8c0:	e002      	b.n	800c8c8 <follow_path+0xd8>
				break;
 800c8c2:	bf00      	nop
 800c8c4:	e000      	b.n	800c8c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c8c6:	bf00      	nop
			}
		}
	}

	return res;
 800c8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b087      	sub	sp, #28
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8da:	f04f 33ff 	mov.w	r3, #4294967295
 800c8de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d031      	beq.n	800c94c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	617b      	str	r3, [r7, #20]
 800c8ee:	e002      	b.n	800c8f6 <get_ldnumber+0x24>
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	617b      	str	r3, [r7, #20]
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	2b20      	cmp	r3, #32
 800c8fc:	d903      	bls.n	800c906 <get_ldnumber+0x34>
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b3a      	cmp	r3, #58	; 0x3a
 800c904:	d1f4      	bne.n	800c8f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b3a      	cmp	r3, #58	; 0x3a
 800c90c:	d11c      	bne.n	800c948 <get_ldnumber+0x76>
			tp = *path;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	60fa      	str	r2, [r7, #12]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	3b30      	subs	r3, #48	; 0x30
 800c91e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2b09      	cmp	r3, #9
 800c924:	d80e      	bhi.n	800c944 <get_ldnumber+0x72>
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d10a      	bne.n	800c944 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d107      	bne.n	800c944 <get_ldnumber+0x72>
					vol = (int)i;
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	3301      	adds	r3, #1
 800c93c:	617b      	str	r3, [r7, #20]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	e002      	b.n	800c94e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c948:	2300      	movs	r3, #0
 800c94a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c94c:	693b      	ldr	r3, [r7, #16]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	70da      	strb	r2, [r3, #3]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295
 800c972:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff f8d8 	bl	800bb2c <move_window>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <check_fs+0x2a>
 800c982:	2304      	movs	r3, #4
 800c984:	e038      	b.n	800c9f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3330      	adds	r3, #48	; 0x30
 800c98a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fe fe1c 	bl	800b5cc <ld_word>
 800c994:	4603      	mov	r3, r0
 800c996:	461a      	mov	r2, r3
 800c998:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d001      	beq.n	800c9a4 <check_fs+0x48>
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e029      	b.n	800c9f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9aa:	2be9      	cmp	r3, #233	; 0xe9
 800c9ac:	d009      	beq.n	800c9c2 <check_fs+0x66>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9b4:	2beb      	cmp	r3, #235	; 0xeb
 800c9b6:	d11e      	bne.n	800c9f6 <check_fs+0x9a>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c9be:	2b90      	cmp	r3, #144	; 0x90
 800c9c0:	d119      	bne.n	800c9f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3330      	adds	r3, #48	; 0x30
 800c9c6:	3336      	adds	r3, #54	; 0x36
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fe17 	bl	800b5fc <ld_dword>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9d4:	4a0a      	ldr	r2, [pc, #40]	; (800ca00 <check_fs+0xa4>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d101      	bne.n	800c9de <check_fs+0x82>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e00c      	b.n	800c9f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3330      	adds	r3, #48	; 0x30
 800c9e2:	3352      	adds	r3, #82	; 0x52
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fe09 	bl	800b5fc <ld_dword>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	4a05      	ldr	r2, [pc, #20]	; (800ca04 <check_fs+0xa8>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d101      	bne.n	800c9f6 <check_fs+0x9a>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e000      	b.n	800c9f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c9f6:	2302      	movs	r3, #2
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	00544146 	.word	0x00544146
 800ca04:	33544146 	.word	0x33544146

0800ca08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b096      	sub	sp, #88	; 0x58
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	4613      	mov	r3, r2
 800ca14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f7ff ff58 	bl	800c8d2 <get_ldnumber>
 800ca22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	da01      	bge.n	800ca2e <find_volume+0x26>
 800ca2a:	230b      	movs	r3, #11
 800ca2c:	e22d      	b.n	800ce8a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ca2e:	4aa1      	ldr	r2, [pc, #644]	; (800ccb4 <find_volume+0x2ac>)
 800ca30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <find_volume+0x3a>
 800ca3e:	230c      	movs	r3, #12
 800ca40:	e223      	b.n	800ce8a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	f023 0301 	bic.w	r3, r3, #1
 800ca4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01a      	beq.n	800ca8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	785b      	ldrb	r3, [r3, #1]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fe fd17 	bl	800b490 <disk_status>
 800ca62:	4603      	mov	r3, r0
 800ca64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca6c:	f003 0301 	and.w	r3, r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10c      	bne.n	800ca8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <find_volume+0x82>
 800ca7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca7e:	f003 0304 	and.w	r3, r3, #4
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ca86:	230a      	movs	r3, #10
 800ca88:	e1ff      	b.n	800ce8a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e1fd      	b.n	800ce8a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	2200      	movs	r2, #0
 800ca92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	785b      	ldrb	r3, [r3, #1]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe fd0f 	bl	800b4c4 <disk_initialize>
 800caa6:	4603      	mov	r3, r0
 800caa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800caac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cab8:	2303      	movs	r3, #3
 800caba:	e1e6      	b.n	800ce8a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d007      	beq.n	800cad2 <find_volume+0xca>
 800cac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cac6:	f003 0304 	and.w	r3, r3, #4
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cace:	230a      	movs	r3, #10
 800cad0:	e1db      	b.n	800ce8a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cada:	f7ff ff3f 	bl	800c95c <check_fs>
 800cade:	4603      	mov	r3, r0
 800cae0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d149      	bne.n	800cb80 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800caec:	2300      	movs	r3, #0
 800caee:	643b      	str	r3, [r7, #64]	; 0x40
 800caf0:	e01e      	b.n	800cb30 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800caf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cafa:	011b      	lsls	r3, r3, #4
 800cafc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cb00:	4413      	add	r3, r2
 800cb02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	3304      	adds	r3, #4
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d006      	beq.n	800cb1c <find_volume+0x114>
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	3308      	adds	r3, #8
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fd72 	bl	800b5fc <ld_dword>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	e000      	b.n	800cb1e <find_volume+0x116>
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	3358      	adds	r3, #88	; 0x58
 800cb24:	443b      	add	r3, r7
 800cb26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	643b      	str	r3, [r7, #64]	; 0x40
 800cb30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d9dd      	bls.n	800caf2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb36:	2300      	movs	r3, #0
 800cb38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <find_volume+0x13e>
 800cb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb42:	3b01      	subs	r3, #1
 800cb44:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	3358      	adds	r3, #88	; 0x58
 800cb4c:	443b      	add	r3, r7
 800cb4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d005      	beq.n	800cb66 <find_volume+0x15e>
 800cb5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb5e:	f7ff fefd 	bl	800c95c <check_fs>
 800cb62:	4603      	mov	r3, r0
 800cb64:	e000      	b.n	800cb68 <find_volume+0x160>
 800cb66:	2303      	movs	r3, #3
 800cb68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d905      	bls.n	800cb80 <find_volume+0x178>
 800cb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb76:	3301      	adds	r3, #1
 800cb78:	643b      	str	r3, [r7, #64]	; 0x40
 800cb7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d9e2      	bls.n	800cb46 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	d101      	bne.n	800cb8c <find_volume+0x184>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e17e      	b.n	800ce8a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d901      	bls.n	800cb98 <find_volume+0x190>
 800cb94:	230d      	movs	r3, #13
 800cb96:	e178      	b.n	800ce8a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	3330      	adds	r3, #48	; 0x30
 800cb9c:	330b      	adds	r3, #11
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe fd14 	bl	800b5cc <ld_word>
 800cba4:	4603      	mov	r3, r0
 800cba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbaa:	d001      	beq.n	800cbb0 <find_volume+0x1a8>
 800cbac:	230d      	movs	r3, #13
 800cbae:	e16c      	b.n	800ce8a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	3330      	adds	r3, #48	; 0x30
 800cbb4:	3316      	adds	r3, #22
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe fd08 	bl	800b5cc <ld_word>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <find_volume+0x1cc>
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	3330      	adds	r3, #48	; 0x30
 800cbca:	3324      	adds	r3, #36	; 0x24
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fe fd15 	bl	800b5fc <ld_dword>
 800cbd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbd8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	789b      	ldrb	r3, [r3, #2]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d005      	beq.n	800cbf8 <find_volume+0x1f0>
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	789b      	ldrb	r3, [r3, #2]
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d001      	beq.n	800cbf8 <find_volume+0x1f0>
 800cbf4:	230d      	movs	r3, #13
 800cbf6:	e148      	b.n	800ce8a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	789b      	ldrb	r3, [r3, #2]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc00:	fb02 f303 	mul.w	r3, r2, r3
 800cc04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	895b      	ldrh	r3, [r3, #10]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d008      	beq.n	800cc2c <find_volume+0x224>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	895b      	ldrh	r3, [r3, #10]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	895b      	ldrh	r3, [r3, #10]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	4013      	ands	r3, r2
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <find_volume+0x228>
 800cc2c:	230d      	movs	r3, #13
 800cc2e:	e12c      	b.n	800ce8a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	3330      	adds	r3, #48	; 0x30
 800cc34:	3311      	adds	r3, #17
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fcc8 	bl	800b5cc <ld_word>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	461a      	mov	r2, r3
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	891b      	ldrh	r3, [r3, #8]
 800cc48:	f003 030f 	and.w	r3, r3, #15
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <find_volume+0x24e>
 800cc52:	230d      	movs	r3, #13
 800cc54:	e119      	b.n	800ce8a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	3330      	adds	r3, #48	; 0x30
 800cc5a:	3313      	adds	r3, #19
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fe fcb5 	bl	800b5cc <ld_word>
 800cc62:	4603      	mov	r3, r0
 800cc64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d106      	bne.n	800cc7a <find_volume+0x272>
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	3330      	adds	r3, #48	; 0x30
 800cc70:	3320      	adds	r3, #32
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fe fcc2 	bl	800b5fc <ld_dword>
 800cc78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	3330      	adds	r3, #48	; 0x30
 800cc7e:	330e      	adds	r3, #14
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fe fca3 	bl	800b5cc <ld_word>
 800cc86:	4603      	mov	r3, r0
 800cc88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d101      	bne.n	800cc94 <find_volume+0x28c>
 800cc90:	230d      	movs	r3, #13
 800cc92:	e0fa      	b.n	800ce8a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc98:	4413      	add	r3, r2
 800cc9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc9c:	8912      	ldrh	r2, [r2, #8]
 800cc9e:	0912      	lsrs	r2, r2, #4
 800cca0:	b292      	uxth	r2, r2
 800cca2:	4413      	add	r3, r2
 800cca4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d204      	bcs.n	800ccb8 <find_volume+0x2b0>
 800ccae:	230d      	movs	r3, #13
 800ccb0:	e0eb      	b.n	800ce8a <find_volume+0x482>
 800ccb2:	bf00      	nop
 800ccb4:	20001684 	.word	0x20001684
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccc0:	8952      	ldrh	r2, [r2, #10]
 800ccc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <find_volume+0x2ca>
 800ccce:	230d      	movs	r3, #13
 800ccd0:	e0db      	b.n	800ce8a <find_volume+0x482>
		fmt = FS_FAT32;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d802      	bhi.n	800cce8 <find_volume+0x2e0>
 800cce2:	2302      	movs	r3, #2
 800cce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d802      	bhi.n	800ccf8 <find_volume+0x2f0>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfa:	1c9a      	adds	r2, r3, #2
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd04:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd0a:	441a      	add	r2, r3
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cd10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	441a      	add	r2, r3
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cd1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd1e:	2b03      	cmp	r3, #3
 800cd20:	d11e      	bne.n	800cd60 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd24:	3330      	adds	r3, #48	; 0x30
 800cd26:	332a      	adds	r3, #42	; 0x2a
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fe fc4f 	bl	800b5cc <ld_word>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <find_volume+0x330>
 800cd34:	230d      	movs	r3, #13
 800cd36:	e0a8      	b.n	800ce8a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	891b      	ldrh	r3, [r3, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <find_volume+0x33c>
 800cd40:	230d      	movs	r3, #13
 800cd42:	e0a2      	b.n	800ce8a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	3330      	adds	r3, #48	; 0x30
 800cd48:	332c      	adds	r3, #44	; 0x2c
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fc56 	bl	800b5fc <ld_dword>
 800cd50:	4602      	mov	r2, r0
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	647b      	str	r3, [r7, #68]	; 0x44
 800cd5e:	e01f      	b.n	800cda0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd62:	891b      	ldrh	r3, [r3, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <find_volume+0x364>
 800cd68:	230d      	movs	r3, #13
 800cd6a:	e08e      	b.n	800ce8a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	6a1a      	ldr	r2, [r3, #32]
 800cd70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd72:	441a      	add	r2, r3
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d103      	bne.n	800cd88 <find_volume+0x380>
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	695b      	ldr	r3, [r3, #20]
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	e00a      	b.n	800cd9e <find_volume+0x396>
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	695a      	ldr	r2, [r3, #20]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	085a      	lsrs	r2, r3, #1
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	695b      	ldr	r3, [r3, #20]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	699a      	ldr	r2, [r3, #24]
 800cda4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cda6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cdaa:	0a5b      	lsrs	r3, r3, #9
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d201      	bcs.n	800cdb4 <find_volume+0x3ac>
 800cdb0:	230d      	movs	r3, #13
 800cdb2:	e06a      	b.n	800ce8a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdba:	611a      	str	r2, [r3, #16]
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	691a      	ldr	r2, [r3, #16]
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	2280      	movs	r2, #128	; 0x80
 800cdc8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cdca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdce:	2b03      	cmp	r3, #3
 800cdd0:	d149      	bne.n	800ce66 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd4:	3330      	adds	r3, #48	; 0x30
 800cdd6:	3330      	adds	r3, #48	; 0x30
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fe fbf7 	bl	800b5cc <ld_word>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d140      	bne.n	800ce66 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cde4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cde6:	3301      	adds	r3, #1
 800cde8:	4619      	mov	r1, r3
 800cdea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdec:	f7fe fe9e 	bl	800bb2c <move_window>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d137      	bne.n	800ce66 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	3330      	adds	r3, #48	; 0x30
 800ce00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fbe1 	bl	800b5cc <ld_word>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d127      	bne.n	800ce66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce18:	3330      	adds	r3, #48	; 0x30
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe fbee 	bl	800b5fc <ld_dword>
 800ce20:	4603      	mov	r3, r0
 800ce22:	4a1c      	ldr	r2, [pc, #112]	; (800ce94 <find_volume+0x48c>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d11e      	bne.n	800ce66 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	3330      	adds	r3, #48	; 0x30
 800ce2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fe fbe3 	bl	800b5fc <ld_dword>
 800ce36:	4603      	mov	r3, r0
 800ce38:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <find_volume+0x490>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d113      	bne.n	800ce66 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce40:	3330      	adds	r3, #48	; 0x30
 800ce42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fe fbd8 	bl	800b5fc <ld_dword>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce54:	3330      	adds	r3, #48	; 0x30
 800ce56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fe fbce 	bl	800b5fc <ld_dword>
 800ce60:	4602      	mov	r2, r0
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ce6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce6e:	4b0b      	ldr	r3, [pc, #44]	; (800ce9c <find_volume+0x494>)
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	3301      	adds	r3, #1
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <find_volume+0x494>)
 800ce78:	801a      	strh	r2, [r3, #0]
 800ce7a:	4b08      	ldr	r3, [pc, #32]	; (800ce9c <find_volume+0x494>)
 800ce7c:	881a      	ldrh	r2, [r3, #0]
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce84:	f7fe fdea 	bl	800ba5c <clear_lock>
#endif
	return FR_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3758      	adds	r7, #88	; 0x58
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	41615252 	.word	0x41615252
 800ce98:	61417272 	.word	0x61417272
 800ce9c:	20001688 	.word	0x20001688

0800cea0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ceaa:	2309      	movs	r3, #9
 800ceac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01c      	beq.n	800ceee <validate+0x4e>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d018      	beq.n	800ceee <validate+0x4e>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d013      	beq.n	800ceee <validate+0x4e>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	889a      	ldrh	r2, [r3, #4]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	88db      	ldrh	r3, [r3, #6]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d10c      	bne.n	800ceee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	785b      	ldrb	r3, [r3, #1]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fe fad8 	bl	800b490 <disk_status>
 800cee0:	4603      	mov	r3, r0
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d101      	bne.n	800ceee <validate+0x4e>
			res = FR_OK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d102      	bne.n	800cefa <validate+0x5a>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	e000      	b.n	800cefc <validate+0x5c>
 800cefa:	2300      	movs	r3, #0
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	6013      	str	r3, [r2, #0]
	return res;
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
	...

0800cf0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b088      	sub	sp, #32
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	4613      	mov	r3, r2
 800cf18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf1e:	f107 0310 	add.w	r3, r7, #16
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fcd5 	bl	800c8d2 <get_ldnumber>
 800cf28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da01      	bge.n	800cf34 <f_mount+0x28>
 800cf30:	230b      	movs	r3, #11
 800cf32:	e02b      	b.n	800cf8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf34:	4a17      	ldr	r2, [pc, #92]	; (800cf94 <f_mount+0x88>)
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d005      	beq.n	800cf50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf44:	69b8      	ldr	r0, [r7, #24]
 800cf46:	f7fe fd89 	bl	800ba5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	490d      	ldr	r1, [pc, #52]	; (800cf94 <f_mount+0x88>)
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <f_mount+0x66>
 800cf6c:	79fb      	ldrb	r3, [r7, #7]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d001      	beq.n	800cf76 <f_mount+0x6a>
 800cf72:	2300      	movs	r3, #0
 800cf74:	e00a      	b.n	800cf8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf76:	f107 010c 	add.w	r1, r7, #12
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	2200      	movs	r2, #0
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff fd41 	bl	800ca08 <find_volume>
 800cf86:	4603      	mov	r3, r0
 800cf88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3720      	adds	r7, #32
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	20001684 	.word	0x20001684

0800cf98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b098      	sub	sp, #96	; 0x60
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <f_open+0x18>
 800cfac:	2309      	movs	r3, #9
 800cfae:	e1ad      	b.n	800d30c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cfb8:	79fa      	ldrb	r2, [r7, #7]
 800cfba:	f107 0110 	add.w	r1, r7, #16
 800cfbe:	f107 0308 	add.w	r3, r7, #8
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7ff fd20 	bl	800ca08 <find_volume>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cfce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f040 8191 	bne.w	800d2fa <f_open+0x362>
		dj.obj.fs = fs;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	f107 0314 	add.w	r3, r7, #20
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7ff fc03 	bl	800c7f0 <follow_path>
 800cfea:	4603      	mov	r3, r0
 800cfec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d11a      	bne.n	800d02e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cff8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cffc:	b25b      	sxtb	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	da03      	bge.n	800d00a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d002:	2306      	movs	r3, #6
 800d004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d008:	e011      	b.n	800d02e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d00a:	79fb      	ldrb	r3, [r7, #7]
 800d00c:	f023 0301 	bic.w	r3, r3, #1
 800d010:	2b00      	cmp	r3, #0
 800d012:	bf14      	ite	ne
 800d014:	2301      	movne	r3, #1
 800d016:	2300      	moveq	r3, #0
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	461a      	mov	r2, r3
 800d01c:	f107 0314 	add.w	r3, r7, #20
 800d020:	4611      	mov	r1, r2
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe fbd2 	bl	800b7cc <chk_lock>
 800d028:	4603      	mov	r3, r0
 800d02a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	f003 031c 	and.w	r3, r3, #28
 800d034:	2b00      	cmp	r3, #0
 800d036:	d07f      	beq.n	800d138 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d017      	beq.n	800d070 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d044:	2b04      	cmp	r3, #4
 800d046:	d10e      	bne.n	800d066 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d048:	f7fe fc1c 	bl	800b884 <enq_lock>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d006      	beq.n	800d060 <f_open+0xc8>
 800d052:	f107 0314 	add.w	r3, r7, #20
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff fb03 	bl	800c662 <dir_register>
 800d05c:	4603      	mov	r3, r0
 800d05e:	e000      	b.n	800d062 <f_open+0xca>
 800d060:	2312      	movs	r3, #18
 800d062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	f043 0308 	orr.w	r3, r3, #8
 800d06c:	71fb      	strb	r3, [r7, #7]
 800d06e:	e010      	b.n	800d092 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d070:	7ebb      	ldrb	r3, [r7, #26]
 800d072:	f003 0311 	and.w	r3, r3, #17
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <f_open+0xea>
					res = FR_DENIED;
 800d07a:	2307      	movs	r3, #7
 800d07c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d080:	e007      	b.n	800d092 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	f003 0304 	and.w	r3, r3, #4
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <f_open+0xfa>
 800d08c:	2308      	movs	r3, #8
 800d08e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d096:	2b00      	cmp	r3, #0
 800d098:	d168      	bne.n	800d16c <f_open+0x1d4>
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	f003 0308 	and.w	r3, r3, #8
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d063      	beq.n	800d16c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d0a4:	f7fb f8e6 	bl	8008274 <get_fattime>
 800d0a8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ac:	330e      	adds	r3, #14
 800d0ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fe fae1 	bl	800b678 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b8:	3316      	adds	r3, #22
 800d0ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe fadb 	bl	800b678 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c4:	330b      	adds	r3, #11
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7ff fa32 	bl	800c53a <ld_clust>
 800d0d6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d0dc:	2200      	movs	r2, #0
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7ff fa4a 	bl	800c578 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e6:	331c      	adds	r3, #28
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe fac4 	bl	800b678 <st_dword>
					fs->wflag = 1;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d037      	beq.n	800d16c <f_open+0x1d4>
						dw = fs->winsect;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d100:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d102:	f107 0314 	add.w	r3, r7, #20
 800d106:	2200      	movs	r2, #0
 800d108:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe ff5d 	bl	800bfca <remove_chain>
 800d110:	4603      	mov	r3, r0
 800d112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d126      	bne.n	800d16c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fd02 	bl	800bb2c <move_window>
 800d128:	4603      	mov	r3, r0
 800d12a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d132:	3a01      	subs	r2, #1
 800d134:	60da      	str	r2, [r3, #12]
 800d136:	e019      	b.n	800d16c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d115      	bne.n	800d16c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d140:	7ebb      	ldrb	r3, [r7, #26]
 800d142:	f003 0310 	and.w	r3, r3, #16
 800d146:	2b00      	cmp	r3, #0
 800d148:	d003      	beq.n	800d152 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d14a:	2304      	movs	r3, #4
 800d14c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d150:	e00c      	b.n	800d16c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	f003 0302 	and.w	r3, r3, #2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <f_open+0x1d4>
 800d15c:	7ebb      	ldrb	r3, [r7, #26]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <f_open+0x1d4>
						res = FR_DENIED;
 800d166:	2307      	movs	r3, #7
 800d168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d16c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d170:	2b00      	cmp	r3, #0
 800d172:	d128      	bne.n	800d1c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d174:	79fb      	ldrb	r3, [r7, #7]
 800d176:	f003 0308 	and.w	r3, r3, #8
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d17e:	79fb      	ldrb	r3, [r7, #7]
 800d180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d184:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	f023 0301 	bic.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bf14      	ite	ne
 800d19e:	2301      	movne	r3, #1
 800d1a0:	2300      	moveq	r3, #0
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	f107 0314 	add.w	r3, r7, #20
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7fe fb8b 	bl	800b8c8 <inc_lock>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <f_open+0x22e>
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f040 8095 	bne.w	800d2fa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7ff f9af 	bl	800c53a <ld_clust>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e4:	331c      	adds	r3, #28
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe fa08 	bl	800b5fc <ld_dword>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d1f8:	693a      	ldr	r2, [r7, #16]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	88da      	ldrh	r2, [r3, #6]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	79fa      	ldrb	r2, [r7, #7]
 800d20a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3330      	adds	r3, #48	; 0x30
 800d222:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d226:	2100      	movs	r1, #0
 800d228:	4618      	mov	r0, r3
 800d22a:	f7fe fa72 	bl	800b712 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	f003 0320 	and.w	r3, r3, #32
 800d234:	2b00      	cmp	r3, #0
 800d236:	d060      	beq.n	800d2fa <f_open+0x362>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d05c      	beq.n	800d2fa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	68da      	ldr	r2, [r3, #12]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	895b      	ldrh	r3, [r3, #10]
 800d24c:	025b      	lsls	r3, r3, #9
 800d24e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	657b      	str	r3, [r7, #84]	; 0x54
 800d25c:	e016      	b.n	800d28c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe fd1d 	bl	800bca2 <get_fat>
 800d268:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d26a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d802      	bhi.n	800d276 <f_open+0x2de>
 800d270:	2302      	movs	r3, #2
 800d272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27c:	d102      	bne.n	800d284 <f_open+0x2ec>
 800d27e:	2301      	movs	r3, #1
 800d280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	657b      	str	r3, [r7, #84]	; 0x54
 800d28c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d290:	2b00      	cmp	r3, #0
 800d292:	d103      	bne.n	800d29c <f_open+0x304>
 800d294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d298:	429a      	cmp	r2, r3
 800d29a:	d8e0      	bhi.n	800d25e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d2a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d127      	bne.n	800d2fa <f_open+0x362>
 800d2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d022      	beq.n	800d2fa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe fcd3 	bl	800bc64 <clust2sect>
 800d2be:	6478      	str	r0, [r7, #68]	; 0x44
 800d2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d103      	bne.n	800d2ce <f_open+0x336>
						res = FR_INT_ERR;
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d2cc:	e015      	b.n	800d2fa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2d0:	0a5a      	lsrs	r2, r3, #9
 800d2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2d4:	441a      	add	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	7858      	ldrb	r0, [r3, #1]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6a1a      	ldr	r2, [r3, #32]
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	f7fe f911 	bl	800b510 <disk_read>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <f_open+0x362>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d2fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d002      	beq.n	800d308 <f_open+0x370>
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3760      	adds	r7, #96	; 0x60
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08e      	sub	sp, #56	; 0x38
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2200      	movs	r2, #0
 800d32a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f107 0214 	add.w	r2, r7, #20
 800d332:	4611      	mov	r1, r2
 800d334:	4618      	mov	r0, r3
 800d336:	f7ff fdb3 	bl	800cea0 <validate>
 800d33a:	4603      	mov	r3, r0
 800d33c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d340:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d344:	2b00      	cmp	r3, #0
 800d346:	d107      	bne.n	800d358 <f_read+0x44>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	7d5b      	ldrb	r3, [r3, #21]
 800d34c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d350:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d354:	2b00      	cmp	r3, #0
 800d356:	d002      	beq.n	800d35e <f_read+0x4a>
 800d358:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d35c:	e115      	b.n	800d58a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	7d1b      	ldrb	r3, [r3, #20]
 800d362:	f003 0301 	and.w	r3, r3, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <f_read+0x5a>
 800d36a:	2307      	movs	r3, #7
 800d36c:	e10d      	b.n	800d58a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	68da      	ldr	r2, [r3, #12]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	429a      	cmp	r2, r3
 800d380:	f240 80fe 	bls.w	800d580 <f_read+0x26c>
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d388:	e0fa      	b.n	800d580 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d392:	2b00      	cmp	r3, #0
 800d394:	f040 80c6 	bne.w	800d524 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	0a5b      	lsrs	r3, r3, #9
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	8952      	ldrh	r2, [r2, #10]
 800d3a2:	3a01      	subs	r2, #1
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d12f      	bne.n	800d40e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d103      	bne.n	800d3be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	633b      	str	r3, [r7, #48]	; 0x30
 800d3bc:	e013      	b.n	800d3e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d007      	beq.n	800d3d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	699b      	ldr	r3, [r3, #24]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7fe fef9 	bl	800c1c4 <clmt_clust>
 800d3d2:	6338      	str	r0, [r7, #48]	; 0x30
 800d3d4:	e007      	b.n	800d3e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	69db      	ldr	r3, [r3, #28]
 800d3dc:	4619      	mov	r1, r3
 800d3de:	4610      	mov	r0, r2
 800d3e0:	f7fe fc5f 	bl	800bca2 <get_fat>
 800d3e4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d804      	bhi.n	800d3f6 <f_read+0xe2>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	755a      	strb	r2, [r3, #21]
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	e0c9      	b.n	800d58a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fc:	d104      	bne.n	800d408 <f_read+0xf4>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2201      	movs	r2, #1
 800d402:	755a      	strb	r2, [r3, #21]
 800d404:	2301      	movs	r3, #1
 800d406:	e0c0      	b.n	800d58a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d40c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	69db      	ldr	r3, [r3, #28]
 800d414:	4619      	mov	r1, r3
 800d416:	4610      	mov	r0, r2
 800d418:	f7fe fc24 	bl	800bc64 <clust2sect>
 800d41c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d104      	bne.n	800d42e <f_read+0x11a>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2202      	movs	r2, #2
 800d428:	755a      	strb	r2, [r3, #21]
 800d42a:	2302      	movs	r3, #2
 800d42c:	e0ad      	b.n	800d58a <f_read+0x276>
			sect += csect;
 800d42e:	69ba      	ldr	r2, [r7, #24]
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	4413      	add	r3, r2
 800d434:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	0a5b      	lsrs	r3, r3, #9
 800d43a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d039      	beq.n	800d4b6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d442:	69fa      	ldr	r2, [r7, #28]
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	4413      	add	r3, r2
 800d448:	697a      	ldr	r2, [r7, #20]
 800d44a:	8952      	ldrh	r2, [r2, #10]
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d905      	bls.n	800d45c <f_read+0x148>
					cc = fs->csize - csect;
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	895b      	ldrh	r3, [r3, #10]
 800d454:	461a      	mov	r2, r3
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	7858      	ldrb	r0, [r3, #1]
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	69ba      	ldr	r2, [r7, #24]
 800d464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d466:	f7fe f853 	bl	800b510 <disk_read>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d004      	beq.n	800d47a <f_read+0x166>
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2201      	movs	r2, #1
 800d474:	755a      	strb	r2, [r3, #21]
 800d476:	2301      	movs	r3, #1
 800d478:	e087      	b.n	800d58a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	7d1b      	ldrb	r3, [r3, #20]
 800d47e:	b25b      	sxtb	r3, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	da14      	bge.n	800d4ae <f_read+0x19a>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6a1a      	ldr	r2, [r3, #32]
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d48e:	429a      	cmp	r2, r3
 800d490:	d90d      	bls.n	800d4ae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6a1a      	ldr	r2, [r3, #32]
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	025b      	lsls	r3, r3, #9
 800d49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d49e:	18d0      	adds	r0, r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3330      	adds	r3, #48	; 0x30
 800d4a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	f7fe f911 	bl	800b6d0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	025b      	lsls	r3, r3, #9
 800d4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d4b4:	e050      	b.n	800d558 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	69ba      	ldr	r2, [r7, #24]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d02e      	beq.n	800d51e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	7d1b      	ldrb	r3, [r3, #20]
 800d4c4:	b25b      	sxtb	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	da18      	bge.n	800d4fc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	7858      	ldrb	r0, [r3, #1]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6a1a      	ldr	r2, [r3, #32]
 800d4d8:	2301      	movs	r3, #1
 800d4da:	f7fe f839 	bl	800b550 <disk_write>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d004      	beq.n	800d4ee <f_read+0x1da>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	755a      	strb	r2, [r3, #21]
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e04d      	b.n	800d58a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	7d1b      	ldrb	r3, [r3, #20]
 800d4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	7858      	ldrb	r0, [r3, #1]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d506:	2301      	movs	r3, #1
 800d508:	69ba      	ldr	r2, [r7, #24]
 800d50a:	f7fe f801 	bl	800b510 <disk_read>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d004      	beq.n	800d51e <f_read+0x20a>
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2201      	movs	r2, #1
 800d518:	755a      	strb	r2, [r3, #21]
 800d51a:	2301      	movs	r3, #1
 800d51c:	e035      	b.n	800d58a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	699b      	ldr	r3, [r3, #24]
 800d528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d901      	bls.n	800d53e <f_read+0x22a>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54c:	4413      	add	r3, r2
 800d54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d550:	4619      	mov	r1, r3
 800d552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d554:	f7fe f8bc 	bl	800b6d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	4413      	add	r3, r2
 800d55e:	627b      	str	r3, [r7, #36]	; 0x24
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	699a      	ldr	r2, [r3, #24]
 800d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d566:	441a      	add	r2, r3
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	619a      	str	r2, [r3, #24]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	441a      	add	r2, r3
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	f47f af01 	bne.w	800d38a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3738      	adds	r7, #56	; 0x38
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b086      	sub	sp, #24
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f107 0208 	add.w	r2, r7, #8
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fc7c 	bl	800cea0 <validate>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d5ac:	7dfb      	ldrb	r3, [r7, #23]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d168      	bne.n	800d684 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	7d1b      	ldrb	r3, [r3, #20]
 800d5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d062      	beq.n	800d684 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	7d1b      	ldrb	r3, [r3, #20]
 800d5c2:	b25b      	sxtb	r3, r3
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	da15      	bge.n	800d5f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	7858      	ldrb	r0, [r3, #1]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a1a      	ldr	r2, [r3, #32]
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f7fd ffba 	bl	800b550 <disk_write>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <f_sync+0x54>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e04f      	b.n	800d686 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7d1b      	ldrb	r3, [r3, #20]
 800d5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d5f4:	f7fa fe3e 	bl	8008274 <get_fattime>
 800d5f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d600:	4619      	mov	r1, r3
 800d602:	4610      	mov	r0, r2
 800d604:	f7fe fa92 	bl	800bb2c <move_window>
 800d608:	4603      	mov	r3, r0
 800d60a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d138      	bne.n	800d684 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d616:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	330b      	adds	r3, #11
 800d61c:	781a      	ldrb	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	330b      	adds	r3, #11
 800d622:	f042 0220 	orr.w	r2, r2, #32
 800d626:	b2d2      	uxtb	r2, r2
 800d628:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	461a      	mov	r2, r3
 800d634:	68f9      	ldr	r1, [r7, #12]
 800d636:	f7fe ff9f 	bl	800c578 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f103 021c 	add.w	r2, r3, #28
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	4619      	mov	r1, r3
 800d646:	4610      	mov	r0, r2
 800d648:	f7fe f816 	bl	800b678 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	3316      	adds	r3, #22
 800d650:	6939      	ldr	r1, [r7, #16]
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe f810 	bl	800b678 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	3312      	adds	r3, #18
 800d65c:	2100      	movs	r1, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fd ffef 	bl	800b642 <st_word>
					fs->wflag = 1;
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2201      	movs	r2, #1
 800d668:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fe fa8b 	bl	800bb88 <sync_fs>
 800d672:	4603      	mov	r3, r0
 800d674:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	7d1b      	ldrb	r3, [r3, #20]
 800d67a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d684:	7dfb      	ldrb	r3, [r7, #23]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3718      	adds	r7, #24
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff ff7b 	bl	800d592 <f_sync>
 800d69c:	4603      	mov	r3, r0
 800d69e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d6a0:	7bfb      	ldrb	r3, [r7, #15]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d118      	bne.n	800d6d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f107 0208 	add.w	r2, r7, #8
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7ff fbf6 	bl	800cea0 <validate>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10c      	bne.n	800d6d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fe f98e 	bl	800b9e4 <dec_lock>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d102      	bne.n	800d6d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b090      	sub	sp, #64	; 0x40
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
 800d6ea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f107 0208 	add.w	r2, r7, #8
 800d6f2:	4611      	mov	r1, r2
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff fbd3 	bl	800cea0 <validate>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d700:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d704:	2b00      	cmp	r3, #0
 800d706:	d103      	bne.n	800d710 <f_lseek+0x2e>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7d5b      	ldrb	r3, [r3, #21]
 800d70c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <f_lseek+0x3c>
 800d718:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d71c:	e1e6      	b.n	800daec <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d722:	2b00      	cmp	r3, #0
 800d724:	f000 80d1 	beq.w	800d8ca <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72e:	d15a      	bne.n	800d7e6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d734:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d738:	1d1a      	adds	r2, r3, #4
 800d73a:	627a      	str	r2, [r7, #36]	; 0x24
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	617b      	str	r3, [r7, #20]
 800d740:	2302      	movs	r3, #2
 800d742:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d03a      	beq.n	800d7c6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	613b      	str	r3, [r7, #16]
 800d754:	2300      	movs	r3, #0
 800d756:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	3302      	adds	r3, #2
 800d75c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	60fb      	str	r3, [r7, #12]
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	3301      	adds	r3, #1
 800d766:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe fa98 	bl	800bca2 <get_fat>
 800d772:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d776:	2b01      	cmp	r3, #1
 800d778:	d804      	bhi.n	800d784 <f_lseek+0xa2>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2202      	movs	r2, #2
 800d77e:	755a      	strb	r2, [r3, #21]
 800d780:	2302      	movs	r3, #2
 800d782:	e1b3      	b.n	800daec <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78a:	d104      	bne.n	800d796 <f_lseek+0xb4>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	755a      	strb	r2, [r3, #21]
 800d792:	2301      	movs	r3, #1
 800d794:	e1aa      	b.n	800daec <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	3301      	adds	r3, #1
 800d79a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d0de      	beq.n	800d75e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d809      	bhi.n	800d7bc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	1d1a      	adds	r2, r3, #4
 800d7ac:	627a      	str	r2, [r7, #36]	; 0x24
 800d7ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	1d1a      	adds	r2, r3, #4
 800d7b6:	627a      	str	r2, [r7, #36]	; 0x24
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d3c4      	bcc.n	800d750 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7cc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d803      	bhi.n	800d7de <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	e184      	b.n	800dae8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d7de:	2311      	movs	r3, #17
 800d7e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d7e4:	e180      	b.n	800dae8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d902      	bls.n	800d7f6 <f_lseek+0x114>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	683a      	ldr	r2, [r7, #0]
 800d7fa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 8172 	beq.w	800dae8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	3b01      	subs	r3, #1
 800d808:	4619      	mov	r1, r3
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7fe fcda 	bl	800c1c4 <clmt_clust>
 800d810:	4602      	mov	r2, r0
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	69db      	ldr	r3, [r3, #28]
 800d81c:	4619      	mov	r1, r3
 800d81e:	4610      	mov	r0, r2
 800d820:	f7fe fa20 	bl	800bc64 <clust2sect>
 800d824:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d104      	bne.n	800d836 <f_lseek+0x154>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2202      	movs	r2, #2
 800d830:	755a      	strb	r2, [r3, #21]
 800d832:	2302      	movs	r3, #2
 800d834:	e15a      	b.n	800daec <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	3b01      	subs	r3, #1
 800d83a:	0a5b      	lsrs	r3, r3, #9
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	8952      	ldrh	r2, [r2, #10]
 800d840:	3a01      	subs	r2, #1
 800d842:	4013      	ands	r3, r2
 800d844:	69ba      	ldr	r2, [r7, #24]
 800d846:	4413      	add	r3, r2
 800d848:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 8148 	beq.w	800dae8 <f_lseek+0x406>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a1b      	ldr	r3, [r3, #32]
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	429a      	cmp	r2, r3
 800d860:	f000 8142 	beq.w	800dae8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	7d1b      	ldrb	r3, [r3, #20]
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	da18      	bge.n	800d8a0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	7858      	ldrb	r0, [r3, #1]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6a1a      	ldr	r2, [r3, #32]
 800d87c:	2301      	movs	r3, #1
 800d87e:	f7fd fe67 	bl	800b550 <disk_write>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d004      	beq.n	800d892 <f_lseek+0x1b0>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	755a      	strb	r2, [r3, #21]
 800d88e:	2301      	movs	r3, #1
 800d890:	e12c      	b.n	800daec <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	7d1b      	ldrb	r3, [r3, #20]
 800d896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	7858      	ldrb	r0, [r3, #1]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	69ba      	ldr	r2, [r7, #24]
 800d8ae:	f7fd fe2f 	bl	800b510 <disk_read>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d004      	beq.n	800d8c2 <f_lseek+0x1e0>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	755a      	strb	r2, [r3, #21]
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e114      	b.n	800daec <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	69ba      	ldr	r2, [r7, #24]
 800d8c6:	621a      	str	r2, [r3, #32]
 800d8c8:	e10e      	b.n	800dae8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d908      	bls.n	800d8e6 <f_lseek+0x204>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7d1b      	ldrb	r3, [r3, #20]
 800d8d8:	f003 0302 	and.w	r3, r3, #2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d102      	bne.n	800d8e6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8f4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 80a7 	beq.w	800da4c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	895b      	ldrh	r3, [r3, #10]
 800d902:	025b      	lsls	r3, r3, #9
 800d904:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d906:	6a3b      	ldr	r3, [r7, #32]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d01b      	beq.n	800d944 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	1e5a      	subs	r2, r3, #1
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	fbb2 f2f3 	udiv	r2, r2, r3
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	1e59      	subs	r1, r3, #1
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d920:	429a      	cmp	r2, r3
 800d922:	d30f      	bcc.n	800d944 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d924:	6a3b      	ldr	r3, [r7, #32]
 800d926:	1e5a      	subs	r2, r3, #1
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	425b      	negs	r3, r3
 800d92c:	401a      	ands	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	69db      	ldr	r3, [r3, #28]
 800d940:	63bb      	str	r3, [r7, #56]	; 0x38
 800d942:	e022      	b.n	800d98a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d119      	bne.n	800d984 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2100      	movs	r1, #0
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe fb9d 	bl	800c094 <create_chain>
 800d95a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d104      	bne.n	800d96c <f_lseek+0x28a>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2202      	movs	r2, #2
 800d966:	755a      	strb	r2, [r3, #21]
 800d968:	2302      	movs	r3, #2
 800d96a:	e0bf      	b.n	800daec <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d972:	d104      	bne.n	800d97e <f_lseek+0x29c>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	755a      	strb	r2, [r3, #21]
 800d97a:	2301      	movs	r3, #1
 800d97c:	e0b6      	b.n	800daec <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d982:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d988:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d05d      	beq.n	800da4c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d990:	e03a      	b.n	800da08 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	603b      	str	r3, [r7, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	699a      	ldr	r2, [r3, #24]
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	441a      	add	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	7d1b      	ldrb	r3, [r3, #20]
 800d9aa:	f003 0302 	and.w	r3, r3, #2
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00b      	beq.n	800d9ca <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fb6c 	bl	800c094 <create_chain>
 800d9bc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d108      	bne.n	800d9d6 <f_lseek+0x2f4>
							ofs = 0; break;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	603b      	str	r3, [r7, #0]
 800d9c8:	e022      	b.n	800da10 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fe f967 	bl	800bca2 <get_fat>
 800d9d4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9dc:	d104      	bne.n	800d9e8 <f_lseek+0x306>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	755a      	strb	r2, [r3, #21]
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e081      	b.n	800daec <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d904      	bls.n	800d9f8 <f_lseek+0x316>
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d304      	bcc.n	800da02 <f_lseek+0x320>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	755a      	strb	r2, [r3, #21]
 800d9fe:	2302      	movs	r3, #2
 800da00:	e074      	b.n	800daec <f_lseek+0x40a>
					fp->clust = clst;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da06:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800da08:	683a      	ldr	r2, [r7, #0]
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d8c0      	bhi.n	800d992 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	699a      	ldr	r2, [r3, #24]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	441a      	add	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da22:	2b00      	cmp	r3, #0
 800da24:	d012      	beq.n	800da4c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fe f91a 	bl	800bc64 <clust2sect>
 800da30:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800da32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da34:	2b00      	cmp	r3, #0
 800da36:	d104      	bne.n	800da42 <f_lseek+0x360>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	755a      	strb	r2, [r3, #21]
 800da3e:	2302      	movs	r3, #2
 800da40:	e054      	b.n	800daec <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	0a5b      	lsrs	r3, r3, #9
 800da46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da48:	4413      	add	r3, r2
 800da4a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	699a      	ldr	r2, [r3, #24]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	429a      	cmp	r2, r3
 800da56:	d90a      	bls.n	800da6e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	699a      	ldr	r2, [r3, #24]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	7d1b      	ldrb	r3, [r3, #20]
 800da64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	699b      	ldr	r3, [r3, #24]
 800da72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da76:	2b00      	cmp	r3, #0
 800da78:	d036      	beq.n	800dae8 <f_lseek+0x406>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a1b      	ldr	r3, [r3, #32]
 800da7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da80:	429a      	cmp	r2, r3
 800da82:	d031      	beq.n	800dae8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	7d1b      	ldrb	r3, [r3, #20]
 800da88:	b25b      	sxtb	r3, r3
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	da18      	bge.n	800dac0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	7858      	ldrb	r0, [r3, #1]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6a1a      	ldr	r2, [r3, #32]
 800da9c:	2301      	movs	r3, #1
 800da9e:	f7fd fd57 	bl	800b550 <disk_write>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <f_lseek+0x3d0>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	755a      	strb	r2, [r3, #21]
 800daae:	2301      	movs	r3, #1
 800dab0:	e01c      	b.n	800daec <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7d1b      	ldrb	r3, [r3, #20]
 800dab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	7858      	ldrb	r0, [r3, #1]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800daca:	2301      	movs	r3, #1
 800dacc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dace:	f7fd fd1f 	bl	800b510 <disk_read>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <f_lseek+0x400>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	755a      	strb	r2, [r3, #21]
 800dade:	2301      	movs	r3, #1
 800dae0:	e004      	b.n	800daec <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dae6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800daec:	4618      	mov	r0, r3
 800daee:	3740      	adds	r7, #64	; 0x40
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b087      	sub	sp, #28
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	4613      	mov	r3, r2
 800db00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db02:	2301      	movs	r3, #1
 800db04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800db0a:	4b1f      	ldr	r3, [pc, #124]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db0c:	7a5b      	ldrb	r3, [r3, #9]
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	2b00      	cmp	r3, #0
 800db12:	d131      	bne.n	800db78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db14:	4b1c      	ldr	r3, [pc, #112]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db16:	7a5b      	ldrb	r3, [r3, #9]
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	461a      	mov	r2, r3
 800db1c:	4b1a      	ldr	r3, [pc, #104]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db1e:	2100      	movs	r1, #0
 800db20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db22:	4b19      	ldr	r3, [pc, #100]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db24:	7a5b      	ldrb	r3, [r3, #9]
 800db26:	b2db      	uxtb	r3, r3
 800db28:	4a17      	ldr	r2, [pc, #92]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db32:	4b15      	ldr	r3, [pc, #84]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db34:	7a5b      	ldrb	r3, [r3, #9]
 800db36:	b2db      	uxtb	r3, r3
 800db38:	461a      	mov	r2, r3
 800db3a:	4b13      	ldr	r3, [pc, #76]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db3c:	4413      	add	r3, r2
 800db3e:	79fa      	ldrb	r2, [r7, #7]
 800db40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db42:	4b11      	ldr	r3, [pc, #68]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db44:	7a5b      	ldrb	r3, [r3, #9]
 800db46:	b2db      	uxtb	r3, r3
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	b2d1      	uxtb	r1, r2
 800db4c:	4a0e      	ldr	r2, [pc, #56]	; (800db88 <FATFS_LinkDriverEx+0x94>)
 800db4e:	7251      	strb	r1, [r2, #9]
 800db50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db52:	7dbb      	ldrb	r3, [r7, #22]
 800db54:	3330      	adds	r3, #48	; 0x30
 800db56:	b2da      	uxtb	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	3301      	adds	r3, #1
 800db60:	223a      	movs	r2, #58	; 0x3a
 800db62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	3302      	adds	r3, #2
 800db68:	222f      	movs	r2, #47	; 0x2f
 800db6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	3303      	adds	r3, #3
 800db70:	2200      	movs	r2, #0
 800db72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db74:	2300      	movs	r3, #0
 800db76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800db78:	7dfb      	ldrb	r3, [r7, #23]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	200016ac 	.word	0x200016ac

0800db8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db96:	2200      	movs	r2, #0
 800db98:	6839      	ldr	r1, [r7, #0]
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7ff ffaa 	bl	800daf4 <FATFS_LinkDriverEx>
 800dba0:	4603      	mov	r3, r0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
	...

0800dbac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	490e      	ldr	r1, [pc, #56]	; (800dbec <MX_USB_HOST_Init+0x40>)
 800dbb4:	480e      	ldr	r0, [pc, #56]	; (800dbf0 <MX_USB_HOST_Init+0x44>)
 800dbb6:	f7fc f819 	bl	8009bec <USBH_Init>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d001      	beq.n	800dbc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dbc0:	f7f3 fa40 	bl	8001044 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dbc4:	490b      	ldr	r1, [pc, #44]	; (800dbf4 <MX_USB_HOST_Init+0x48>)
 800dbc6:	480a      	ldr	r0, [pc, #40]	; (800dbf0 <MX_USB_HOST_Init+0x44>)
 800dbc8:	f7fc f89e 	bl	8009d08 <USBH_RegisterClass>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dbd2:	f7f3 fa37 	bl	8001044 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dbd6:	4806      	ldr	r0, [pc, #24]	; (800dbf0 <MX_USB_HOST_Init+0x44>)
 800dbd8:	f7fc f922 	bl	8009e20 <USBH_Start>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d001      	beq.n	800dbe6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dbe2:	f7f3 fa2f 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dbe6:	bf00      	nop
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	0800dc0d 	.word	0x0800dc0d
 800dbf0:	200016b8 	.word	0x200016b8
 800dbf4:	2000000c 	.word	0x2000000c

0800dbf8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800dbfc:	4802      	ldr	r0, [pc, #8]	; (800dc08 <MX_USB_HOST_Process+0x10>)
 800dbfe:	f7fc f91f 	bl	8009e40 <USBH_Process>
}
 800dc02:	bf00      	nop
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	200016b8 	.word	0x200016b8

0800dc0c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	460b      	mov	r3, r1
 800dc16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	d819      	bhi.n	800dc54 <USBH_UserProcess+0x48>
 800dc20:	a201      	add	r2, pc, #4	; (adr r2, 800dc28 <USBH_UserProcess+0x1c>)
 800dc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc26:	bf00      	nop
 800dc28:	0800dc55 	.word	0x0800dc55
 800dc2c:	0800dc45 	.word	0x0800dc45
 800dc30:	0800dc55 	.word	0x0800dc55
 800dc34:	0800dc4d 	.word	0x0800dc4d
 800dc38:	0800dc3d 	.word	0x0800dc3d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dc3c:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <USBH_UserProcess+0x58>)
 800dc3e:	2203      	movs	r2, #3
 800dc40:	701a      	strb	r2, [r3, #0]
  break;
 800dc42:	e008      	b.n	800dc56 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dc44:	4b07      	ldr	r3, [pc, #28]	; (800dc64 <USBH_UserProcess+0x58>)
 800dc46:	2202      	movs	r2, #2
 800dc48:	701a      	strb	r2, [r3, #0]
  break;
 800dc4a:	e004      	b.n	800dc56 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dc4c:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <USBH_UserProcess+0x58>)
 800dc4e:	2201      	movs	r2, #1
 800dc50:	701a      	strb	r2, [r3, #0]
  break;
 800dc52:	e000      	b.n	800dc56 <USBH_UserProcess+0x4a>

  default:
  break;
 800dc54:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dc56:	bf00      	nop
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	20001a90 	.word	0x20001a90

0800dc68 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08a      	sub	sp, #40	; 0x28
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc70:	f107 0314 	add.w	r3, r7, #20
 800dc74:	2200      	movs	r2, #0
 800dc76:	601a      	str	r2, [r3, #0]
 800dc78:	605a      	str	r2, [r3, #4]
 800dc7a:	609a      	str	r2, [r3, #8]
 800dc7c:	60da      	str	r2, [r3, #12]
 800dc7e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc88:	d147      	bne.n	800dd1a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	613b      	str	r3, [r7, #16]
 800dc8e:	4b25      	ldr	r3, [pc, #148]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc92:	4a24      	ldr	r2, [pc, #144]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dc94:	f043 0301 	orr.w	r3, r3, #1
 800dc98:	6313      	str	r3, [r2, #48]	; 0x30
 800dc9a:	4b22      	ldr	r3, [pc, #136]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	613b      	str	r3, [r7, #16]
 800dca4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dcac:	2300      	movs	r3, #0
 800dcae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcb4:	f107 0314 	add.w	r3, r7, #20
 800dcb8:	4619      	mov	r1, r3
 800dcba:	481b      	ldr	r0, [pc, #108]	; (800dd28 <HAL_HCD_MspInit+0xc0>)
 800dcbc:	f7f4 fa4a 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dcc0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dcc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc6:	2302      	movs	r3, #2
 800dcc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dcd2:	230a      	movs	r3, #10
 800dcd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcd6:	f107 0314 	add.w	r3, r7, #20
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4812      	ldr	r0, [pc, #72]	; (800dd28 <HAL_HCD_MspInit+0xc0>)
 800dcde:	f7f4 fa39 	bl	8002154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dce2:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce6:	4a0f      	ldr	r2, [pc, #60]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcec:	6353      	str	r3, [r2, #52]	; 0x34
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
 800dcf2:	4b0c      	ldr	r3, [pc, #48]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dcf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcf6:	4a0b      	ldr	r2, [pc, #44]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dcf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dcfc:	6453      	str	r3, [r2, #68]	; 0x44
 800dcfe:	4b09      	ldr	r3, [pc, #36]	; (800dd24 <HAL_HCD_MspInit+0xbc>)
 800dd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	2043      	movs	r0, #67	; 0x43
 800dd10:	f7f3 fe09 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dd14:	2043      	movs	r0, #67	; 0x43
 800dd16:	f7f3 fe22 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd1a:	bf00      	nop
 800dd1c:	3728      	adds	r7, #40	; 0x28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	40023800 	.word	0x40023800
 800dd28:	40020000 	.word	0x40020000

0800dd2c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fc fc5f 	bl	800a5fe <USBH_LL_IncTimer>
}
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fc fc97 	bl	800a68a <USBH_LL_Connect>
}
 800dd5c:	bf00      	nop
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fc fca0 	bl	800a6b8 <USBH_LL_Disconnect>
}
 800dd78:	bf00      	nop
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	70fb      	strb	r3, [r7, #3]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fc fc51 	bl	800a652 <USBH_LL_PortEnabled>
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fc fc51 	bl	800a66e <USBH_LL_PortDisabled>
}
 800ddcc:	bf00      	nop
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d12a      	bne.n	800de3c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dde6:	4a18      	ldr	r2, [pc, #96]	; (800de48 <USBH_LL_Init+0x74>)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4a15      	ldr	r2, [pc, #84]	; (800de48 <USBH_LL_Init+0x74>)
 800ddf2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ddf6:	4b14      	ldr	r3, [pc, #80]	; (800de48 <USBH_LL_Init+0x74>)
 800ddf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ddfc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ddfe:	4b12      	ldr	r3, [pc, #72]	; (800de48 <USBH_LL_Init+0x74>)
 800de00:	2208      	movs	r2, #8
 800de02:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800de04:	4b10      	ldr	r3, [pc, #64]	; (800de48 <USBH_LL_Init+0x74>)
 800de06:	2201      	movs	r2, #1
 800de08:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800de0a:	4b0f      	ldr	r3, [pc, #60]	; (800de48 <USBH_LL_Init+0x74>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800de10:	4b0d      	ldr	r3, [pc, #52]	; (800de48 <USBH_LL_Init+0x74>)
 800de12:	2202      	movs	r2, #2
 800de14:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de16:	4b0c      	ldr	r3, [pc, #48]	; (800de48 <USBH_LL_Init+0x74>)
 800de18:	2200      	movs	r2, #0
 800de1a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800de1c:	480a      	ldr	r0, [pc, #40]	; (800de48 <USBH_LL_Init+0x74>)
 800de1e:	f7f4 fb66 	bl	80024ee <HAL_HCD_Init>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d001      	beq.n	800de2c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800de28:	f7f3 f90c 	bl	8001044 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800de2c:	4806      	ldr	r0, [pc, #24]	; (800de48 <USBH_LL_Init+0x74>)
 800de2e:	f7f4 ff4a 	bl	8002cc6 <HAL_HCD_GetCurrentFrame>
 800de32:	4603      	mov	r3, r0
 800de34:	4619      	mov	r1, r3
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7fc fbd2 	bl	800a5e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3708      	adds	r7, #8
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	20001a94 	.word	0x20001a94

0800de4c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de58:	2300      	movs	r3, #0
 800de5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de62:	4618      	mov	r0, r3
 800de64:	f7f4 feb9 	bl	8002bda <HAL_HCD_Start>
 800de68:	4603      	mov	r3, r0
 800de6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 f98c 	bl	800e18c <USBH_Get_USB_Status>
 800de74:	4603      	mov	r3, r0
 800de76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de78:	7bbb      	ldrb	r3, [r7, #14]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b084      	sub	sp, #16
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f4 fec1 	bl	8002c20 <HAL_HCD_Stop>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f971 	bl	800e18c <USBH_Get_USB_Status>
 800deaa:	4603      	mov	r3, r0
 800deac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deae:	7bbb      	ldrb	r3, [r7, #14]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dec0:	2301      	movs	r3, #1
 800dec2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800deca:	4618      	mov	r0, r3
 800decc:	f7f4 ff09 	bl	8002ce2 <HAL_HCD_GetCurrentSpeed>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d00c      	beq.n	800def0 <USBH_LL_GetSpeed+0x38>
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d80d      	bhi.n	800def6 <USBH_LL_GetSpeed+0x3e>
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <USBH_LL_GetSpeed+0x2c>
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d003      	beq.n	800deea <USBH_LL_GetSpeed+0x32>
 800dee2:	e008      	b.n	800def6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dee4:	2300      	movs	r3, #0
 800dee6:	73fb      	strb	r3, [r7, #15]
    break;
 800dee8:	e008      	b.n	800defc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800deea:	2301      	movs	r3, #1
 800deec:	73fb      	strb	r3, [r7, #15]
    break;
 800deee:	e005      	b.n	800defc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800def0:	2302      	movs	r3, #2
 800def2:	73fb      	strb	r3, [r7, #15]
    break;
 800def4:	e002      	b.n	800defc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800def6:	2301      	movs	r3, #1
 800def8:	73fb      	strb	r3, [r7, #15]
    break;
 800defa:	bf00      	nop
  }
  return  speed;
 800defc:	7bfb      	ldrb	r3, [r7, #15]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b084      	sub	sp, #16
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df0e:	2300      	movs	r3, #0
 800df10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df12:	2300      	movs	r3, #0
 800df14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7f4 fe9c 	bl	8002c5a <HAL_HCD_ResetPort>
 800df22:	4603      	mov	r3, r0
 800df24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	4618      	mov	r0, r3
 800df2a:	f000 f92f 	bl	800e18c <USBH_Get_USB_Status>
 800df2e:	4603      	mov	r3, r0
 800df30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df32:	7bbb      	ldrb	r3, [r7, #14]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	460b      	mov	r3, r1
 800df46:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df4e:	78fa      	ldrb	r2, [r7, #3]
 800df50:	4611      	mov	r1, r2
 800df52:	4618      	mov	r0, r3
 800df54:	f7f4 fea3 	bl	8002c9e <HAL_HCD_HC_GetXferCount>
 800df58:	4603      	mov	r3, r0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df62:	b590      	push	{r4, r7, lr}
 800df64:	b089      	sub	sp, #36	; 0x24
 800df66:	af04      	add	r7, sp, #16
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	4608      	mov	r0, r1
 800df6c:	4611      	mov	r1, r2
 800df6e:	461a      	mov	r2, r3
 800df70:	4603      	mov	r3, r0
 800df72:	70fb      	strb	r3, [r7, #3]
 800df74:	460b      	mov	r3, r1
 800df76:	70bb      	strb	r3, [r7, #2]
 800df78:	4613      	mov	r3, r2
 800df7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800df8a:	787c      	ldrb	r4, [r7, #1]
 800df8c:	78ba      	ldrb	r2, [r7, #2]
 800df8e:	78f9      	ldrb	r1, [r7, #3]
 800df90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df92:	9302      	str	r3, [sp, #8]
 800df94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	4623      	mov	r3, r4
 800dfa2:	f7f4 fb06 	bl	80025b2 <HAL_HCD_HC_Init>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfaa:	7bfb      	ldrb	r3, [r7, #15]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f000 f8ed 	bl	800e18c <USBH_Get_USB_Status>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd90      	pop	{r4, r7, pc}

0800dfc0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfda:	78fa      	ldrb	r2, [r7, #3]
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7f4 fb76 	bl	80026d0 <HAL_HCD_HC_Halt>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f000 f8ce 	bl	800e18c <USBH_Get_USB_Status>
 800dff0:	4603      	mov	r3, r0
 800dff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dffe:	b590      	push	{r4, r7, lr}
 800e000:	b089      	sub	sp, #36	; 0x24
 800e002:	af04      	add	r7, sp, #16
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	4608      	mov	r0, r1
 800e008:	4611      	mov	r1, r2
 800e00a:	461a      	mov	r2, r3
 800e00c:	4603      	mov	r3, r0
 800e00e:	70fb      	strb	r3, [r7, #3]
 800e010:	460b      	mov	r3, r1
 800e012:	70bb      	strb	r3, [r7, #2]
 800e014:	4613      	mov	r3, r2
 800e016:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e026:	787c      	ldrb	r4, [r7, #1]
 800e028:	78ba      	ldrb	r2, [r7, #2]
 800e02a:	78f9      	ldrb	r1, [r7, #3]
 800e02c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e030:	9303      	str	r3, [sp, #12]
 800e032:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e034:	9302      	str	r3, [sp, #8]
 800e036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e038:	9301      	str	r3, [sp, #4]
 800e03a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e03e:	9300      	str	r3, [sp, #0]
 800e040:	4623      	mov	r3, r4
 800e042:	f7f4 fb69 	bl	8002718 <HAL_HCD_HC_SubmitRequest>
 800e046:	4603      	mov	r3, r0
 800e048:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e04a:	7bfb      	ldrb	r3, [r7, #15]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f000 f89d 	bl	800e18c <USBH_Get_USB_Status>
 800e052:	4603      	mov	r3, r0
 800e054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e056:	7bbb      	ldrb	r3, [r7, #14]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3714      	adds	r7, #20
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd90      	pop	{r4, r7, pc}

0800e060 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	460b      	mov	r3, r1
 800e06a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e072:	78fa      	ldrb	r2, [r7, #3]
 800e074:	4611      	mov	r1, r2
 800e076:	4618      	mov	r0, r3
 800e078:	f7f4 fdfd 	bl	8002c76 <HAL_HCD_HC_GetURBState>
 800e07c:	4603      	mov	r3, r0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e086:	b580      	push	{r7, lr}
 800e088:	b082      	sub	sp, #8
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
 800e08e:	460b      	mov	r3, r1
 800e090:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d103      	bne.n	800e0a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e09c:	78fb      	ldrb	r3, [r7, #3]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f000 f8a0 	bl	800e1e4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e0a4:	20c8      	movs	r0, #200	; 0xc8
 800e0a6:	f7f3 fb3f 	bl	8001728 <HAL_Delay>
  return USBH_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	212c      	movs	r1, #44	; 0x2c
 800e0d2:	fb01 f303 	mul.w	r3, r1, r3
 800e0d6:	4413      	add	r3, r2
 800e0d8:	333b      	adds	r3, #59	; 0x3b
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d009      	beq.n	800e0f4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	212c      	movs	r1, #44	; 0x2c
 800e0e6:	fb01 f303 	mul.w	r3, r1, r3
 800e0ea:	4413      	add	r3, r2
 800e0ec:	3354      	adds	r3, #84	; 0x54
 800e0ee:	78ba      	ldrb	r2, [r7, #2]
 800e0f0:	701a      	strb	r2, [r3, #0]
 800e0f2:	e008      	b.n	800e106 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e0f4:	78fb      	ldrb	r3, [r7, #3]
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	212c      	movs	r1, #44	; 0x2c
 800e0fa:	fb01 f303 	mul.w	r3, r1, r3
 800e0fe:	4413      	add	r3, r2
 800e100:	3355      	adds	r3, #85	; 0x55
 800e102:	78ba      	ldrb	r2, [r7, #2]
 800e104:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e114:	b480      	push	{r7}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	460b      	mov	r3, r1
 800e11e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e12a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e12c:	78fb      	ldrb	r3, [r7, #3]
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	212c      	movs	r1, #44	; 0x2c
 800e132:	fb01 f303 	mul.w	r3, r1, r3
 800e136:	4413      	add	r3, r2
 800e138:	333b      	adds	r3, #59	; 0x3b
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d009      	beq.n	800e154 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e140:	78fb      	ldrb	r3, [r7, #3]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	212c      	movs	r1, #44	; 0x2c
 800e146:	fb01 f303 	mul.w	r3, r1, r3
 800e14a:	4413      	add	r3, r2
 800e14c:	3354      	adds	r3, #84	; 0x54
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	73fb      	strb	r3, [r7, #15]
 800e152:	e008      	b.n	800e166 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e154:	78fb      	ldrb	r3, [r7, #3]
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	212c      	movs	r1, #44	; 0x2c
 800e15a:	fb01 f303 	mul.w	r3, r1, r3
 800e15e:	4413      	add	r3, r2
 800e160:	3355      	adds	r3, #85	; 0x55
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e166:	7bfb      	ldrb	r3, [r7, #15]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3714      	adds	r7, #20
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7f3 fad3 	bl	8001728 <HAL_Delay>
}
 800e182:	bf00      	nop
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
	...

0800e18c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	4603      	mov	r3, r0
 800e194:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e196:	2300      	movs	r3, #0
 800e198:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e19a:	79fb      	ldrb	r3, [r7, #7]
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d817      	bhi.n	800e1d0 <USBH_Get_USB_Status+0x44>
 800e1a0:	a201      	add	r2, pc, #4	; (adr r2, 800e1a8 <USBH_Get_USB_Status+0x1c>)
 800e1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a6:	bf00      	nop
 800e1a8:	0800e1b9 	.word	0x0800e1b9
 800e1ac:	0800e1bf 	.word	0x0800e1bf
 800e1b0:	0800e1c5 	.word	0x0800e1c5
 800e1b4:	0800e1cb 	.word	0x0800e1cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e1bc:	e00b      	b.n	800e1d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e1be:	2302      	movs	r3, #2
 800e1c0:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c2:	e008      	b.n	800e1d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c8:	e005      	b.n	800e1d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ce:	e002      	b.n	800e1d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e1d0:	2302      	movs	r3, #2
 800e1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1d4:	bf00      	nop
  }
  return usb_status;
 800e1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af04      	add	r7, sp, #16
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_FS */
  uint8_t Component_Addr = 0 << 1;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_FS */
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800e1fa:	79fb      	ldrb	r3, [r7, #7]
 800e1fc:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c1, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800e202:	7b7b      	ldrb	r3, [r7, #13]
 800e204:	b299      	uxth	r1, r3
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	b29a      	uxth	r2, r3
 800e20a:	2364      	movs	r3, #100	; 0x64
 800e20c:	9302      	str	r3, [sp, #8]
 800e20e:	2301      	movs	r3, #1
 800e210:	9301      	str	r3, [sp, #4]
 800e212:	f107 030b 	add.w	r3, r7, #11
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	2301      	movs	r3, #1
 800e21a:	480f      	ldr	r0, [pc, #60]	; (800e258 <MX_DriverVbusFS+0x74>)
 800e21c:	f7f6 fad4 	bl	80047c8 <HAL_I2C_Mem_Read>
 800e220:	4603      	mov	r3, r0
 800e222:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800e224:	7b3a      	ldrb	r2, [r7, #12]
 800e226:	7afb      	ldrb	r3, [r7, #11]
 800e228:	4313      	orrs	r3, r2
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c1,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800e22e:	7b7b      	ldrb	r3, [r7, #13]
 800e230:	b299      	uxth	r1, r3
 800e232:	7bfb      	ldrb	r3, [r7, #15]
 800e234:	b29a      	uxth	r2, r3
 800e236:	2364      	movs	r3, #100	; 0x64
 800e238:	9302      	str	r3, [sp, #8]
 800e23a:	2301      	movs	r3, #1
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	f107 030c 	add.w	r3, r7, #12
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	2301      	movs	r3, #1
 800e246:	4804      	ldr	r0, [pc, #16]	; (800e258 <MX_DriverVbusFS+0x74>)
 800e248:	f7f6 f9c4 	bl	80045d4 <HAL_I2C_Mem_Write>
 800e24c:	4603      	mov	r3, r0
 800e24e:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800e250:	bf00      	nop
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	20000104 	.word	0x20000104

0800e25c <__errno>:
 800e25c:	4b01      	ldr	r3, [pc, #4]	; (800e264 <__errno+0x8>)
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	2000002c 	.word	0x2000002c

0800e268 <__libc_init_array>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	4d0d      	ldr	r5, [pc, #52]	; (800e2a0 <__libc_init_array+0x38>)
 800e26c:	4c0d      	ldr	r4, [pc, #52]	; (800e2a4 <__libc_init_array+0x3c>)
 800e26e:	1b64      	subs	r4, r4, r5
 800e270:	10a4      	asrs	r4, r4, #2
 800e272:	2600      	movs	r6, #0
 800e274:	42a6      	cmp	r6, r4
 800e276:	d109      	bne.n	800e28c <__libc_init_array+0x24>
 800e278:	4d0b      	ldr	r5, [pc, #44]	; (800e2a8 <__libc_init_array+0x40>)
 800e27a:	4c0c      	ldr	r4, [pc, #48]	; (800e2ac <__libc_init_array+0x44>)
 800e27c:	f000 f93c 	bl	800e4f8 <_init>
 800e280:	1b64      	subs	r4, r4, r5
 800e282:	10a4      	asrs	r4, r4, #2
 800e284:	2600      	movs	r6, #0
 800e286:	42a6      	cmp	r6, r4
 800e288:	d105      	bne.n	800e296 <__libc_init_array+0x2e>
 800e28a:	bd70      	pop	{r4, r5, r6, pc}
 800e28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e290:	4798      	blx	r3
 800e292:	3601      	adds	r6, #1
 800e294:	e7ee      	b.n	800e274 <__libc_init_array+0xc>
 800e296:	f855 3b04 	ldr.w	r3, [r5], #4
 800e29a:	4798      	blx	r3
 800e29c:	3601      	adds	r6, #1
 800e29e:	e7f2      	b.n	800e286 <__libc_init_array+0x1e>
 800e2a0:	0800e69c 	.word	0x0800e69c
 800e2a4:	0800e69c 	.word	0x0800e69c
 800e2a8:	0800e69c 	.word	0x0800e69c
 800e2ac:	0800e6a0 	.word	0x0800e6a0

0800e2b0 <malloc>:
 800e2b0:	4b02      	ldr	r3, [pc, #8]	; (800e2bc <malloc+0xc>)
 800e2b2:	4601      	mov	r1, r0
 800e2b4:	6818      	ldr	r0, [r3, #0]
 800e2b6:	f000 b88d 	b.w	800e3d4 <_malloc_r>
 800e2ba:	bf00      	nop
 800e2bc:	2000002c 	.word	0x2000002c

0800e2c0 <free>:
 800e2c0:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <free+0xc>)
 800e2c2:	4601      	mov	r1, r0
 800e2c4:	6818      	ldr	r0, [r3, #0]
 800e2c6:	f000 b819 	b.w	800e2fc <_free_r>
 800e2ca:	bf00      	nop
 800e2cc:	2000002c 	.word	0x2000002c

0800e2d0 <memcpy>:
 800e2d0:	440a      	add	r2, r1
 800e2d2:	4291      	cmp	r1, r2
 800e2d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2d8:	d100      	bne.n	800e2dc <memcpy+0xc>
 800e2da:	4770      	bx	lr
 800e2dc:	b510      	push	{r4, lr}
 800e2de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2e6:	4291      	cmp	r1, r2
 800e2e8:	d1f9      	bne.n	800e2de <memcpy+0xe>
 800e2ea:	bd10      	pop	{r4, pc}

0800e2ec <memset>:
 800e2ec:	4402      	add	r2, r0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d100      	bne.n	800e2f6 <memset+0xa>
 800e2f4:	4770      	bx	lr
 800e2f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2fa:	e7f9      	b.n	800e2f0 <memset+0x4>

0800e2fc <_free_r>:
 800e2fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2fe:	2900      	cmp	r1, #0
 800e300:	d044      	beq.n	800e38c <_free_r+0x90>
 800e302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e306:	9001      	str	r0, [sp, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f1a1 0404 	sub.w	r4, r1, #4
 800e30e:	bfb8      	it	lt
 800e310:	18e4      	addlt	r4, r4, r3
 800e312:	f000 f8e3 	bl	800e4dc <__malloc_lock>
 800e316:	4a1e      	ldr	r2, [pc, #120]	; (800e390 <_free_r+0x94>)
 800e318:	9801      	ldr	r0, [sp, #4]
 800e31a:	6813      	ldr	r3, [r2, #0]
 800e31c:	b933      	cbnz	r3, 800e32c <_free_r+0x30>
 800e31e:	6063      	str	r3, [r4, #4]
 800e320:	6014      	str	r4, [r2, #0]
 800e322:	b003      	add	sp, #12
 800e324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e328:	f000 b8de 	b.w	800e4e8 <__malloc_unlock>
 800e32c:	42a3      	cmp	r3, r4
 800e32e:	d908      	bls.n	800e342 <_free_r+0x46>
 800e330:	6825      	ldr	r5, [r4, #0]
 800e332:	1961      	adds	r1, r4, r5
 800e334:	428b      	cmp	r3, r1
 800e336:	bf01      	itttt	eq
 800e338:	6819      	ldreq	r1, [r3, #0]
 800e33a:	685b      	ldreq	r3, [r3, #4]
 800e33c:	1949      	addeq	r1, r1, r5
 800e33e:	6021      	streq	r1, [r4, #0]
 800e340:	e7ed      	b.n	800e31e <_free_r+0x22>
 800e342:	461a      	mov	r2, r3
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	b10b      	cbz	r3, 800e34c <_free_r+0x50>
 800e348:	42a3      	cmp	r3, r4
 800e34a:	d9fa      	bls.n	800e342 <_free_r+0x46>
 800e34c:	6811      	ldr	r1, [r2, #0]
 800e34e:	1855      	adds	r5, r2, r1
 800e350:	42a5      	cmp	r5, r4
 800e352:	d10b      	bne.n	800e36c <_free_r+0x70>
 800e354:	6824      	ldr	r4, [r4, #0]
 800e356:	4421      	add	r1, r4
 800e358:	1854      	adds	r4, r2, r1
 800e35a:	42a3      	cmp	r3, r4
 800e35c:	6011      	str	r1, [r2, #0]
 800e35e:	d1e0      	bne.n	800e322 <_free_r+0x26>
 800e360:	681c      	ldr	r4, [r3, #0]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	6053      	str	r3, [r2, #4]
 800e366:	4421      	add	r1, r4
 800e368:	6011      	str	r1, [r2, #0]
 800e36a:	e7da      	b.n	800e322 <_free_r+0x26>
 800e36c:	d902      	bls.n	800e374 <_free_r+0x78>
 800e36e:	230c      	movs	r3, #12
 800e370:	6003      	str	r3, [r0, #0]
 800e372:	e7d6      	b.n	800e322 <_free_r+0x26>
 800e374:	6825      	ldr	r5, [r4, #0]
 800e376:	1961      	adds	r1, r4, r5
 800e378:	428b      	cmp	r3, r1
 800e37a:	bf04      	itt	eq
 800e37c:	6819      	ldreq	r1, [r3, #0]
 800e37e:	685b      	ldreq	r3, [r3, #4]
 800e380:	6063      	str	r3, [r4, #4]
 800e382:	bf04      	itt	eq
 800e384:	1949      	addeq	r1, r1, r5
 800e386:	6021      	streq	r1, [r4, #0]
 800e388:	6054      	str	r4, [r2, #4]
 800e38a:	e7ca      	b.n	800e322 <_free_r+0x26>
 800e38c:	b003      	add	sp, #12
 800e38e:	bd30      	pop	{r4, r5, pc}
 800e390:	20001d98 	.word	0x20001d98

0800e394 <sbrk_aligned>:
 800e394:	b570      	push	{r4, r5, r6, lr}
 800e396:	4e0e      	ldr	r6, [pc, #56]	; (800e3d0 <sbrk_aligned+0x3c>)
 800e398:	460c      	mov	r4, r1
 800e39a:	6831      	ldr	r1, [r6, #0]
 800e39c:	4605      	mov	r5, r0
 800e39e:	b911      	cbnz	r1, 800e3a6 <sbrk_aligned+0x12>
 800e3a0:	f000 f88c 	bl	800e4bc <_sbrk_r>
 800e3a4:	6030      	str	r0, [r6, #0]
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f000 f887 	bl	800e4bc <_sbrk_r>
 800e3ae:	1c43      	adds	r3, r0, #1
 800e3b0:	d00a      	beq.n	800e3c8 <sbrk_aligned+0x34>
 800e3b2:	1cc4      	adds	r4, r0, #3
 800e3b4:	f024 0403 	bic.w	r4, r4, #3
 800e3b8:	42a0      	cmp	r0, r4
 800e3ba:	d007      	beq.n	800e3cc <sbrk_aligned+0x38>
 800e3bc:	1a21      	subs	r1, r4, r0
 800e3be:	4628      	mov	r0, r5
 800e3c0:	f000 f87c 	bl	800e4bc <_sbrk_r>
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	d101      	bne.n	800e3cc <sbrk_aligned+0x38>
 800e3c8:	f04f 34ff 	mov.w	r4, #4294967295
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	bd70      	pop	{r4, r5, r6, pc}
 800e3d0:	20001d9c 	.word	0x20001d9c

0800e3d4 <_malloc_r>:
 800e3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d8:	1ccd      	adds	r5, r1, #3
 800e3da:	f025 0503 	bic.w	r5, r5, #3
 800e3de:	3508      	adds	r5, #8
 800e3e0:	2d0c      	cmp	r5, #12
 800e3e2:	bf38      	it	cc
 800e3e4:	250c      	movcc	r5, #12
 800e3e6:	2d00      	cmp	r5, #0
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	db01      	blt.n	800e3f0 <_malloc_r+0x1c>
 800e3ec:	42a9      	cmp	r1, r5
 800e3ee:	d905      	bls.n	800e3fc <_malloc_r+0x28>
 800e3f0:	230c      	movs	r3, #12
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	2600      	movs	r6, #0
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3fc:	4e2e      	ldr	r6, [pc, #184]	; (800e4b8 <_malloc_r+0xe4>)
 800e3fe:	f000 f86d 	bl	800e4dc <__malloc_lock>
 800e402:	6833      	ldr	r3, [r6, #0]
 800e404:	461c      	mov	r4, r3
 800e406:	bb34      	cbnz	r4, 800e456 <_malloc_r+0x82>
 800e408:	4629      	mov	r1, r5
 800e40a:	4638      	mov	r0, r7
 800e40c:	f7ff ffc2 	bl	800e394 <sbrk_aligned>
 800e410:	1c43      	adds	r3, r0, #1
 800e412:	4604      	mov	r4, r0
 800e414:	d14d      	bne.n	800e4b2 <_malloc_r+0xde>
 800e416:	6834      	ldr	r4, [r6, #0]
 800e418:	4626      	mov	r6, r4
 800e41a:	2e00      	cmp	r6, #0
 800e41c:	d140      	bne.n	800e4a0 <_malloc_r+0xcc>
 800e41e:	6823      	ldr	r3, [r4, #0]
 800e420:	4631      	mov	r1, r6
 800e422:	4638      	mov	r0, r7
 800e424:	eb04 0803 	add.w	r8, r4, r3
 800e428:	f000 f848 	bl	800e4bc <_sbrk_r>
 800e42c:	4580      	cmp	r8, r0
 800e42e:	d13a      	bne.n	800e4a6 <_malloc_r+0xd2>
 800e430:	6821      	ldr	r1, [r4, #0]
 800e432:	3503      	adds	r5, #3
 800e434:	1a6d      	subs	r5, r5, r1
 800e436:	f025 0503 	bic.w	r5, r5, #3
 800e43a:	3508      	adds	r5, #8
 800e43c:	2d0c      	cmp	r5, #12
 800e43e:	bf38      	it	cc
 800e440:	250c      	movcc	r5, #12
 800e442:	4629      	mov	r1, r5
 800e444:	4638      	mov	r0, r7
 800e446:	f7ff ffa5 	bl	800e394 <sbrk_aligned>
 800e44a:	3001      	adds	r0, #1
 800e44c:	d02b      	beq.n	800e4a6 <_malloc_r+0xd2>
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	442b      	add	r3, r5
 800e452:	6023      	str	r3, [r4, #0]
 800e454:	e00e      	b.n	800e474 <_malloc_r+0xa0>
 800e456:	6822      	ldr	r2, [r4, #0]
 800e458:	1b52      	subs	r2, r2, r5
 800e45a:	d41e      	bmi.n	800e49a <_malloc_r+0xc6>
 800e45c:	2a0b      	cmp	r2, #11
 800e45e:	d916      	bls.n	800e48e <_malloc_r+0xba>
 800e460:	1961      	adds	r1, r4, r5
 800e462:	42a3      	cmp	r3, r4
 800e464:	6025      	str	r5, [r4, #0]
 800e466:	bf18      	it	ne
 800e468:	6059      	strne	r1, [r3, #4]
 800e46a:	6863      	ldr	r3, [r4, #4]
 800e46c:	bf08      	it	eq
 800e46e:	6031      	streq	r1, [r6, #0]
 800e470:	5162      	str	r2, [r4, r5]
 800e472:	604b      	str	r3, [r1, #4]
 800e474:	4638      	mov	r0, r7
 800e476:	f104 060b 	add.w	r6, r4, #11
 800e47a:	f000 f835 	bl	800e4e8 <__malloc_unlock>
 800e47e:	f026 0607 	bic.w	r6, r6, #7
 800e482:	1d23      	adds	r3, r4, #4
 800e484:	1af2      	subs	r2, r6, r3
 800e486:	d0b6      	beq.n	800e3f6 <_malloc_r+0x22>
 800e488:	1b9b      	subs	r3, r3, r6
 800e48a:	50a3      	str	r3, [r4, r2]
 800e48c:	e7b3      	b.n	800e3f6 <_malloc_r+0x22>
 800e48e:	6862      	ldr	r2, [r4, #4]
 800e490:	42a3      	cmp	r3, r4
 800e492:	bf0c      	ite	eq
 800e494:	6032      	streq	r2, [r6, #0]
 800e496:	605a      	strne	r2, [r3, #4]
 800e498:	e7ec      	b.n	800e474 <_malloc_r+0xa0>
 800e49a:	4623      	mov	r3, r4
 800e49c:	6864      	ldr	r4, [r4, #4]
 800e49e:	e7b2      	b.n	800e406 <_malloc_r+0x32>
 800e4a0:	4634      	mov	r4, r6
 800e4a2:	6876      	ldr	r6, [r6, #4]
 800e4a4:	e7b9      	b.n	800e41a <_malloc_r+0x46>
 800e4a6:	230c      	movs	r3, #12
 800e4a8:	603b      	str	r3, [r7, #0]
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	f000 f81c 	bl	800e4e8 <__malloc_unlock>
 800e4b0:	e7a1      	b.n	800e3f6 <_malloc_r+0x22>
 800e4b2:	6025      	str	r5, [r4, #0]
 800e4b4:	e7de      	b.n	800e474 <_malloc_r+0xa0>
 800e4b6:	bf00      	nop
 800e4b8:	20001d98 	.word	0x20001d98

0800e4bc <_sbrk_r>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4d06      	ldr	r5, [pc, #24]	; (800e4d8 <_sbrk_r+0x1c>)
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	4608      	mov	r0, r1
 800e4c6:	602b      	str	r3, [r5, #0]
 800e4c8:	f7f2 ff2e 	bl	8001328 <_sbrk>
 800e4cc:	1c43      	adds	r3, r0, #1
 800e4ce:	d102      	bne.n	800e4d6 <_sbrk_r+0x1a>
 800e4d0:	682b      	ldr	r3, [r5, #0]
 800e4d2:	b103      	cbz	r3, 800e4d6 <_sbrk_r+0x1a>
 800e4d4:	6023      	str	r3, [r4, #0]
 800e4d6:	bd38      	pop	{r3, r4, r5, pc}
 800e4d8:	20001da0 	.word	0x20001da0

0800e4dc <__malloc_lock>:
 800e4dc:	4801      	ldr	r0, [pc, #4]	; (800e4e4 <__malloc_lock+0x8>)
 800e4de:	f000 b809 	b.w	800e4f4 <__retarget_lock_acquire_recursive>
 800e4e2:	bf00      	nop
 800e4e4:	20001da4 	.word	0x20001da4

0800e4e8 <__malloc_unlock>:
 800e4e8:	4801      	ldr	r0, [pc, #4]	; (800e4f0 <__malloc_unlock+0x8>)
 800e4ea:	f000 b804 	b.w	800e4f6 <__retarget_lock_release_recursive>
 800e4ee:	bf00      	nop
 800e4f0:	20001da4 	.word	0x20001da4

0800e4f4 <__retarget_lock_acquire_recursive>:
 800e4f4:	4770      	bx	lr

0800e4f6 <__retarget_lock_release_recursive>:
 800e4f6:	4770      	bx	lr

0800e4f8 <_init>:
 800e4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fa:	bf00      	nop
 800e4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4fe:	bc08      	pop	{r3}
 800e500:	469e      	mov	lr, r3
 800e502:	4770      	bx	lr

0800e504 <_fini>:
 800e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e506:	bf00      	nop
 800e508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e50a:	bc08      	pop	{r3}
 800e50c:	469e      	mov	lr, r3
 800e50e:	4770      	bx	lr
